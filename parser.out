Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    DECREMENT
    DEF
    DOT
    ELSE
    EQ
    EQUALS
    FOR
    HEAD
    INCREMENT
    ISEMPTY
    LENGTH
    LIST
    MOD
    OBJECT
    PRINTLN
    PRODUCTITERATOR
    RETURN
    REVERSE
    SEMICOLON
    SWAP
    TAIL
    THIS
    TOSTRING
    VAL
    WHILE
    unit

Grammar

Rule 0     S' -> declararVariable
Rule 1     declararVariable -> VAR ID COLON tipoValue
Rule 2     declararVariable -> VAR ID COLON tipo
Rule 3     declararVariable -> VAR ID EQUAL value
Rule 4     declararVariable -> VAR ID EQUAL expression
Rule 5     value -> string
Rule 6     value -> booleano
Rule 7     value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 8     value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 9     value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 10    value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 11    value -> ARRAY LPAREN elementosInternos RPAREN
Rule 12    elementosInternos -> elementosInternosInt
Rule 13    elementosInternos -> elementosInternosDouble
Rule 14    elementosInternos -> elementosInternosBool
Rule 15    elementosInternos -> elementosInternosString
Rule 16    elementosInternosInt -> int
Rule 17    elementosInternosInt -> int COMMA elementosInternosInt
Rule 18    elementosInternosDouble -> double
Rule 19    elementosInternosDouble -> double COMMA elementosInternosDouble
Rule 20    elementosInternosBool -> booleano
Rule 21    elementosInternosBool -> booleano COMMA elementosInternosBool
Rule 22    elementosInternosString -> string
Rule 23    elementosInternosString -> string COMMA elementosInternosString
Rule 24    tipo -> INT
Rule 25    tipo -> DOUBLE
Rule 26    tipo -> BOOL
Rule 27    tipo -> STRING_TYPE
Rule 28    tipoValue -> STRING_TYPE EQUAL string
Rule 29    tipoValue -> BOOL EQUAL booleano
Rule 30    tipoValue -> INT EQUAL int
Rule 31    tipoValue -> DOUBLE EQUAL double
Rule 32    tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 33    tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 34    tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 35    tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 36    cuerpo -> expression
Rule 37    cuerpo -> sentencia
Rule 38    expression -> expression PLUS term
Rule 39    expression -> expression MINUS term
Rule 40    expression -> term
Rule 41    term -> term TIMES factor
Rule 42    term -> term DIVIDE factor
Rule 43    term -> factor
Rule 44    sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE
Rule 45    comparacion -> GT
Rule 46    comparacion -> GE
Rule 47    comparacion -> LT
Rule 48    comparacion -> LE
Rule 49    factor -> INT_NUMBER
Rule 50    factor -> DOUBLE_NUMBER
Rule 51    booleano -> TRUE
Rule 52    booleano -> FALSE
Rule 53    string -> STRING
Rule 54    double -> DOUBLE_NUMBER
Rule 55    int -> INT_NUMBER

Terminals, with rules where they appear

ARRAY                : 7 8 9 10 11 32 32 33 33 34 34 35 35
BOOL                 : 9 26 29 34 34
CLASS                : 
COLON                : 1 2
COMMA                : 17 19 21 23
DECREMENT            : 
DEF                  : 
DIVIDE               : 42
DOT                  : 
DOUBLE               : 8 25 31 33 33
DOUBLE_NUMBER        : 50 54
ELSE                 : 
EQ                   : 
EQUAL                : 3 4 28 29 30 31 32 33 34 35
EQUALS               : 
FALSE                : 52
FOR                  : 
GE                   : 46
GT                   : 45
HEAD                 : 
ID                   : 1 2 3 4
IF                   : 44
INCREMENT            : 
INT                  : 7 24 30 32 32
INT_NUMBER           : 49 55
ISEMPTY              : 
LBRACE               : 44
LBRACK               : 7 8 9 10 32 32 33 33 34 34 35 35
LE                   : 48
LENGTH               : 
LIST                 : 
LPAREN               : 7 8 9 10 11 32 33 34 35
LT                   : 47
MINUS                : 39
MOD                  : 
NEW                  : 7 8 9 10 32 33 34 35
OBJECT               : 
PLUS                 : 38
PRINTLN              : 
PRODUCTITERATOR      : 
RBRACE               : 44
RBRACK               : 7 8 9 10 32 32 33 33 34 34 35 35
RETURN               : 
REVERSE              : 
RPAREN               : 7 8 9 10 11 32 33 34 35
SEMICOLON            : 
STRING               : 53
STRING_TYPE          : 10 27 28 35 35
SWAP                 : 
TAIL                 : 
THIS                 : 
TIMES                : 41
TOSTRING             : 
TRUE                 : 51
VAL                  : 
VAR                  : 1 2 3 4
WHILE                : 
error                : 
unit                 : 

Nonterminals, with rules where they appear

booleano             : 6 20 21 29
comparacion          : 44
cuerpo               : 44
declararVariable     : 0
double               : 18 19 31
elementosInternos    : 11
elementosInternosBool : 14 21
elementosInternosDouble : 13 19
elementosInternosInt : 12 17
elementosInternosString : 15 23
expression           : 4 36 38 39
factor               : 41 42 43 44 44
int                  : 7 8 9 10 16 17 30 32 33 34 35
sentencia            : 37
string               : 5 22 23 28
term                 : 38 39 40 41 42
tipo                 : 2
tipoValue            : 1
value                : 3

Parsing method: LALR

state 0

    (0) S' -> . declararVariable
    (1) declararVariable -> . VAR ID COLON tipoValue
    (2) declararVariable -> . VAR ID COLON tipo
    (3) declararVariable -> . VAR ID EQUAL value
    (4) declararVariable -> . VAR ID EQUAL expression

    VAR             shift and go to state 2

    declararVariable               shift and go to state 1

state 1

    (0) S' -> declararVariable .



state 2

    (1) declararVariable -> VAR . ID COLON tipoValue
    (2) declararVariable -> VAR . ID COLON tipo
    (3) declararVariable -> VAR . ID EQUAL value
    (4) declararVariable -> VAR . ID EQUAL expression

    ID              shift and go to state 3


state 3

    (1) declararVariable -> VAR ID . COLON tipoValue
    (2) declararVariable -> VAR ID . COLON tipo
    (3) declararVariable -> VAR ID . EQUAL value
    (4) declararVariable -> VAR ID . EQUAL expression

    COLON           shift and go to state 4
    EQUAL           shift and go to state 5


state 4

    (1) declararVariable -> VAR ID COLON . tipoValue
    (2) declararVariable -> VAR ID COLON . tipo
    (28) tipoValue -> . STRING_TYPE EQUAL string
    (29) tipoValue -> . BOOL EQUAL booleano
    (30) tipoValue -> . INT EQUAL int
    (31) tipoValue -> . DOUBLE EQUAL double
    (32) tipoValue -> . ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (33) tipoValue -> . ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (34) tipoValue -> . ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (35) tipoValue -> . ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (24) tipo -> . INT
    (25) tipo -> . DOUBLE
    (26) tipo -> . BOOL
    (27) tipo -> . STRING_TYPE

    STRING_TYPE     shift and go to state 8
    BOOL            shift and go to state 9
    INT             shift and go to state 10
    DOUBLE          shift and go to state 11
    ARRAY           shift and go to state 12

    tipoValue                      shift and go to state 6
    tipo                           shift and go to state 7

state 5

    (3) declararVariable -> VAR ID EQUAL . value
    (4) declararVariable -> VAR ID EQUAL . expression
    (5) value -> . string
    (6) value -> . booleano
    (7) value -> . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (8) value -> . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (9) value -> . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (10) value -> . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (11) value -> . ARRAY LPAREN elementosInternos RPAREN
    (38) expression -> . expression PLUS term
    (39) expression -> . expression MINUS term
    (40) expression -> . term
    (53) string -> . STRING
    (51) booleano -> . TRUE
    (52) booleano -> . FALSE
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (49) factor -> . INT_NUMBER
    (50) factor -> . DOUBLE_NUMBER

    NEW             shift and go to state 17
    ARRAY           shift and go to state 18
    STRING          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    INT_NUMBER      shift and go to state 24
    DOUBLE_NUMBER   shift and go to state 25

    value                          shift and go to state 13
    expression                     shift and go to state 14
    string                         shift and go to state 15
    booleano                       shift and go to state 16
    term                           shift and go to state 19
    factor                         shift and go to state 23

state 6

    (1) declararVariable -> VAR ID COLON tipoValue .

    $end            reduce using rule 1 (declararVariable -> VAR ID COLON tipoValue .)


state 7

    (2) declararVariable -> VAR ID COLON tipo .

    $end            reduce using rule 2 (declararVariable -> VAR ID COLON tipo .)


state 8

    (28) tipoValue -> STRING_TYPE . EQUAL string
    (27) tipo -> STRING_TYPE .

    EQUAL           shift and go to state 26
    $end            reduce using rule 27 (tipo -> STRING_TYPE .)


state 9

    (29) tipoValue -> BOOL . EQUAL booleano
    (26) tipo -> BOOL .

    EQUAL           shift and go to state 27
    $end            reduce using rule 26 (tipo -> BOOL .)


state 10

    (30) tipoValue -> INT . EQUAL int
    (24) tipo -> INT .

    EQUAL           shift and go to state 28
    $end            reduce using rule 24 (tipo -> INT .)


state 11

    (31) tipoValue -> DOUBLE . EQUAL double
    (25) tipo -> DOUBLE .

    EQUAL           shift and go to state 29
    $end            reduce using rule 25 (tipo -> DOUBLE .)


state 12

    (32) tipoValue -> ARRAY . LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (33) tipoValue -> ARRAY . LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (34) tipoValue -> ARRAY . LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (35) tipoValue -> ARRAY . LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 30


state 13

    (3) declararVariable -> VAR ID EQUAL value .

    $end            reduce using rule 3 (declararVariable -> VAR ID EQUAL value .)


state 14

    (4) declararVariable -> VAR ID EQUAL expression .
    (38) expression -> expression . PLUS term
    (39) expression -> expression . MINUS term

    $end            reduce using rule 4 (declararVariable -> VAR ID EQUAL expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 15

    (5) value -> string .

    $end            reduce using rule 5 (value -> string .)


state 16

    (6) value -> booleano .

    $end            reduce using rule 6 (value -> booleano .)


state 17

    (7) value -> NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (8) value -> NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (9) value -> NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (10) value -> NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 33


state 18

    (11) value -> ARRAY . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 34


state 19

    (40) expression -> term .
    (41) term -> term . TIMES factor
    (42) term -> term . DIVIDE factor

    PLUS            reduce using rule 40 (expression -> term .)
    MINUS           reduce using rule 40 (expression -> term .)
    $end            reduce using rule 40 (expression -> term .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 20

    (53) string -> STRING .

    $end            reduce using rule 53 (string -> STRING .)
    COMMA           reduce using rule 53 (string -> STRING .)
    RPAREN          reduce using rule 53 (string -> STRING .)


state 21

    (51) booleano -> TRUE .

    $end            reduce using rule 51 (booleano -> TRUE .)
    COMMA           reduce using rule 51 (booleano -> TRUE .)
    RPAREN          reduce using rule 51 (booleano -> TRUE .)


state 22

    (52) booleano -> FALSE .

    $end            reduce using rule 52 (booleano -> FALSE .)
    COMMA           reduce using rule 52 (booleano -> FALSE .)
    RPAREN          reduce using rule 52 (booleano -> FALSE .)


state 23

    (43) term -> factor .

    TIMES           reduce using rule 43 (term -> factor .)
    DIVIDE          reduce using rule 43 (term -> factor .)
    PLUS            reduce using rule 43 (term -> factor .)
    MINUS           reduce using rule 43 (term -> factor .)
    $end            reduce using rule 43 (term -> factor .)


state 24

    (49) factor -> INT_NUMBER .

    TIMES           reduce using rule 49 (factor -> INT_NUMBER .)
    DIVIDE          reduce using rule 49 (factor -> INT_NUMBER .)
    PLUS            reduce using rule 49 (factor -> INT_NUMBER .)
    MINUS           reduce using rule 49 (factor -> INT_NUMBER .)
    $end            reduce using rule 49 (factor -> INT_NUMBER .)


state 25

    (50) factor -> DOUBLE_NUMBER .

    TIMES           reduce using rule 50 (factor -> DOUBLE_NUMBER .)
    DIVIDE          reduce using rule 50 (factor -> DOUBLE_NUMBER .)
    PLUS            reduce using rule 50 (factor -> DOUBLE_NUMBER .)
    MINUS           reduce using rule 50 (factor -> DOUBLE_NUMBER .)
    $end            reduce using rule 50 (factor -> DOUBLE_NUMBER .)


state 26

    (28) tipoValue -> STRING_TYPE EQUAL . string
    (53) string -> . STRING

    STRING          shift and go to state 20

    string                         shift and go to state 37

state 27

    (29) tipoValue -> BOOL EQUAL . booleano
    (51) booleano -> . TRUE
    (52) booleano -> . FALSE

    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    booleano                       shift and go to state 38

state 28

    (30) tipoValue -> INT EQUAL . int
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 39

state 29

    (31) tipoValue -> DOUBLE EQUAL . double
    (54) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 42

    double                         shift and go to state 41

state 30

    (32) tipoValue -> ARRAY LBRACK . INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (33) tipoValue -> ARRAY LBRACK . DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (34) tipoValue -> ARRAY LBRACK . BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (35) tipoValue -> ARRAY LBRACK . STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    BOOL            shift and go to state 45
    STRING_TYPE     shift and go to state 46


state 31

    (38) expression -> expression PLUS . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (49) factor -> . INT_NUMBER
    (50) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 24
    DOUBLE_NUMBER   shift and go to state 25

    term                           shift and go to state 47
    factor                         shift and go to state 23

state 32

    (39) expression -> expression MINUS . term
    (41) term -> . term TIMES factor
    (42) term -> . term DIVIDE factor
    (43) term -> . factor
    (49) factor -> . INT_NUMBER
    (50) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 24
    DOUBLE_NUMBER   shift and go to state 25

    term                           shift and go to state 48
    factor                         shift and go to state 23

state 33

    (7) value -> NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN
    (8) value -> NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (9) value -> NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN
    (10) value -> NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 49


state 34

    (11) value -> ARRAY LPAREN . elementosInternos RPAREN
    (12) elementosInternos -> . elementosInternosInt
    (13) elementosInternos -> . elementosInternosDouble
    (14) elementosInternos -> . elementosInternosBool
    (15) elementosInternos -> . elementosInternosString
    (16) elementosInternosInt -> . int
    (17) elementosInternosInt -> . int COMMA elementosInternosInt
    (18) elementosInternosDouble -> . double
    (19) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (20) elementosInternosBool -> . booleano
    (21) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (22) elementosInternosString -> . string
    (23) elementosInternosString -> . string COMMA elementosInternosString
    (55) int -> . INT_NUMBER
    (54) double -> . DOUBLE_NUMBER
    (51) booleano -> . TRUE
    (52) booleano -> . FALSE
    (53) string -> . STRING

    INT_NUMBER      shift and go to state 40
    DOUBLE_NUMBER   shift and go to state 42
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 20

    elementosInternos              shift and go to state 50
    elementosInternosInt           shift and go to state 51
    elementosInternosDouble        shift and go to state 52
    elementosInternosBool          shift and go to state 53
    elementosInternosString        shift and go to state 54
    int                            shift and go to state 55
    double                         shift and go to state 56
    booleano                       shift and go to state 57
    string                         shift and go to state 58

state 35

    (41) term -> term TIMES . factor
    (49) factor -> . INT_NUMBER
    (50) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 24
    DOUBLE_NUMBER   shift and go to state 25

    factor                         shift and go to state 59

state 36

    (42) term -> term DIVIDE . factor
    (49) factor -> . INT_NUMBER
    (50) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 24
    DOUBLE_NUMBER   shift and go to state 25

    factor                         shift and go to state 60

state 37

    (28) tipoValue -> STRING_TYPE EQUAL string .

    $end            reduce using rule 28 (tipoValue -> STRING_TYPE EQUAL string .)


state 38

    (29) tipoValue -> BOOL EQUAL booleano .

    $end            reduce using rule 29 (tipoValue -> BOOL EQUAL booleano .)


state 39

    (30) tipoValue -> INT EQUAL int .

    $end            reduce using rule 30 (tipoValue -> INT EQUAL int .)


state 40

    (55) int -> INT_NUMBER .

    $end            reduce using rule 55 (int -> INT_NUMBER .)
    COMMA           reduce using rule 55 (int -> INT_NUMBER .)
    RPAREN          reduce using rule 55 (int -> INT_NUMBER .)


state 41

    (31) tipoValue -> DOUBLE EQUAL double .

    $end            reduce using rule 31 (tipoValue -> DOUBLE EQUAL double .)


state 42

    (54) double -> DOUBLE_NUMBER .

    $end            reduce using rule 54 (double -> DOUBLE_NUMBER .)
    COMMA           reduce using rule 54 (double -> DOUBLE_NUMBER .)
    RPAREN          reduce using rule 54 (double -> DOUBLE_NUMBER .)


state 43

    (32) tipoValue -> ARRAY LBRACK INT . RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 61


state 44

    (33) tipoValue -> ARRAY LBRACK DOUBLE . RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 62


state 45

    (34) tipoValue -> ARRAY LBRACK BOOL . RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 63


state 46

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE . RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 64


state 47

    (38) expression -> expression PLUS term .
    (41) term -> term . TIMES factor
    (42) term -> term . DIVIDE factor

    PLUS            reduce using rule 38 (expression -> expression PLUS term .)
    MINUS           reduce using rule 38 (expression -> expression PLUS term .)
    $end            reduce using rule 38 (expression -> expression PLUS term .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 48

    (39) expression -> expression MINUS term .
    (41) term -> term . TIMES factor
    (42) term -> term . DIVIDE factor

    PLUS            reduce using rule 39 (expression -> expression MINUS term .)
    MINUS           reduce using rule 39 (expression -> expression MINUS term .)
    $end            reduce using rule 39 (expression -> expression MINUS term .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 49

    (7) value -> NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN
    (8) value -> NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN
    (9) value -> NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN
    (10) value -> NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN

    INT             shift and go to state 65
    DOUBLE          shift and go to state 66
    BOOL            shift and go to state 67
    STRING_TYPE     shift and go to state 68


state 50

    (11) value -> ARRAY LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 69


state 51

    (12) elementosInternos -> elementosInternosInt .

    RPAREN          reduce using rule 12 (elementosInternos -> elementosInternosInt .)


state 52

    (13) elementosInternos -> elementosInternosDouble .

    RPAREN          reduce using rule 13 (elementosInternos -> elementosInternosDouble .)


state 53

    (14) elementosInternos -> elementosInternosBool .

    RPAREN          reduce using rule 14 (elementosInternos -> elementosInternosBool .)


state 54

    (15) elementosInternos -> elementosInternosString .

    RPAREN          reduce using rule 15 (elementosInternos -> elementosInternosString .)


state 55

    (16) elementosInternosInt -> int .
    (17) elementosInternosInt -> int . COMMA elementosInternosInt

    RPAREN          reduce using rule 16 (elementosInternosInt -> int .)
    COMMA           shift and go to state 70


state 56

    (18) elementosInternosDouble -> double .
    (19) elementosInternosDouble -> double . COMMA elementosInternosDouble

    RPAREN          reduce using rule 18 (elementosInternosDouble -> double .)
    COMMA           shift and go to state 71


state 57

    (20) elementosInternosBool -> booleano .
    (21) elementosInternosBool -> booleano . COMMA elementosInternosBool

    RPAREN          reduce using rule 20 (elementosInternosBool -> booleano .)
    COMMA           shift and go to state 72


state 58

    (22) elementosInternosString -> string .
    (23) elementosInternosString -> string . COMMA elementosInternosString

    RPAREN          reduce using rule 22 (elementosInternosString -> string .)
    COMMA           shift and go to state 73


state 59

    (41) term -> term TIMES factor .

    TIMES           reduce using rule 41 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 41 (term -> term TIMES factor .)
    PLUS            reduce using rule 41 (term -> term TIMES factor .)
    MINUS           reduce using rule 41 (term -> term TIMES factor .)
    $end            reduce using rule 41 (term -> term TIMES factor .)


state 60

    (42) term -> term DIVIDE factor .

    TIMES           reduce using rule 42 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 42 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 42 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 42 (term -> term DIVIDE factor .)
    $end            reduce using rule 42 (term -> term DIVIDE factor .)


state 61

    (32) tipoValue -> ARRAY LBRACK INT RBRACK . EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 74


state 62

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK . EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 75


state 63

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK . EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 76


state 64

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK . EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 77


state 65

    (7) value -> NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 78


state 66

    (8) value -> NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 79


state 67

    (9) value -> NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 80


state 68

    (10) value -> NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 81


state 69

    (11) value -> ARRAY LPAREN elementosInternos RPAREN .

    $end            reduce using rule 11 (value -> ARRAY LPAREN elementosInternos RPAREN .)


state 70

    (17) elementosInternosInt -> int COMMA . elementosInternosInt
    (16) elementosInternosInt -> . int
    (17) elementosInternosInt -> . int COMMA elementosInternosInt
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 55
    elementosInternosInt           shift and go to state 82

state 71

    (19) elementosInternosDouble -> double COMMA . elementosInternosDouble
    (18) elementosInternosDouble -> . double
    (19) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (54) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 42

    double                         shift and go to state 56
    elementosInternosDouble        shift and go to state 83

state 72

    (21) elementosInternosBool -> booleano COMMA . elementosInternosBool
    (20) elementosInternosBool -> . booleano
    (21) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (51) booleano -> . TRUE
    (52) booleano -> . FALSE

    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    booleano                       shift and go to state 57
    elementosInternosBool          shift and go to state 84

state 73

    (23) elementosInternosString -> string COMMA . elementosInternosString
    (22) elementosInternosString -> . string
    (23) elementosInternosString -> . string COMMA elementosInternosString
    (53) string -> . STRING

    STRING          shift and go to state 20

    string                         shift and go to state 58
    elementosInternosString        shift and go to state 85

state 74

    (32) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    NEW             shift and go to state 86


state 75

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 87


state 76

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    NEW             shift and go to state 88


state 77

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 89


state 78

    (7) value -> NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 90


state 79

    (8) value -> NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 91


state 80

    (9) value -> NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 92


state 81

    (10) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 93


state 82

    (17) elementosInternosInt -> int COMMA elementosInternosInt .

    RPAREN          reduce using rule 17 (elementosInternosInt -> int COMMA elementosInternosInt .)


state 83

    (19) elementosInternosDouble -> double COMMA elementosInternosDouble .

    RPAREN          reduce using rule 19 (elementosInternosDouble -> double COMMA elementosInternosDouble .)


state 84

    (21) elementosInternosBool -> booleano COMMA elementosInternosBool .

    RPAREN          reduce using rule 21 (elementosInternosBool -> booleano COMMA elementosInternosBool .)


state 85

    (23) elementosInternosString -> string COMMA elementosInternosString .

    RPAREN          reduce using rule 23 (elementosInternosString -> string COMMA elementosInternosString .)


state 86

    (32) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 94


state 87

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 95


state 88

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 96


state 89

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 97


state 90

    (7) value -> NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 98

state 91

    (8) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 99

state 92

    (9) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 100

state 93

    (10) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 101

state 94

    (32) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 102


state 95

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 103


state 96

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 104


state 97

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 105


state 98

    (7) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 106


state 99

    (8) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 107


state 100

    (9) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 108


state 101

    (10) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 109


state 102

    (32) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN

    INT             shift and go to state 110


state 103

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN

    DOUBLE          shift and go to state 111


state 104

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN

    BOOL            shift and go to state 112


state 105

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN

    STRING_TYPE     shift and go to state 113


state 106

    (7) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 7 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 107

    (8) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 8 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 108

    (9) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 9 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 109

    (10) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 10 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)


state 110

    (32) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 114


state 111

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 115


state 112

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 116


state 113

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 117


state 114

    (32) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 118


state 115

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 119


state 116

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 120


state 117

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 121


state 118

    (32) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 122

state 119

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 123

state 120

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 124

state 121

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (55) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 40

    int                            shift and go to state 125

state 122

    (32) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 126


state 123

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 127


state 124

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 128


state 125

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 129


state 126

    (32) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 32 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 127

    (33) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 33 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 128

    (34) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 34 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 129

    (35) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 35 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    DECREMENT
    DEF
    ELSE
    EQ
    EQUALS
    FOR
    INCREMENT
    ISEMPTY
    LIST
    MOD
    OBJECT
    PRINTLN
    RETURN
    REVERSE
    SEMICOLON
    THIS
    WHILE
    unit

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> expression
Rule 2     cuerpo -> sentencia
Rule 3     cuerpo -> declararVariable
Rule 4     cuerpo -> declararConstante
Rule 5     cuerpo -> funcionesTupla
Rule 6     declararConstante -> VAL ID COLON tipoValueCons
Rule 7     declararConstante -> VAL ID COLON tipo
Rule 8     declararConstante -> VAL ID EQUAL valueCons
Rule 9     declararConstante -> VAL ID EQUAL expression
Rule 10    declararVariable -> VAR ID COLON tipoValue
Rule 11    declararVariable -> VAR ID COLON tipo
Rule 12    declararVariable -> VAR ID EQUAL value
Rule 13    declararVariable -> VAR ID EQUAL expression
Rule 14    value -> string
Rule 15    value -> booleano
Rule 16    value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 17    value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 18    value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 19    value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 20    value -> ARRAY LPAREN elementosInternos RPAREN
Rule 21    elementosInternos -> elementosInternosInt
Rule 22    elementosInternos -> elementosInternosDouble
Rule 23    elementosInternos -> elementosInternosBool
Rule 24    elementosInternos -> elementosInternosString
Rule 25    elementosInternosInt -> int
Rule 26    elementosInternosInt -> int COMMA elementosInternosInt
Rule 27    elementosInternosDouble -> double
Rule 28    elementosInternosDouble -> double COMMA elementosInternosDouble
Rule 29    elementosInternosBool -> booleano
Rule 30    elementosInternosBool -> booleano COMMA elementosInternosBool
Rule 31    elementosInternosString -> string
Rule 32    elementosInternosString -> string COMMA elementosInternosString
Rule 33    elementosInternos2 -> int
Rule 34    elementosInternos2 -> double
Rule 35    elementosInternos2 -> booleano
Rule 36    elementosInternos2 -> string
Rule 37    elementosInternos2 -> int COMMA elementosInternos2
Rule 38    elementosInternos2 -> double COMMA elementosInternos2
Rule 39    elementosInternos2 -> booleano COMMA elementosInternos2
Rule 40    elementosInternos2 -> string COMMA elementosInternos2
Rule 41    valueCons -> string
Rule 42    valueCons -> booleano
Rule 43    valueCons -> tupla
Rule 44    tipo -> INT
Rule 45    tipo -> DOUBLE
Rule 46    tipo -> BOOL
Rule 47    tipo -> STRING_TYPE
Rule 48    tipoValue -> STRING_TYPE EQUAL string
Rule 49    tipoValue -> BOOL EQUAL booleano
Rule 50    tipoValue -> INT EQUAL int
Rule 51    tipoValue -> DOUBLE EQUAL double
Rule 52    tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 53    tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 54    tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 55    tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 56    tipoValueCons -> STRING_TYPE EQUAL string
Rule 57    tipoValueCons -> BOOL EQUAL booleano
Rule 58    tipoValueCons -> INT EQUAL int
Rule 59    tipoValueCons -> DOUBLE EQUAL double
Rule 60    tupla -> LPAREN elementosInternos2 RPAREN
Rule 61    funcionesTupla -> tuplaSwap
Rule 62    funcionesTupla -> tuplaToString
Rule 63    funcionesTupla -> tuplaProductIterator
Rule 64    tuplaSwap -> ID DOT SWAP
Rule 65    tuplaToString -> ID DOT TOSTRING
Rule 66    tuplaProductIterator -> ID DOT PRODUCTITERATOR
Rule 67    funcionesArray -> arrayHead
Rule 68    funcionesArray -> arrayTail
Rule 69    funcionesArray -> arrayLength
Rule 70    arrayHead -> ID DOT HEAD
Rule 71    arrayTail -> ID DOT TAIL
Rule 72    arrayLength -> ID DOT LENGTH
Rule 73    expression -> expression PLUS term
Rule 74    expression -> expression MINUS term
Rule 75    expression -> term
Rule 76    term -> term TIMES factor
Rule 77    term -> term DIVIDE factor
Rule 78    term -> factor
Rule 79    sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE
Rule 80    comparacion -> GT
Rule 81    comparacion -> GE
Rule 82    comparacion -> LT
Rule 83    comparacion -> LE
Rule 84    comparacion -> EQUAL2
Rule 85    factor -> INT_NUMBER
Rule 86    factor -> DOUBLE_NUMBER
Rule 87    booleano -> TRUE
Rule 88    booleano -> FALSE
Rule 89    string -> STRING
Rule 90    double -> DOUBLE_NUMBER
Rule 91    int -> INT_NUMBER

Terminals, with rules where they appear

ARRAY                : 16 17 18 19 20 52 52 53 53 54 54 55 55
BOOL                 : 18 46 49 54 54 57
CLASS                : 
COLON                : 6 7 10 11
COMMA                : 26 28 30 32 37 38 39 40
DECREMENT            : 
DEF                  : 
DIVIDE               : 77
DOT                  : 64 65 66 70 71 72
DOUBLE               : 17 45 51 53 53 59
DOUBLE_NUMBER        : 86 90
ELSE                 : 
EQ                   : 
EQUAL                : 8 9 12 13 48 49 50 51 52 53 54 55 56 57 58 59
EQUAL2               : 84
EQUALS               : 
FALSE                : 88
FOR                  : 
GE                   : 81
GT                   : 80
HEAD                 : 70
ID                   : 6 7 8 9 10 11 12 13 64 65 66 70 71 72
IF                   : 79
INCREMENT            : 
INT                  : 16 44 50 52 52 58
INT_NUMBER           : 85 91
ISEMPTY              : 
LBRACE               : 79
LBRACK               : 16 17 18 19 52 52 53 53 54 54 55 55
LE                   : 83
LENGTH               : 72
LIST                 : 
LPAREN               : 16 17 18 19 20 52 53 54 55 60
LT                   : 82
MINUS                : 74
MOD                  : 
NEW                  : 16 17 18 19 52 53 54 55
OBJECT               : 
PLUS                 : 73
PRINTLN              : 
PRODUCTITERATOR      : 66
RBRACE               : 79
RBRACK               : 16 17 18 19 52 52 53 53 54 54 55 55
RETURN               : 
REVERSE              : 
RPAREN               : 16 17 18 19 20 52 53 54 55 60
SEMICOLON            : 
STRING               : 89
STRING_TYPE          : 19 47 48 55 55 56
SWAP                 : 64
TAIL                 : 71
THIS                 : 
TIMES                : 76
TOSTRING             : 65
TRUE                 : 87
VAL                  : 6 7 8 9
VAR                  : 10 11 12 13
WHILE                : 
error                : 
unit                 : 

Nonterminals, with rules where they appear

arrayHead            : 67
arrayLength          : 69
arrayTail            : 68
booleano             : 15 29 30 35 39 42 49 57
comparacion          : 79
cuerpo               : 79 0
declararConstante    : 4
declararVariable     : 3
double               : 27 28 34 38 51 59
elementosInternos    : 20
elementosInternos2   : 37 38 39 40 60
elementosInternosBool : 23 30
elementosInternosDouble : 22 28
elementosInternosInt : 21 26
elementosInternosString : 24 32
expression           : 1 9 13 73 74
factor               : 76 77 78 79 79
funcionesArray       : 
funcionesTupla       : 5
int                  : 16 17 18 19 25 26 33 37 50 52 53 54 55 58
sentencia            : 2
string               : 14 31 32 36 40 41 48 56
term                 : 73 74 75 76 77
tipo                 : 7 11
tipoValue            : 10
tipoValueCons        : 6
tupla                : 43
tuplaProductIterator : 63
tuplaSwap            : 61
tuplaToString        : 62
value                : 12
valueCons            : 8

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (4) cuerpo -> . declararConstante
    (5) cuerpo -> . funcionesTupla
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (79) sentencia -> . IF factor comparacion factor LBRACE cuerpo RBRACE
    (10) declararVariable -> . VAR ID COLON tipoValue
    (11) declararVariable -> . VAR ID COLON tipo
    (12) declararVariable -> . VAR ID EQUAL value
    (13) declararVariable -> . VAR ID EQUAL expression
    (6) declararConstante -> . VAL ID COLON tipoValueCons
    (7) declararConstante -> . VAL ID COLON tipo
    (8) declararConstante -> . VAL ID EQUAL valueCons
    (9) declararConstante -> . VAL ID EQUAL expression
    (61) funcionesTupla -> . tuplaSwap
    (62) funcionesTupla -> . tuplaToString
    (63) funcionesTupla -> . tuplaProductIterator
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (64) tuplaSwap -> . ID DOT SWAP
    (65) tuplaToString -> . ID DOT TOSTRING
    (66) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    IF              shift and go to state 8
    VAR             shift and go to state 10
    VAL             shift and go to state 12
    ID              shift and go to state 11
    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    cuerpo                         shift and go to state 1
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    declararConstante              shift and go to state 5
    funcionesTupla                 shift and go to state 6
    term                           shift and go to state 7
    factor                         shift and go to state 9
    tuplaSwap                      shift and go to state 13
    tuplaToString                  shift and go to state 14
    tuplaProductIterator           shift and go to state 15

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> expression .
    (73) expression -> expression . PLUS term
    (74) expression -> expression . MINUS term

    $end            reduce using rule 1 (cuerpo -> expression .)
    RBRACE          reduce using rule 1 (cuerpo -> expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 3

    (2) cuerpo -> sentencia .

    $end            reduce using rule 2 (cuerpo -> sentencia .)
    RBRACE          reduce using rule 2 (cuerpo -> sentencia .)


state 4

    (3) cuerpo -> declararVariable .

    $end            reduce using rule 3 (cuerpo -> declararVariable .)
    RBRACE          reduce using rule 3 (cuerpo -> declararVariable .)


state 5

    (4) cuerpo -> declararConstante .

    $end            reduce using rule 4 (cuerpo -> declararConstante .)
    RBRACE          reduce using rule 4 (cuerpo -> declararConstante .)


state 6

    (5) cuerpo -> funcionesTupla .

    $end            reduce using rule 5 (cuerpo -> funcionesTupla .)
    RBRACE          reduce using rule 5 (cuerpo -> funcionesTupla .)


state 7

    (75) expression -> term .
    (76) term -> term . TIMES factor
    (77) term -> term . DIVIDE factor

    PLUS            reduce using rule 75 (expression -> term .)
    MINUS           reduce using rule 75 (expression -> term .)
    $end            reduce using rule 75 (expression -> term .)
    RBRACE          reduce using rule 75 (expression -> term .)
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21


state 8

    (79) sentencia -> IF . factor comparacion factor LBRACE cuerpo RBRACE
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    factor                         shift and go to state 22

state 9

    (78) term -> factor .

    TIMES           reduce using rule 78 (term -> factor .)
    DIVIDE          reduce using rule 78 (term -> factor .)
    PLUS            reduce using rule 78 (term -> factor .)
    MINUS           reduce using rule 78 (term -> factor .)
    $end            reduce using rule 78 (term -> factor .)
    RBRACE          reduce using rule 78 (term -> factor .)


state 10

    (10) declararVariable -> VAR . ID COLON tipoValue
    (11) declararVariable -> VAR . ID COLON tipo
    (12) declararVariable -> VAR . ID EQUAL value
    (13) declararVariable -> VAR . ID EQUAL expression

    ID              shift and go to state 23


state 11

    (64) tuplaSwap -> ID . DOT SWAP
    (65) tuplaToString -> ID . DOT TOSTRING
    (66) tuplaProductIterator -> ID . DOT PRODUCTITERATOR

    DOT             shift and go to state 24


state 12

    (6) declararConstante -> VAL . ID COLON tipoValueCons
    (7) declararConstante -> VAL . ID COLON tipo
    (8) declararConstante -> VAL . ID EQUAL valueCons
    (9) declararConstante -> VAL . ID EQUAL expression

    ID              shift and go to state 25


state 13

    (61) funcionesTupla -> tuplaSwap .

    $end            reduce using rule 61 (funcionesTupla -> tuplaSwap .)
    RBRACE          reduce using rule 61 (funcionesTupla -> tuplaSwap .)


state 14

    (62) funcionesTupla -> tuplaToString .

    $end            reduce using rule 62 (funcionesTupla -> tuplaToString .)
    RBRACE          reduce using rule 62 (funcionesTupla -> tuplaToString .)


state 15

    (63) funcionesTupla -> tuplaProductIterator .

    $end            reduce using rule 63 (funcionesTupla -> tuplaProductIterator .)
    RBRACE          reduce using rule 63 (funcionesTupla -> tuplaProductIterator .)


state 16

    (85) factor -> INT_NUMBER .

    TIMES           reduce using rule 85 (factor -> INT_NUMBER .)
    DIVIDE          reduce using rule 85 (factor -> INT_NUMBER .)
    PLUS            reduce using rule 85 (factor -> INT_NUMBER .)
    MINUS           reduce using rule 85 (factor -> INT_NUMBER .)
    $end            reduce using rule 85 (factor -> INT_NUMBER .)
    GT              reduce using rule 85 (factor -> INT_NUMBER .)
    GE              reduce using rule 85 (factor -> INT_NUMBER .)
    LT              reduce using rule 85 (factor -> INT_NUMBER .)
    LE              reduce using rule 85 (factor -> INT_NUMBER .)
    EQUAL2          reduce using rule 85 (factor -> INT_NUMBER .)
    RBRACE          reduce using rule 85 (factor -> INT_NUMBER .)
    LBRACE          reduce using rule 85 (factor -> INT_NUMBER .)


state 17

    (86) factor -> DOUBLE_NUMBER .

    TIMES           reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    DIVIDE          reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    PLUS            reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    MINUS           reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    $end            reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    GT              reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    GE              reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    LT              reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    LE              reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    EQUAL2          reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    RBRACE          reduce using rule 86 (factor -> DOUBLE_NUMBER .)
    LBRACE          reduce using rule 86 (factor -> DOUBLE_NUMBER .)


state 18

    (73) expression -> expression PLUS . term
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    term                           shift and go to state 26
    factor                         shift and go to state 9

state 19

    (74) expression -> expression MINUS . term
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    term                           shift and go to state 27
    factor                         shift and go to state 9

state 20

    (76) term -> term TIMES . factor
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    factor                         shift and go to state 28

state 21

    (77) term -> term DIVIDE . factor
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    factor                         shift and go to state 29

state 22

    (79) sentencia -> IF factor . comparacion factor LBRACE cuerpo RBRACE
    (80) comparacion -> . GT
    (81) comparacion -> . GE
    (82) comparacion -> . LT
    (83) comparacion -> . LE
    (84) comparacion -> . EQUAL2

    GT              shift and go to state 31
    GE              shift and go to state 32
    LT              shift and go to state 33
    LE              shift and go to state 34
    EQUAL2          shift and go to state 35

    comparacion                    shift and go to state 30

state 23

    (10) declararVariable -> VAR ID . COLON tipoValue
    (11) declararVariable -> VAR ID . COLON tipo
    (12) declararVariable -> VAR ID . EQUAL value
    (13) declararVariable -> VAR ID . EQUAL expression

    COLON           shift and go to state 36
    EQUAL           shift and go to state 37


state 24

    (64) tuplaSwap -> ID DOT . SWAP
    (65) tuplaToString -> ID DOT . TOSTRING
    (66) tuplaProductIterator -> ID DOT . PRODUCTITERATOR

    SWAP            shift and go to state 38
    TOSTRING        shift and go to state 39
    PRODUCTITERATOR shift and go to state 40


state 25

    (6) declararConstante -> VAL ID . COLON tipoValueCons
    (7) declararConstante -> VAL ID . COLON tipo
    (8) declararConstante -> VAL ID . EQUAL valueCons
    (9) declararConstante -> VAL ID . EQUAL expression

    COLON           shift and go to state 41
    EQUAL           shift and go to state 42


state 26

    (73) expression -> expression PLUS term .
    (76) term -> term . TIMES factor
    (77) term -> term . DIVIDE factor

    PLUS            reduce using rule 73 (expression -> expression PLUS term .)
    MINUS           reduce using rule 73 (expression -> expression PLUS term .)
    $end            reduce using rule 73 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 73 (expression -> expression PLUS term .)
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21


state 27

    (74) expression -> expression MINUS term .
    (76) term -> term . TIMES factor
    (77) term -> term . DIVIDE factor

    PLUS            reduce using rule 74 (expression -> expression MINUS term .)
    MINUS           reduce using rule 74 (expression -> expression MINUS term .)
    $end            reduce using rule 74 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 74 (expression -> expression MINUS term .)
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21


state 28

    (76) term -> term TIMES factor .

    TIMES           reduce using rule 76 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 76 (term -> term TIMES factor .)
    PLUS            reduce using rule 76 (term -> term TIMES factor .)
    MINUS           reduce using rule 76 (term -> term TIMES factor .)
    $end            reduce using rule 76 (term -> term TIMES factor .)
    RBRACE          reduce using rule 76 (term -> term TIMES factor .)


state 29

    (77) term -> term DIVIDE factor .

    TIMES           reduce using rule 77 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 77 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 77 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 77 (term -> term DIVIDE factor .)
    $end            reduce using rule 77 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 77 (term -> term DIVIDE factor .)


state 30

    (79) sentencia -> IF factor comparacion . factor LBRACE cuerpo RBRACE
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    factor                         shift and go to state 43

state 31

    (80) comparacion -> GT .

    INT_NUMBER      reduce using rule 80 (comparacion -> GT .)
    DOUBLE_NUMBER   reduce using rule 80 (comparacion -> GT .)


state 32

    (81) comparacion -> GE .

    INT_NUMBER      reduce using rule 81 (comparacion -> GE .)
    DOUBLE_NUMBER   reduce using rule 81 (comparacion -> GE .)


state 33

    (82) comparacion -> LT .

    INT_NUMBER      reduce using rule 82 (comparacion -> LT .)
    DOUBLE_NUMBER   reduce using rule 82 (comparacion -> LT .)


state 34

    (83) comparacion -> LE .

    INT_NUMBER      reduce using rule 83 (comparacion -> LE .)
    DOUBLE_NUMBER   reduce using rule 83 (comparacion -> LE .)


state 35

    (84) comparacion -> EQUAL2 .

    INT_NUMBER      reduce using rule 84 (comparacion -> EQUAL2 .)
    DOUBLE_NUMBER   reduce using rule 84 (comparacion -> EQUAL2 .)


state 36

    (10) declararVariable -> VAR ID COLON . tipoValue
    (11) declararVariable -> VAR ID COLON . tipo
    (48) tipoValue -> . STRING_TYPE EQUAL string
    (49) tipoValue -> . BOOL EQUAL booleano
    (50) tipoValue -> . INT EQUAL int
    (51) tipoValue -> . DOUBLE EQUAL double
    (52) tipoValue -> . ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (53) tipoValue -> . ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (54) tipoValue -> . ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (55) tipoValue -> . ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (44) tipo -> . INT
    (45) tipo -> . DOUBLE
    (46) tipo -> . BOOL
    (47) tipo -> . STRING_TYPE

    STRING_TYPE     shift and go to state 46
    BOOL            shift and go to state 47
    INT             shift and go to state 48
    DOUBLE          shift and go to state 49
    ARRAY           shift and go to state 50

    tipoValue                      shift and go to state 44
    tipo                           shift and go to state 45

state 37

    (12) declararVariable -> VAR ID EQUAL . value
    (13) declararVariable -> VAR ID EQUAL . expression
    (14) value -> . string
    (15) value -> . booleano
    (16) value -> . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (17) value -> . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (18) value -> . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (19) value -> . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (20) value -> . ARRAY LPAREN elementosInternos RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (89) string -> . STRING
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    NEW             shift and go to state 55
    ARRAY           shift and go to state 56
    STRING          shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    value                          shift and go to state 51
    expression                     shift and go to state 52
    string                         shift and go to state 53
    booleano                       shift and go to state 54
    term                           shift and go to state 7
    factor                         shift and go to state 9

state 38

    (64) tuplaSwap -> ID DOT SWAP .

    $end            reduce using rule 64 (tuplaSwap -> ID DOT SWAP .)
    RBRACE          reduce using rule 64 (tuplaSwap -> ID DOT SWAP .)


state 39

    (65) tuplaToString -> ID DOT TOSTRING .

    $end            reduce using rule 65 (tuplaToString -> ID DOT TOSTRING .)
    RBRACE          reduce using rule 65 (tuplaToString -> ID DOT TOSTRING .)


state 40

    (66) tuplaProductIterator -> ID DOT PRODUCTITERATOR .

    $end            reduce using rule 66 (tuplaProductIterator -> ID DOT PRODUCTITERATOR .)
    RBRACE          reduce using rule 66 (tuplaProductIterator -> ID DOT PRODUCTITERATOR .)


state 41

    (6) declararConstante -> VAL ID COLON . tipoValueCons
    (7) declararConstante -> VAL ID COLON . tipo
    (56) tipoValueCons -> . STRING_TYPE EQUAL string
    (57) tipoValueCons -> . BOOL EQUAL booleano
    (58) tipoValueCons -> . INT EQUAL int
    (59) tipoValueCons -> . DOUBLE EQUAL double
    (44) tipo -> . INT
    (45) tipo -> . DOUBLE
    (46) tipo -> . BOOL
    (47) tipo -> . STRING_TYPE

    STRING_TYPE     shift and go to state 62
    BOOL            shift and go to state 63
    INT             shift and go to state 64
    DOUBLE          shift and go to state 65

    tipoValueCons                  shift and go to state 60
    tipo                           shift and go to state 61

state 42

    (8) declararConstante -> VAL ID EQUAL . valueCons
    (9) declararConstante -> VAL ID EQUAL . expression
    (41) valueCons -> . string
    (42) valueCons -> . booleano
    (43) valueCons -> . tupla
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (89) string -> . STRING
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE
    (60) tupla -> . LPAREN elementosInternos2 RPAREN
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    STRING          shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    LPAREN          shift and go to state 71
    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    valueCons                      shift and go to state 66
    expression                     shift and go to state 67
    string                         shift and go to state 68
    booleano                       shift and go to state 69
    tupla                          shift and go to state 70
    term                           shift and go to state 7
    factor                         shift and go to state 9

state 43

    (79) sentencia -> IF factor comparacion factor . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 72


state 44

    (10) declararVariable -> VAR ID COLON tipoValue .

    $end            reduce using rule 10 (declararVariable -> VAR ID COLON tipoValue .)
    RBRACE          reduce using rule 10 (declararVariable -> VAR ID COLON tipoValue .)


state 45

    (11) declararVariable -> VAR ID COLON tipo .

    $end            reduce using rule 11 (declararVariable -> VAR ID COLON tipo .)
    RBRACE          reduce using rule 11 (declararVariable -> VAR ID COLON tipo .)


state 46

    (48) tipoValue -> STRING_TYPE . EQUAL string
    (47) tipo -> STRING_TYPE .

    EQUAL           shift and go to state 73
    $end            reduce using rule 47 (tipo -> STRING_TYPE .)
    RBRACE          reduce using rule 47 (tipo -> STRING_TYPE .)


state 47

    (49) tipoValue -> BOOL . EQUAL booleano
    (46) tipo -> BOOL .

    EQUAL           shift and go to state 74
    $end            reduce using rule 46 (tipo -> BOOL .)
    RBRACE          reduce using rule 46 (tipo -> BOOL .)


state 48

    (50) tipoValue -> INT . EQUAL int
    (44) tipo -> INT .

    EQUAL           shift and go to state 75
    $end            reduce using rule 44 (tipo -> INT .)
    RBRACE          reduce using rule 44 (tipo -> INT .)


state 49

    (51) tipoValue -> DOUBLE . EQUAL double
    (45) tipo -> DOUBLE .

    EQUAL           shift and go to state 76
    $end            reduce using rule 45 (tipo -> DOUBLE .)
    RBRACE          reduce using rule 45 (tipo -> DOUBLE .)


state 50

    (52) tipoValue -> ARRAY . LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (53) tipoValue -> ARRAY . LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (54) tipoValue -> ARRAY . LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (55) tipoValue -> ARRAY . LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 77


state 51

    (12) declararVariable -> VAR ID EQUAL value .

    $end            reduce using rule 12 (declararVariable -> VAR ID EQUAL value .)
    RBRACE          reduce using rule 12 (declararVariable -> VAR ID EQUAL value .)


state 52

    (13) declararVariable -> VAR ID EQUAL expression .
    (73) expression -> expression . PLUS term
    (74) expression -> expression . MINUS term

    $end            reduce using rule 13 (declararVariable -> VAR ID EQUAL expression .)
    RBRACE          reduce using rule 13 (declararVariable -> VAR ID EQUAL expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 53

    (14) value -> string .

    $end            reduce using rule 14 (value -> string .)
    RBRACE          reduce using rule 14 (value -> string .)


state 54

    (15) value -> booleano .

    $end            reduce using rule 15 (value -> booleano .)
    RBRACE          reduce using rule 15 (value -> booleano .)


state 55

    (16) value -> NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (17) value -> NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (18) value -> NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (19) value -> NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 78


state 56

    (20) value -> ARRAY . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 79


state 57

    (89) string -> STRING .

    $end            reduce using rule 89 (string -> STRING .)
    RBRACE          reduce using rule 89 (string -> STRING .)
    COMMA           reduce using rule 89 (string -> STRING .)
    RPAREN          reduce using rule 89 (string -> STRING .)


state 58

    (87) booleano -> TRUE .

    $end            reduce using rule 87 (booleano -> TRUE .)
    RBRACE          reduce using rule 87 (booleano -> TRUE .)
    COMMA           reduce using rule 87 (booleano -> TRUE .)
    RPAREN          reduce using rule 87 (booleano -> TRUE .)


state 59

    (88) booleano -> FALSE .

    $end            reduce using rule 88 (booleano -> FALSE .)
    RBRACE          reduce using rule 88 (booleano -> FALSE .)
    COMMA           reduce using rule 88 (booleano -> FALSE .)
    RPAREN          reduce using rule 88 (booleano -> FALSE .)


state 60

    (6) declararConstante -> VAL ID COLON tipoValueCons .

    $end            reduce using rule 6 (declararConstante -> VAL ID COLON tipoValueCons .)
    RBRACE          reduce using rule 6 (declararConstante -> VAL ID COLON tipoValueCons .)


state 61

    (7) declararConstante -> VAL ID COLON tipo .

    $end            reduce using rule 7 (declararConstante -> VAL ID COLON tipo .)
    RBRACE          reduce using rule 7 (declararConstante -> VAL ID COLON tipo .)


state 62

    (56) tipoValueCons -> STRING_TYPE . EQUAL string
    (47) tipo -> STRING_TYPE .

    EQUAL           shift and go to state 80
    $end            reduce using rule 47 (tipo -> STRING_TYPE .)
    RBRACE          reduce using rule 47 (tipo -> STRING_TYPE .)


state 63

    (57) tipoValueCons -> BOOL . EQUAL booleano
    (46) tipo -> BOOL .

    EQUAL           shift and go to state 81
    $end            reduce using rule 46 (tipo -> BOOL .)
    RBRACE          reduce using rule 46 (tipo -> BOOL .)


state 64

    (58) tipoValueCons -> INT . EQUAL int
    (44) tipo -> INT .

    EQUAL           shift and go to state 82
    $end            reduce using rule 44 (tipo -> INT .)
    RBRACE          reduce using rule 44 (tipo -> INT .)


state 65

    (59) tipoValueCons -> DOUBLE . EQUAL double
    (45) tipo -> DOUBLE .

    EQUAL           shift and go to state 83
    $end            reduce using rule 45 (tipo -> DOUBLE .)
    RBRACE          reduce using rule 45 (tipo -> DOUBLE .)


state 66

    (8) declararConstante -> VAL ID EQUAL valueCons .

    $end            reduce using rule 8 (declararConstante -> VAL ID EQUAL valueCons .)
    RBRACE          reduce using rule 8 (declararConstante -> VAL ID EQUAL valueCons .)


state 67

    (9) declararConstante -> VAL ID EQUAL expression .
    (73) expression -> expression . PLUS term
    (74) expression -> expression . MINUS term

    $end            reduce using rule 9 (declararConstante -> VAL ID EQUAL expression .)
    RBRACE          reduce using rule 9 (declararConstante -> VAL ID EQUAL expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19


state 68

    (41) valueCons -> string .

    $end            reduce using rule 41 (valueCons -> string .)
    RBRACE          reduce using rule 41 (valueCons -> string .)


state 69

    (42) valueCons -> booleano .

    $end            reduce using rule 42 (valueCons -> booleano .)
    RBRACE          reduce using rule 42 (valueCons -> booleano .)


state 70

    (43) valueCons -> tupla .

    $end            reduce using rule 43 (valueCons -> tupla .)
    RBRACE          reduce using rule 43 (valueCons -> tupla .)


state 71

    (60) tupla -> LPAREN . elementosInternos2 RPAREN
    (33) elementosInternos2 -> . int
    (34) elementosInternos2 -> . double
    (35) elementosInternos2 -> . booleano
    (36) elementosInternos2 -> . string
    (37) elementosInternos2 -> . int COMMA elementosInternos2
    (38) elementosInternos2 -> . double COMMA elementosInternos2
    (39) elementosInternos2 -> . booleano COMMA elementosInternos2
    (40) elementosInternos2 -> . string COMMA elementosInternos2
    (91) int -> . INT_NUMBER
    (90) double -> . DOUBLE_NUMBER
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE
    (89) string -> . STRING

    INT_NUMBER      shift and go to state 89
    DOUBLE_NUMBER   shift and go to state 90
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    STRING          shift and go to state 57

    elementosInternos2             shift and go to state 84
    int                            shift and go to state 85
    double                         shift and go to state 86
    booleano                       shift and go to state 87
    string                         shift and go to state 88

state 72

    (79) sentencia -> IF factor comparacion factor LBRACE . cuerpo RBRACE
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (4) cuerpo -> . declararConstante
    (5) cuerpo -> . funcionesTupla
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (79) sentencia -> . IF factor comparacion factor LBRACE cuerpo RBRACE
    (10) declararVariable -> . VAR ID COLON tipoValue
    (11) declararVariable -> . VAR ID COLON tipo
    (12) declararVariable -> . VAR ID EQUAL value
    (13) declararVariable -> . VAR ID EQUAL expression
    (6) declararConstante -> . VAL ID COLON tipoValueCons
    (7) declararConstante -> . VAL ID COLON tipo
    (8) declararConstante -> . VAL ID EQUAL valueCons
    (9) declararConstante -> . VAL ID EQUAL expression
    (61) funcionesTupla -> . tuplaSwap
    (62) funcionesTupla -> . tuplaToString
    (63) funcionesTupla -> . tuplaProductIterator
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (64) tuplaSwap -> . ID DOT SWAP
    (65) tuplaToString -> . ID DOT TOSTRING
    (66) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (85) factor -> . INT_NUMBER
    (86) factor -> . DOUBLE_NUMBER

    IF              shift and go to state 8
    VAR             shift and go to state 10
    VAL             shift and go to state 12
    ID              shift and go to state 11
    INT_NUMBER      shift and go to state 16
    DOUBLE_NUMBER   shift and go to state 17

    factor                         shift and go to state 9
    cuerpo                         shift and go to state 91
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    declararConstante              shift and go to state 5
    funcionesTupla                 shift and go to state 6
    term                           shift and go to state 7
    tuplaSwap                      shift and go to state 13
    tuplaToString                  shift and go to state 14
    tuplaProductIterator           shift and go to state 15

state 73

    (48) tipoValue -> STRING_TYPE EQUAL . string
    (89) string -> . STRING

    STRING          shift and go to state 57

    string                         shift and go to state 92

state 74

    (49) tipoValue -> BOOL EQUAL . booleano
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE

    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    booleano                       shift and go to state 93

state 75

    (50) tipoValue -> INT EQUAL . int
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 94

state 76

    (51) tipoValue -> DOUBLE EQUAL . double
    (90) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 90

    double                         shift and go to state 95

state 77

    (52) tipoValue -> ARRAY LBRACK . INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (53) tipoValue -> ARRAY LBRACK . DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (54) tipoValue -> ARRAY LBRACK . BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (55) tipoValue -> ARRAY LBRACK . STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    BOOL            shift and go to state 98
    STRING_TYPE     shift and go to state 99


state 78

    (16) value -> NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN
    (17) value -> NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (18) value -> NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN
    (19) value -> NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 100


state 79

    (20) value -> ARRAY LPAREN . elementosInternos RPAREN
    (21) elementosInternos -> . elementosInternosInt
    (22) elementosInternos -> . elementosInternosDouble
    (23) elementosInternos -> . elementosInternosBool
    (24) elementosInternos -> . elementosInternosString
    (25) elementosInternosInt -> . int
    (26) elementosInternosInt -> . int COMMA elementosInternosInt
    (27) elementosInternosDouble -> . double
    (28) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (29) elementosInternosBool -> . booleano
    (30) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (31) elementosInternosString -> . string
    (32) elementosInternosString -> . string COMMA elementosInternosString
    (91) int -> . INT_NUMBER
    (90) double -> . DOUBLE_NUMBER
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE
    (89) string -> . STRING

    INT_NUMBER      shift and go to state 89
    DOUBLE_NUMBER   shift and go to state 90
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    STRING          shift and go to state 57

    elementosInternos              shift and go to state 101
    elementosInternosInt           shift and go to state 102
    elementosInternosDouble        shift and go to state 103
    elementosInternosBool          shift and go to state 104
    elementosInternosString        shift and go to state 105
    int                            shift and go to state 106
    double                         shift and go to state 107
    booleano                       shift and go to state 108
    string                         shift and go to state 109

state 80

    (56) tipoValueCons -> STRING_TYPE EQUAL . string
    (89) string -> . STRING

    STRING          shift and go to state 57

    string                         shift and go to state 110

state 81

    (57) tipoValueCons -> BOOL EQUAL . booleano
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE

    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    booleano                       shift and go to state 111

state 82

    (58) tipoValueCons -> INT EQUAL . int
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 112

state 83

    (59) tipoValueCons -> DOUBLE EQUAL . double
    (90) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 90

    double                         shift and go to state 113

state 84

    (60) tupla -> LPAREN elementosInternos2 . RPAREN

    RPAREN          shift and go to state 114


state 85

    (33) elementosInternos2 -> int .
    (37) elementosInternos2 -> int . COMMA elementosInternos2

    RPAREN          reduce using rule 33 (elementosInternos2 -> int .)
    COMMA           shift and go to state 115


state 86

    (34) elementosInternos2 -> double .
    (38) elementosInternos2 -> double . COMMA elementosInternos2

    RPAREN          reduce using rule 34 (elementosInternos2 -> double .)
    COMMA           shift and go to state 116


state 87

    (35) elementosInternos2 -> booleano .
    (39) elementosInternos2 -> booleano . COMMA elementosInternos2

    RPAREN          reduce using rule 35 (elementosInternos2 -> booleano .)
    COMMA           shift and go to state 117


state 88

    (36) elementosInternos2 -> string .
    (40) elementosInternos2 -> string . COMMA elementosInternos2

    RPAREN          reduce using rule 36 (elementosInternos2 -> string .)
    COMMA           shift and go to state 118


state 89

    (91) int -> INT_NUMBER .

    COMMA           reduce using rule 91 (int -> INT_NUMBER .)
    RPAREN          reduce using rule 91 (int -> INT_NUMBER .)
    $end            reduce using rule 91 (int -> INT_NUMBER .)
    RBRACE          reduce using rule 91 (int -> INT_NUMBER .)


state 90

    (90) double -> DOUBLE_NUMBER .

    COMMA           reduce using rule 90 (double -> DOUBLE_NUMBER .)
    RPAREN          reduce using rule 90 (double -> DOUBLE_NUMBER .)
    $end            reduce using rule 90 (double -> DOUBLE_NUMBER .)
    RBRACE          reduce using rule 90 (double -> DOUBLE_NUMBER .)


state 91

    (79) sentencia -> IF factor comparacion factor LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 119


state 92

    (48) tipoValue -> STRING_TYPE EQUAL string .

    $end            reduce using rule 48 (tipoValue -> STRING_TYPE EQUAL string .)
    RBRACE          reduce using rule 48 (tipoValue -> STRING_TYPE EQUAL string .)


state 93

    (49) tipoValue -> BOOL EQUAL booleano .

    $end            reduce using rule 49 (tipoValue -> BOOL EQUAL booleano .)
    RBRACE          reduce using rule 49 (tipoValue -> BOOL EQUAL booleano .)


state 94

    (50) tipoValue -> INT EQUAL int .

    $end            reduce using rule 50 (tipoValue -> INT EQUAL int .)
    RBRACE          reduce using rule 50 (tipoValue -> INT EQUAL int .)


state 95

    (51) tipoValue -> DOUBLE EQUAL double .

    $end            reduce using rule 51 (tipoValue -> DOUBLE EQUAL double .)
    RBRACE          reduce using rule 51 (tipoValue -> DOUBLE EQUAL double .)


state 96

    (52) tipoValue -> ARRAY LBRACK INT . RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 120


state 97

    (53) tipoValue -> ARRAY LBRACK DOUBLE . RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 121


state 98

    (54) tipoValue -> ARRAY LBRACK BOOL . RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 122


state 99

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE . RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 123


state 100

    (16) value -> NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN
    (17) value -> NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN
    (18) value -> NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN
    (19) value -> NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN

    INT             shift and go to state 124
    DOUBLE          shift and go to state 125
    BOOL            shift and go to state 126
    STRING_TYPE     shift and go to state 127


state 101

    (20) value -> ARRAY LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 128


state 102

    (21) elementosInternos -> elementosInternosInt .

    RPAREN          reduce using rule 21 (elementosInternos -> elementosInternosInt .)


state 103

    (22) elementosInternos -> elementosInternosDouble .

    RPAREN          reduce using rule 22 (elementosInternos -> elementosInternosDouble .)


state 104

    (23) elementosInternos -> elementosInternosBool .

    RPAREN          reduce using rule 23 (elementosInternos -> elementosInternosBool .)


state 105

    (24) elementosInternos -> elementosInternosString .

    RPAREN          reduce using rule 24 (elementosInternos -> elementosInternosString .)


state 106

    (25) elementosInternosInt -> int .
    (26) elementosInternosInt -> int . COMMA elementosInternosInt

    RPAREN          reduce using rule 25 (elementosInternosInt -> int .)
    COMMA           shift and go to state 129


state 107

    (27) elementosInternosDouble -> double .
    (28) elementosInternosDouble -> double . COMMA elementosInternosDouble

    RPAREN          reduce using rule 27 (elementosInternosDouble -> double .)
    COMMA           shift and go to state 130


state 108

    (29) elementosInternosBool -> booleano .
    (30) elementosInternosBool -> booleano . COMMA elementosInternosBool

    RPAREN          reduce using rule 29 (elementosInternosBool -> booleano .)
    COMMA           shift and go to state 131


state 109

    (31) elementosInternosString -> string .
    (32) elementosInternosString -> string . COMMA elementosInternosString

    RPAREN          reduce using rule 31 (elementosInternosString -> string .)
    COMMA           shift and go to state 132


state 110

    (56) tipoValueCons -> STRING_TYPE EQUAL string .

    $end            reduce using rule 56 (tipoValueCons -> STRING_TYPE EQUAL string .)
    RBRACE          reduce using rule 56 (tipoValueCons -> STRING_TYPE EQUAL string .)


state 111

    (57) tipoValueCons -> BOOL EQUAL booleano .

    $end            reduce using rule 57 (tipoValueCons -> BOOL EQUAL booleano .)
    RBRACE          reduce using rule 57 (tipoValueCons -> BOOL EQUAL booleano .)


state 112

    (58) tipoValueCons -> INT EQUAL int .

    $end            reduce using rule 58 (tipoValueCons -> INT EQUAL int .)
    RBRACE          reduce using rule 58 (tipoValueCons -> INT EQUAL int .)


state 113

    (59) tipoValueCons -> DOUBLE EQUAL double .

    $end            reduce using rule 59 (tipoValueCons -> DOUBLE EQUAL double .)
    RBRACE          reduce using rule 59 (tipoValueCons -> DOUBLE EQUAL double .)


state 114

    (60) tupla -> LPAREN elementosInternos2 RPAREN .

    $end            reduce using rule 60 (tupla -> LPAREN elementosInternos2 RPAREN .)
    RBRACE          reduce using rule 60 (tupla -> LPAREN elementosInternos2 RPAREN .)


state 115

    (37) elementosInternos2 -> int COMMA . elementosInternos2
    (33) elementosInternos2 -> . int
    (34) elementosInternos2 -> . double
    (35) elementosInternos2 -> . booleano
    (36) elementosInternos2 -> . string
    (37) elementosInternos2 -> . int COMMA elementosInternos2
    (38) elementosInternos2 -> . double COMMA elementosInternos2
    (39) elementosInternos2 -> . booleano COMMA elementosInternos2
    (40) elementosInternos2 -> . string COMMA elementosInternos2
    (91) int -> . INT_NUMBER
    (90) double -> . DOUBLE_NUMBER
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE
    (89) string -> . STRING

    INT_NUMBER      shift and go to state 89
    DOUBLE_NUMBER   shift and go to state 90
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    STRING          shift and go to state 57

    int                            shift and go to state 85
    elementosInternos2             shift and go to state 133
    double                         shift and go to state 86
    booleano                       shift and go to state 87
    string                         shift and go to state 88

state 116

    (38) elementosInternos2 -> double COMMA . elementosInternos2
    (33) elementosInternos2 -> . int
    (34) elementosInternos2 -> . double
    (35) elementosInternos2 -> . booleano
    (36) elementosInternos2 -> . string
    (37) elementosInternos2 -> . int COMMA elementosInternos2
    (38) elementosInternos2 -> . double COMMA elementosInternos2
    (39) elementosInternos2 -> . booleano COMMA elementosInternos2
    (40) elementosInternos2 -> . string COMMA elementosInternos2
    (91) int -> . INT_NUMBER
    (90) double -> . DOUBLE_NUMBER
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE
    (89) string -> . STRING

    INT_NUMBER      shift and go to state 89
    DOUBLE_NUMBER   shift and go to state 90
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    STRING          shift and go to state 57

    double                         shift and go to state 86
    elementosInternos2             shift and go to state 134
    int                            shift and go to state 85
    booleano                       shift and go to state 87
    string                         shift and go to state 88

state 117

    (39) elementosInternos2 -> booleano COMMA . elementosInternos2
    (33) elementosInternos2 -> . int
    (34) elementosInternos2 -> . double
    (35) elementosInternos2 -> . booleano
    (36) elementosInternos2 -> . string
    (37) elementosInternos2 -> . int COMMA elementosInternos2
    (38) elementosInternos2 -> . double COMMA elementosInternos2
    (39) elementosInternos2 -> . booleano COMMA elementosInternos2
    (40) elementosInternos2 -> . string COMMA elementosInternos2
    (91) int -> . INT_NUMBER
    (90) double -> . DOUBLE_NUMBER
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE
    (89) string -> . STRING

    INT_NUMBER      shift and go to state 89
    DOUBLE_NUMBER   shift and go to state 90
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    STRING          shift and go to state 57

    booleano                       shift and go to state 87
    elementosInternos2             shift and go to state 135
    int                            shift and go to state 85
    double                         shift and go to state 86
    string                         shift and go to state 88

state 118

    (40) elementosInternos2 -> string COMMA . elementosInternos2
    (33) elementosInternos2 -> . int
    (34) elementosInternos2 -> . double
    (35) elementosInternos2 -> . booleano
    (36) elementosInternos2 -> . string
    (37) elementosInternos2 -> . int COMMA elementosInternos2
    (38) elementosInternos2 -> . double COMMA elementosInternos2
    (39) elementosInternos2 -> . booleano COMMA elementosInternos2
    (40) elementosInternos2 -> . string COMMA elementosInternos2
    (91) int -> . INT_NUMBER
    (90) double -> . DOUBLE_NUMBER
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE
    (89) string -> . STRING

    INT_NUMBER      shift and go to state 89
    DOUBLE_NUMBER   shift and go to state 90
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    STRING          shift and go to state 57

    string                         shift and go to state 88
    elementosInternos2             shift and go to state 136
    int                            shift and go to state 85
    double                         shift and go to state 86
    booleano                       shift and go to state 87

state 119

    (79) sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE .

    $end            reduce using rule 79 (sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 79 (sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE .)


state 120

    (52) tipoValue -> ARRAY LBRACK INT RBRACK . EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 137


state 121

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK . EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 138


state 122

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK . EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 139


state 123

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK . EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 140


state 124

    (16) value -> NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 141


state 125

    (17) value -> NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 142


state 126

    (18) value -> NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 143


state 127

    (19) value -> NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 144


state 128

    (20) value -> ARRAY LPAREN elementosInternos RPAREN .

    $end            reduce using rule 20 (value -> ARRAY LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 20 (value -> ARRAY LPAREN elementosInternos RPAREN .)


state 129

    (26) elementosInternosInt -> int COMMA . elementosInternosInt
    (25) elementosInternosInt -> . int
    (26) elementosInternosInt -> . int COMMA elementosInternosInt
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 106
    elementosInternosInt           shift and go to state 145

state 130

    (28) elementosInternosDouble -> double COMMA . elementosInternosDouble
    (27) elementosInternosDouble -> . double
    (28) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (90) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 90

    double                         shift and go to state 107
    elementosInternosDouble        shift and go to state 146

state 131

    (30) elementosInternosBool -> booleano COMMA . elementosInternosBool
    (29) elementosInternosBool -> . booleano
    (30) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (87) booleano -> . TRUE
    (88) booleano -> . FALSE

    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    booleano                       shift and go to state 108
    elementosInternosBool          shift and go to state 147

state 132

    (32) elementosInternosString -> string COMMA . elementosInternosString
    (31) elementosInternosString -> . string
    (32) elementosInternosString -> . string COMMA elementosInternosString
    (89) string -> . STRING

    STRING          shift and go to state 57

    string                         shift and go to state 109
    elementosInternosString        shift and go to state 148

state 133

    (37) elementosInternos2 -> int COMMA elementosInternos2 .

    RPAREN          reduce using rule 37 (elementosInternos2 -> int COMMA elementosInternos2 .)


state 134

    (38) elementosInternos2 -> double COMMA elementosInternos2 .

    RPAREN          reduce using rule 38 (elementosInternos2 -> double COMMA elementosInternos2 .)


state 135

    (39) elementosInternos2 -> booleano COMMA elementosInternos2 .

    RPAREN          reduce using rule 39 (elementosInternos2 -> booleano COMMA elementosInternos2 .)


state 136

    (40) elementosInternos2 -> string COMMA elementosInternos2 .

    RPAREN          reduce using rule 40 (elementosInternos2 -> string COMMA elementosInternos2 .)


state 137

    (52) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    NEW             shift and go to state 149


state 138

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 150


state 139

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    NEW             shift and go to state 151


state 140

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 152


state 141

    (16) value -> NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 153


state 142

    (17) value -> NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 154


state 143

    (18) value -> NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 155


state 144

    (19) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 156


state 145

    (26) elementosInternosInt -> int COMMA elementosInternosInt .

    RPAREN          reduce using rule 26 (elementosInternosInt -> int COMMA elementosInternosInt .)


state 146

    (28) elementosInternosDouble -> double COMMA elementosInternosDouble .

    RPAREN          reduce using rule 28 (elementosInternosDouble -> double COMMA elementosInternosDouble .)


state 147

    (30) elementosInternosBool -> booleano COMMA elementosInternosBool .

    RPAREN          reduce using rule 30 (elementosInternosBool -> booleano COMMA elementosInternosBool .)


state 148

    (32) elementosInternosString -> string COMMA elementosInternosString .

    RPAREN          reduce using rule 32 (elementosInternosString -> string COMMA elementosInternosString .)


state 149

    (52) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 157


state 150

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 158


state 151

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 159


state 152

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 160


state 153

    (16) value -> NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 161

state 154

    (17) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 162

state 155

    (18) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 163

state 156

    (19) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 164

state 157

    (52) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 165


state 158

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 166


state 159

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 167


state 160

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 168


state 161

    (16) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 169


state 162

    (17) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 170


state 163

    (18) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 171


state 164

    (19) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 172


state 165

    (52) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN

    INT             shift and go to state 173


state 166

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN

    DOUBLE          shift and go to state 174


state 167

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN

    BOOL            shift and go to state 175


state 168

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN

    STRING_TYPE     shift and go to state 176


state 169

    (16) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 16 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 16 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 170

    (17) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 17 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 17 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 171

    (18) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 18 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 18 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 172

    (19) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 19 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 19 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)


state 173

    (52) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 177


state 174

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 178


state 175

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 179


state 176

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 180


state 177

    (52) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 181


state 178

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 182


state 179

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 183


state 180

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 184


state 181

    (52) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 185

state 182

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 186

state 183

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 187

state 184

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (91) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 89

    int                            shift and go to state 188

state 185

    (52) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 189


state 186

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 190


state 187

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 191


state 188

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 192


state 189

    (52) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 52 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 52 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 190

    (53) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 53 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 53 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 191

    (54) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 54 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 54 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 192

    (55) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 55 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 55 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    DECREMENT
    DEF
    ELSE
    EQ
    EQUALS
    FOR
    HEAD
    INCREMENT
    ISEMPTY
    LENGTH
    MOD
    OBJECT
    PRINTLN
    RETURN
    REVERSE
    SEMICOLON
    TAIL
    THIS
    VAL
    WHILE
    unit

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> expression
Rule 2     cuerpo -> sentencia
Rule 3     cuerpo -> declararVariable
Rule 4     cuerpo -> funcionesTupla
Rule 5     declararVariable -> VAR ID COLON tipoValue
Rule 6     declararVariable -> VAR ID COLON tipo
Rule 7     declararVariable -> VAR ID EQUAL value
Rule 8     declararVariable -> VAR ID EQUAL expression
Rule 9     declararVariable -> VAR ID COLON LIST LPAREN tipo RPAREN
Rule 10    value -> string
Rule 11    value -> booleano
Rule 12    value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 13    value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 14    value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 15    value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 16    value -> ARRAY LPAREN elementosInternos RPAREN
Rule 17    expressionlist -> LIST LPAREN elementosInternos RPAREN
Rule 18    expressionlist -> LIST LPAREN elementosInternos
Rule 19    elementosInternos -> elementosInternosInt
Rule 20    elementosInternos -> elementosInternosDouble
Rule 21    elementosInternos -> elementosInternosBool
Rule 22    elementosInternos -> elementosInternosString
Rule 23    elementosInternosInt -> int
Rule 24    elementosInternosInt -> int COMMA elementosInternosInt
Rule 25    elementosInternosDouble -> double
Rule 26    elementosInternosDouble -> double COMMA elementosInternosDouble
Rule 27    elementosInternosBool -> booleano
Rule 28    elementosInternosBool -> booleano COMMA elementosInternosBool
Rule 29    elementosInternosString -> string
Rule 30    elementosInternosString -> string COMMA elementosInternosString
Rule 31    elementosInternos2 -> int
Rule 32    elementosInternos2 -> double
Rule 33    elementosInternos2 -> booleano
Rule 34    elementosInternos2 -> string
Rule 35    elementosInternos2 -> int COMMA elementosInternos2
Rule 36    elementosInternos2 -> double COMMA elementosInternos2
Rule 37    elementosInternos2 -> booleano COMMA elementosInternos2
Rule 38    elementosInternos2 -> string COMMA elementosInternos2
Rule 39    valueCons -> string
Rule 40    valueCons -> booleano
Rule 41    valueCons -> tupla
Rule 42    tipo -> INT
Rule 43    tipo -> DOUBLE
Rule 44    tipo -> BOOL
Rule 45    tipo -> STRING_TYPE
Rule 46    value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN
Rule 47    tipoValue -> STRING_TYPE EQUAL string
Rule 48    tipoValue -> BOOL EQUAL booleano
Rule 49    tipoValue -> INT EQUAL int
Rule 50    tipoValue -> DOUBLE EQUAL double
Rule 51    tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 52    tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 53    tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 54    tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 55    tipoValueCons -> STRING_TYPE EQUAL string
Rule 56    tipoValueCons -> BOOL EQUAL booleano
Rule 57    tipoValueCons -> INT EQUAL int
Rule 58    tipoValueCons -> DOUBLE EQUAL double
Rule 59    tupla -> LPAREN elementosInternos2 RPAREN
Rule 60    funcionesTupla -> tuplaSwap
Rule 61    funcionesTupla -> tuplaToString
Rule 62    funcionesTupla -> tuplaProductIterator
Rule 63    tuplaSwap -> ID DOT SWAP
Rule 64    tuplaToString -> ID DOT TOSTRING
Rule 65    tuplaProductIterator -> ID DOT PRODUCTITERATOR
Rule 66    expression -> expression PLUS term
Rule 67    expression -> expression MINUS term
Rule 68    expression -> term
Rule 69    term -> term TIMES factor
Rule 70    term -> term DIVIDE factor
Rule 71    term -> factor
Rule 72    sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE
Rule 73    comparacion -> GT
Rule 74    comparacion -> GE
Rule 75    comparacion -> LT
Rule 76    comparacion -> LE
Rule 77    comparacion -> EQUAL2
Rule 78    factor -> INT_NUMBER
Rule 79    factor -> DOUBLE_NUMBER
Rule 80    booleano -> TRUE
Rule 81    booleano -> FALSE
Rule 82    string -> STRING
Rule 83    double -> DOUBLE_NUMBER
Rule 84    int -> INT_NUMBER

Terminals, with rules where they appear

ARRAY                : 12 13 14 15 16 46 51 51 52 52 53 53 54 54
BOOL                 : 14 44 48 53 53 56
CLASS                : 
COLON                : 5 6 9
COMMA                : 24 26 28 30 35 36 37 38
DECREMENT            : 
DEF                  : 
DIVIDE               : 70
DOT                  : 63 64 65
DOUBLE               : 13 43 50 52 52 58
DOUBLE_NUMBER        : 79 83
ELSE                 : 
EQ                   : 
EQUAL                : 7 8 47 48 49 50 51 52 53 54 55 56 57 58
EQUAL2               : 77
EQUALS               : 
FALSE                : 81
FOR                  : 
GE                   : 74
GT                   : 73
HEAD                 : 
ID                   : 5 6 7 8 9 63 64 65
IF                   : 72
INCREMENT            : 
INT                  : 12 42 49 51 51 57
INT_NUMBER           : 78 84
ISEMPTY              : 
LBRACE               : 72
LBRACK               : 12 13 14 15 46 51 51 52 52 53 53 54 54
LE                   : 76
LENGTH               : 
LIST                 : 9 17 18
LPAREN               : 9 12 13 14 15 16 17 18 46 51 52 53 54 59
LT                   : 75
MINUS                : 67
MOD                  : 
NEW                  : 12 13 14 15 46 51 52 53 54
OBJECT               : 
PLUS                 : 66
PRINTLN              : 
PRODUCTITERATOR      : 65
RBRACE               : 72
RBRACK               : 12 13 14 15 46 51 51 52 52 53 53 54 54
RETURN               : 
REVERSE              : 
RPAREN               : 9 12 13 14 15 16 17 46 51 52 53 54 59
SEMICOLON            : 
STRING               : 82
STRING_TYPE          : 15 45 47 54 54 55
SWAP                 : 63
TAIL                 : 
THIS                 : 
TIMES                : 69
TOSTRING             : 64
TRUE                 : 80
VAL                  : 
VAR                  : 5 6 7 8 9
WHILE                : 
error                : 
unit                 : 

Nonterminals, with rules where they appear

booleano             : 11 27 28 33 37 40 48 56
comparacion          : 72
cuerpo               : 72 0
declararVariable     : 3
double               : 25 26 32 36 50 58
elementosInternos    : 16 17 18
elementosInternos2   : 35 36 37 38 59
elementosInternosBool : 21 28
elementosInternosDouble : 20 26
elementosInternosInt : 19 24
elementosInternosString : 22 30
expression           : 1 8 66 67
expressionlist       : 
factor               : 69 70 71 72 72
funcionesTupla       : 4
int                  : 12 13 14 15 23 24 31 35 46 49 51 52 53 54 57
sentencia            : 2
string               : 10 29 30 34 38 39 47 55
term                 : 66 67 68 69 70
tipo                 : 6 9 46
tipoValue            : 5
tipoValueCons        : 
tupla                : 41
tuplaProductIterator : 62
tuplaSwap            : 60
tuplaToString        : 61
value                : 7
valueCons            : 

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (4) cuerpo -> . funcionesTupla
    (66) expression -> . expression PLUS term
    (67) expression -> . expression MINUS term
    (68) expression -> . term
    (72) sentencia -> . IF factor comparacion factor LBRACE cuerpo RBRACE
    (5) declararVariable -> . VAR ID COLON tipoValue
    (6) declararVariable -> . VAR ID COLON tipo
    (7) declararVariable -> . VAR ID EQUAL value
    (8) declararVariable -> . VAR ID EQUAL expression
    (9) declararVariable -> . VAR ID COLON LIST LPAREN tipo RPAREN
    (60) funcionesTupla -> . tuplaSwap
    (61) funcionesTupla -> . tuplaToString
    (62) funcionesTupla -> . tuplaProductIterator
    (69) term -> . term TIMES factor
    (70) term -> . term DIVIDE factor
    (71) term -> . factor
    (63) tuplaSwap -> . ID DOT SWAP
    (64) tuplaToString -> . ID DOT TOSTRING
    (65) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (78) factor -> . INT_NUMBER
    (79) factor -> . DOUBLE_NUMBER

    IF              shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 10
    INT_NUMBER      shift and go to state 14
    DOUBLE_NUMBER   shift and go to state 15

    cuerpo                         shift and go to state 1
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    funcionesTupla                 shift and go to state 5
    term                           shift and go to state 6
    factor                         shift and go to state 8
    tuplaSwap                      shift and go to state 11
    tuplaToString                  shift and go to state 12
    tuplaProductIterator           shift and go to state 13

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> expression .
    (66) expression -> expression . PLUS term
    (67) expression -> expression . MINUS term

    $end            reduce using rule 1 (cuerpo -> expression .)
    RBRACE          reduce using rule 1 (cuerpo -> expression .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 3

    (2) cuerpo -> sentencia .

    $end            reduce using rule 2 (cuerpo -> sentencia .)
    RBRACE          reduce using rule 2 (cuerpo -> sentencia .)


state 4

    (3) cuerpo -> declararVariable .

    $end            reduce using rule 3 (cuerpo -> declararVariable .)
    RBRACE          reduce using rule 3 (cuerpo -> declararVariable .)


state 5

    (4) cuerpo -> funcionesTupla .

    $end            reduce using rule 4 (cuerpo -> funcionesTupla .)
    RBRACE          reduce using rule 4 (cuerpo -> funcionesTupla .)


state 6

    (68) expression -> term .
    (69) term -> term . TIMES factor
    (70) term -> term . DIVIDE factor

    PLUS            reduce using rule 68 (expression -> term .)
    MINUS           reduce using rule 68 (expression -> term .)
    $end            reduce using rule 68 (expression -> term .)
    RBRACE          reduce using rule 68 (expression -> term .)
    TIMES           shift and go to state 18
    DIVIDE          shift and go to state 19


state 7

    (72) sentencia -> IF . factor comparacion factor LBRACE cuerpo RBRACE
    (78) factor -> . INT_NUMBER
    (79) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 14
    DOUBLE_NUMBER   shift and go to state 15

    factor                         shift and go to state 20

state 8

    (71) term -> factor .

    TIMES           reduce using rule 71 (term -> factor .)
    DIVIDE          reduce using rule 71 (term -> factor .)
    PLUS            reduce using rule 71 (term -> factor .)
    MINUS           reduce using rule 71 (term -> factor .)
    $end            reduce using rule 71 (term -> factor .)
    RBRACE          reduce using rule 71 (term -> factor .)


state 9

    (5) declararVariable -> VAR . ID COLON tipoValue
    (6) declararVariable -> VAR . ID COLON tipo
    (7) declararVariable -> VAR . ID EQUAL value
    (8) declararVariable -> VAR . ID EQUAL expression
    (9) declararVariable -> VAR . ID COLON LIST LPAREN tipo RPAREN

    ID              shift and go to state 21


state 10

    (63) tuplaSwap -> ID . DOT SWAP
    (64) tuplaToString -> ID . DOT TOSTRING
    (65) tuplaProductIterator -> ID . DOT PRODUCTITERATOR

    DOT             shift and go to state 22


state 11

    (60) funcionesTupla -> tuplaSwap .

    $end            reduce using rule 60 (funcionesTupla -> tuplaSwap .)
    RBRACE          reduce using rule 60 (funcionesTupla -> tuplaSwap .)


state 12

    (61) funcionesTupla -> tuplaToString .

    $end            reduce using rule 61 (funcionesTupla -> tuplaToString .)
    RBRACE          reduce using rule 61 (funcionesTupla -> tuplaToString .)


state 13

    (62) funcionesTupla -> tuplaProductIterator .

    $end            reduce using rule 62 (funcionesTupla -> tuplaProductIterator .)
    RBRACE          reduce using rule 62 (funcionesTupla -> tuplaProductIterator .)


state 14

    (78) factor -> INT_NUMBER .

    TIMES           reduce using rule 78 (factor -> INT_NUMBER .)
    DIVIDE          reduce using rule 78 (factor -> INT_NUMBER .)
    PLUS            reduce using rule 78 (factor -> INT_NUMBER .)
    MINUS           reduce using rule 78 (factor -> INT_NUMBER .)
    $end            reduce using rule 78 (factor -> INT_NUMBER .)
    GT              reduce using rule 78 (factor -> INT_NUMBER .)
    GE              reduce using rule 78 (factor -> INT_NUMBER .)
    LT              reduce using rule 78 (factor -> INT_NUMBER .)
    LE              reduce using rule 78 (factor -> INT_NUMBER .)
    EQUAL2          reduce using rule 78 (factor -> INT_NUMBER .)
    RBRACE          reduce using rule 78 (factor -> INT_NUMBER .)
    LBRACE          reduce using rule 78 (factor -> INT_NUMBER .)


state 15

    (79) factor -> DOUBLE_NUMBER .

    TIMES           reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    DIVIDE          reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    PLUS            reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    MINUS           reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    $end            reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    GT              reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    GE              reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    LT              reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    LE              reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    EQUAL2          reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    RBRACE          reduce using rule 79 (factor -> DOUBLE_NUMBER .)
    LBRACE          reduce using rule 79 (factor -> DOUBLE_NUMBER .)


state 16

    (66) expression -> expression PLUS . term
    (69) term -> . term TIMES factor
    (70) term -> . term DIVIDE factor
    (71) term -> . factor
    (78) factor -> . INT_NUMBER
    (79) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 14
    DOUBLE_NUMBER   shift and go to state 15

    term                           shift and go to state 23
    factor                         shift and go to state 8

state 17

    (67) expression -> expression MINUS . term
    (69) term -> . term TIMES factor
    (70) term -> . term DIVIDE factor
    (71) term -> . factor
    (78) factor -> . INT_NUMBER
    (79) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 14
    DOUBLE_NUMBER   shift and go to state 15

    term                           shift and go to state 24
    factor                         shift and go to state 8

state 18

    (69) term -> term TIMES . factor
    (78) factor -> . INT_NUMBER
    (79) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 14
    DOUBLE_NUMBER   shift and go to state 15

    factor                         shift and go to state 25

state 19

    (70) term -> term DIVIDE . factor
    (78) factor -> . INT_NUMBER
    (79) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 14
    DOUBLE_NUMBER   shift and go to state 15

    factor                         shift and go to state 26

state 20

    (72) sentencia -> IF factor . comparacion factor LBRACE cuerpo RBRACE
    (73) comparacion -> . GT
    (74) comparacion -> . GE
    (75) comparacion -> . LT
    (76) comparacion -> . LE
    (77) comparacion -> . EQUAL2

    GT              shift and go to state 28
    GE              shift and go to state 29
    LT              shift and go to state 30
    LE              shift and go to state 31
    EQUAL2          shift and go to state 32

    comparacion                    shift and go to state 27

state 21

    (5) declararVariable -> VAR ID . COLON tipoValue
    (6) declararVariable -> VAR ID . COLON tipo
    (7) declararVariable -> VAR ID . EQUAL value
    (8) declararVariable -> VAR ID . EQUAL expression
    (9) declararVariable -> VAR ID . COLON LIST LPAREN tipo RPAREN

    COLON           shift and go to state 33
    EQUAL           shift and go to state 34


state 22

    (63) tuplaSwap -> ID DOT . SWAP
    (64) tuplaToString -> ID DOT . TOSTRING
    (65) tuplaProductIterator -> ID DOT . PRODUCTITERATOR

    SWAP            shift and go to state 35
    TOSTRING        shift and go to state 36
    PRODUCTITERATOR shift and go to state 37


state 23

    (66) expression -> expression PLUS term .
    (69) term -> term . TIMES factor
    (70) term -> term . DIVIDE factor

    PLUS            reduce using rule 66 (expression -> expression PLUS term .)
    MINUS           reduce using rule 66 (expression -> expression PLUS term .)
    $end            reduce using rule 66 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 66 (expression -> expression PLUS term .)
    TIMES           shift and go to state 18
    DIVIDE          shift and go to state 19


state 24

    (67) expression -> expression MINUS term .
    (69) term -> term . TIMES factor
    (70) term -> term . DIVIDE factor

    PLUS            reduce using rule 67 (expression -> expression MINUS term .)
    MINUS           reduce using rule 67 (expression -> expression MINUS term .)
    $end            reduce using rule 67 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 67 (expression -> expression MINUS term .)
    TIMES           shift and go to state 18
    DIVIDE          shift and go to state 19


state 25

    (69) term -> term TIMES factor .

    TIMES           reduce using rule 69 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 69 (term -> term TIMES factor .)
    PLUS            reduce using rule 69 (term -> term TIMES factor .)
    MINUS           reduce using rule 69 (term -> term TIMES factor .)
    $end            reduce using rule 69 (term -> term TIMES factor .)
    RBRACE          reduce using rule 69 (term -> term TIMES factor .)


state 26

    (70) term -> term DIVIDE factor .

    TIMES           reduce using rule 70 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 70 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 70 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 70 (term -> term DIVIDE factor .)
    $end            reduce using rule 70 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 70 (term -> term DIVIDE factor .)


state 27

    (72) sentencia -> IF factor comparacion . factor LBRACE cuerpo RBRACE
    (78) factor -> . INT_NUMBER
    (79) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 14
    DOUBLE_NUMBER   shift and go to state 15

    factor                         shift and go to state 38

state 28

    (73) comparacion -> GT .

    INT_NUMBER      reduce using rule 73 (comparacion -> GT .)
    DOUBLE_NUMBER   reduce using rule 73 (comparacion -> GT .)


state 29

    (74) comparacion -> GE .

    INT_NUMBER      reduce using rule 74 (comparacion -> GE .)
    DOUBLE_NUMBER   reduce using rule 74 (comparacion -> GE .)


state 30

    (75) comparacion -> LT .

    INT_NUMBER      reduce using rule 75 (comparacion -> LT .)
    DOUBLE_NUMBER   reduce using rule 75 (comparacion -> LT .)


state 31

    (76) comparacion -> LE .

    INT_NUMBER      reduce using rule 76 (comparacion -> LE .)
    DOUBLE_NUMBER   reduce using rule 76 (comparacion -> LE .)


state 32

    (77) comparacion -> EQUAL2 .

    INT_NUMBER      reduce using rule 77 (comparacion -> EQUAL2 .)
    DOUBLE_NUMBER   reduce using rule 77 (comparacion -> EQUAL2 .)


state 33

    (5) declararVariable -> VAR ID COLON . tipoValue
    (6) declararVariable -> VAR ID COLON . tipo
    (9) declararVariable -> VAR ID COLON . LIST LPAREN tipo RPAREN
    (47) tipoValue -> . STRING_TYPE EQUAL string
    (48) tipoValue -> . BOOL EQUAL booleano
    (49) tipoValue -> . INT EQUAL int
    (50) tipoValue -> . DOUBLE EQUAL double
    (51) tipoValue -> . ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (52) tipoValue -> . ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (53) tipoValue -> . ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (54) tipoValue -> . ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (42) tipo -> . INT
    (43) tipo -> . DOUBLE
    (44) tipo -> . BOOL
    (45) tipo -> . STRING_TYPE

    LIST            shift and go to state 41
    STRING_TYPE     shift and go to state 42
    BOOL            shift and go to state 43
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    ARRAY           shift and go to state 46

    tipoValue                      shift and go to state 39
    tipo                           shift and go to state 40

state 34

    (7) declararVariable -> VAR ID EQUAL . value
    (8) declararVariable -> VAR ID EQUAL . expression
    (10) value -> . string
    (11) value -> . booleano
    (12) value -> . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (13) value -> . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (14) value -> . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (15) value -> . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (16) value -> . ARRAY LPAREN elementosInternos RPAREN
    (46) value -> . NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN
    (66) expression -> . expression PLUS term
    (67) expression -> . expression MINUS term
    (68) expression -> . term
    (82) string -> . STRING
    (80) booleano -> . TRUE
    (81) booleano -> . FALSE
    (69) term -> . term TIMES factor
    (70) term -> . term DIVIDE factor
    (71) term -> . factor
    (78) factor -> . INT_NUMBER
    (79) factor -> . DOUBLE_NUMBER

    NEW             shift and go to state 51
    ARRAY           shift and go to state 52
    STRING          shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    INT_NUMBER      shift and go to state 14
    DOUBLE_NUMBER   shift and go to state 15

    value                          shift and go to state 47
    expression                     shift and go to state 48
    string                         shift and go to state 49
    booleano                       shift and go to state 50
    term                           shift and go to state 6
    factor                         shift and go to state 8

state 35

    (63) tuplaSwap -> ID DOT SWAP .

    $end            reduce using rule 63 (tuplaSwap -> ID DOT SWAP .)
    RBRACE          reduce using rule 63 (tuplaSwap -> ID DOT SWAP .)


state 36

    (64) tuplaToString -> ID DOT TOSTRING .

    $end            reduce using rule 64 (tuplaToString -> ID DOT TOSTRING .)
    RBRACE          reduce using rule 64 (tuplaToString -> ID DOT TOSTRING .)


state 37

    (65) tuplaProductIterator -> ID DOT PRODUCTITERATOR .

    $end            reduce using rule 65 (tuplaProductIterator -> ID DOT PRODUCTITERATOR .)
    RBRACE          reduce using rule 65 (tuplaProductIterator -> ID DOT PRODUCTITERATOR .)


state 38

    (72) sentencia -> IF factor comparacion factor . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 56


state 39

    (5) declararVariable -> VAR ID COLON tipoValue .

    $end            reduce using rule 5 (declararVariable -> VAR ID COLON tipoValue .)
    RBRACE          reduce using rule 5 (declararVariable -> VAR ID COLON tipoValue .)


state 40

    (6) declararVariable -> VAR ID COLON tipo .

    $end            reduce using rule 6 (declararVariable -> VAR ID COLON tipo .)
    RBRACE          reduce using rule 6 (declararVariable -> VAR ID COLON tipo .)


state 41

    (9) declararVariable -> VAR ID COLON LIST . LPAREN tipo RPAREN

    LPAREN          shift and go to state 57


state 42

    (47) tipoValue -> STRING_TYPE . EQUAL string
    (45) tipo -> STRING_TYPE .

    EQUAL           shift and go to state 58
    $end            reduce using rule 45 (tipo -> STRING_TYPE .)
    RBRACE          reduce using rule 45 (tipo -> STRING_TYPE .)


state 43

    (48) tipoValue -> BOOL . EQUAL booleano
    (44) tipo -> BOOL .

    EQUAL           shift and go to state 59
    $end            reduce using rule 44 (tipo -> BOOL .)
    RBRACE          reduce using rule 44 (tipo -> BOOL .)


state 44

    (49) tipoValue -> INT . EQUAL int
    (42) tipo -> INT .

    EQUAL           shift and go to state 60
    $end            reduce using rule 42 (tipo -> INT .)
    RBRACE          reduce using rule 42 (tipo -> INT .)


state 45

    (50) tipoValue -> DOUBLE . EQUAL double
    (43) tipo -> DOUBLE .

    EQUAL           shift and go to state 61
    $end            reduce using rule 43 (tipo -> DOUBLE .)
    RBRACE          reduce using rule 43 (tipo -> DOUBLE .)


state 46

    (51) tipoValue -> ARRAY . LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (52) tipoValue -> ARRAY . LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (53) tipoValue -> ARRAY . LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (54) tipoValue -> ARRAY . LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 62


state 47

    (7) declararVariable -> VAR ID EQUAL value .

    $end            reduce using rule 7 (declararVariable -> VAR ID EQUAL value .)
    RBRACE          reduce using rule 7 (declararVariable -> VAR ID EQUAL value .)


state 48

    (8) declararVariable -> VAR ID EQUAL expression .
    (66) expression -> expression . PLUS term
    (67) expression -> expression . MINUS term

    $end            reduce using rule 8 (declararVariable -> VAR ID EQUAL expression .)
    RBRACE          reduce using rule 8 (declararVariable -> VAR ID EQUAL expression .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 49

    (10) value -> string .

    $end            reduce using rule 10 (value -> string .)
    RBRACE          reduce using rule 10 (value -> string .)


state 50

    (11) value -> booleano .

    $end            reduce using rule 11 (value -> booleano .)
    RBRACE          reduce using rule 11 (value -> booleano .)


state 51

    (12) value -> NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (13) value -> NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (14) value -> NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (15) value -> NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (46) value -> NEW . ARRAY LBRACK tipo RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 63


state 52

    (16) value -> ARRAY . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 64


state 53

    (82) string -> STRING .

    $end            reduce using rule 82 (string -> STRING .)
    RBRACE          reduce using rule 82 (string -> STRING .)
    COMMA           reduce using rule 82 (string -> STRING .)
    RPAREN          reduce using rule 82 (string -> STRING .)


state 54

    (80) booleano -> TRUE .

    $end            reduce using rule 80 (booleano -> TRUE .)
    RBRACE          reduce using rule 80 (booleano -> TRUE .)
    COMMA           reduce using rule 80 (booleano -> TRUE .)
    RPAREN          reduce using rule 80 (booleano -> TRUE .)


state 55

    (81) booleano -> FALSE .

    $end            reduce using rule 81 (booleano -> FALSE .)
    RBRACE          reduce using rule 81 (booleano -> FALSE .)
    COMMA           reduce using rule 81 (booleano -> FALSE .)
    RPAREN          reduce using rule 81 (booleano -> FALSE .)


state 56

    (72) sentencia -> IF factor comparacion factor LBRACE . cuerpo RBRACE
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (4) cuerpo -> . funcionesTupla
    (66) expression -> . expression PLUS term
    (67) expression -> . expression MINUS term
    (68) expression -> . term
    (72) sentencia -> . IF factor comparacion factor LBRACE cuerpo RBRACE
    (5) declararVariable -> . VAR ID COLON tipoValue
    (6) declararVariable -> . VAR ID COLON tipo
    (7) declararVariable -> . VAR ID EQUAL value
    (8) declararVariable -> . VAR ID EQUAL expression
    (9) declararVariable -> . VAR ID COLON LIST LPAREN tipo RPAREN
    (60) funcionesTupla -> . tuplaSwap
    (61) funcionesTupla -> . tuplaToString
    (62) funcionesTupla -> . tuplaProductIterator
    (69) term -> . term TIMES factor
    (70) term -> . term DIVIDE factor
    (71) term -> . factor
    (63) tuplaSwap -> . ID DOT SWAP
    (64) tuplaToString -> . ID DOT TOSTRING
    (65) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (78) factor -> . INT_NUMBER
    (79) factor -> . DOUBLE_NUMBER

    IF              shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 10
    INT_NUMBER      shift and go to state 14
    DOUBLE_NUMBER   shift and go to state 15

    factor                         shift and go to state 8
    cuerpo                         shift and go to state 65
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    funcionesTupla                 shift and go to state 5
    term                           shift and go to state 6
    tuplaSwap                      shift and go to state 11
    tuplaToString                  shift and go to state 12
    tuplaProductIterator           shift and go to state 13

state 57

    (9) declararVariable -> VAR ID COLON LIST LPAREN . tipo RPAREN
    (42) tipo -> . INT
    (43) tipo -> . DOUBLE
    (44) tipo -> . BOOL
    (45) tipo -> . STRING_TYPE

    INT             shift and go to state 67
    DOUBLE          shift and go to state 68
    BOOL            shift and go to state 69
    STRING_TYPE     shift and go to state 70

    tipo                           shift and go to state 66

state 58

    (47) tipoValue -> STRING_TYPE EQUAL . string
    (82) string -> . STRING

    STRING          shift and go to state 53

    string                         shift and go to state 71

state 59

    (48) tipoValue -> BOOL EQUAL . booleano
    (80) booleano -> . TRUE
    (81) booleano -> . FALSE

    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    booleano                       shift and go to state 72

state 60

    (49) tipoValue -> INT EQUAL . int
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 73

state 61

    (50) tipoValue -> DOUBLE EQUAL . double
    (83) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 76

    double                         shift and go to state 75

state 62

    (51) tipoValue -> ARRAY LBRACK . INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (52) tipoValue -> ARRAY LBRACK . DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (53) tipoValue -> ARRAY LBRACK . BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (54) tipoValue -> ARRAY LBRACK . STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    INT             shift and go to state 77
    DOUBLE          shift and go to state 78
    BOOL            shift and go to state 79
    STRING_TYPE     shift and go to state 80


state 63

    (12) value -> NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN
    (13) value -> NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (14) value -> NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN
    (15) value -> NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (46) value -> NEW ARRAY . LBRACK tipo RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 81


state 64

    (16) value -> ARRAY LPAREN . elementosInternos RPAREN
    (19) elementosInternos -> . elementosInternosInt
    (20) elementosInternos -> . elementosInternosDouble
    (21) elementosInternos -> . elementosInternosBool
    (22) elementosInternos -> . elementosInternosString
    (23) elementosInternosInt -> . int
    (24) elementosInternosInt -> . int COMMA elementosInternosInt
    (25) elementosInternosDouble -> . double
    (26) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (27) elementosInternosBool -> . booleano
    (28) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (29) elementosInternosString -> . string
    (30) elementosInternosString -> . string COMMA elementosInternosString
    (84) int -> . INT_NUMBER
    (83) double -> . DOUBLE_NUMBER
    (80) booleano -> . TRUE
    (81) booleano -> . FALSE
    (82) string -> . STRING

    INT_NUMBER      shift and go to state 74
    DOUBLE_NUMBER   shift and go to state 76
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 53

    elementosInternos              shift and go to state 82
    elementosInternosInt           shift and go to state 83
    elementosInternosDouble        shift and go to state 84
    elementosInternosBool          shift and go to state 85
    elementosInternosString        shift and go to state 86
    int                            shift and go to state 87
    double                         shift and go to state 88
    booleano                       shift and go to state 89
    string                         shift and go to state 90

state 65

    (72) sentencia -> IF factor comparacion factor LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 91


state 66

    (9) declararVariable -> VAR ID COLON LIST LPAREN tipo . RPAREN

    RPAREN          shift and go to state 92


state 67

    (42) tipo -> INT .

    RPAREN          reduce using rule 42 (tipo -> INT .)


state 68

    (43) tipo -> DOUBLE .

    RPAREN          reduce using rule 43 (tipo -> DOUBLE .)


state 69

    (44) tipo -> BOOL .

    RPAREN          reduce using rule 44 (tipo -> BOOL .)


state 70

    (45) tipo -> STRING_TYPE .

    RPAREN          reduce using rule 45 (tipo -> STRING_TYPE .)


state 71

    (47) tipoValue -> STRING_TYPE EQUAL string .

    $end            reduce using rule 47 (tipoValue -> STRING_TYPE EQUAL string .)
    RBRACE          reduce using rule 47 (tipoValue -> STRING_TYPE EQUAL string .)


state 72

    (48) tipoValue -> BOOL EQUAL booleano .

    $end            reduce using rule 48 (tipoValue -> BOOL EQUAL booleano .)
    RBRACE          reduce using rule 48 (tipoValue -> BOOL EQUAL booleano .)


state 73

    (49) tipoValue -> INT EQUAL int .

    $end            reduce using rule 49 (tipoValue -> INT EQUAL int .)
    RBRACE          reduce using rule 49 (tipoValue -> INT EQUAL int .)


state 74

    (84) int -> INT_NUMBER .

    $end            reduce using rule 84 (int -> INT_NUMBER .)
    RBRACE          reduce using rule 84 (int -> INT_NUMBER .)
    COMMA           reduce using rule 84 (int -> INT_NUMBER .)
    RPAREN          reduce using rule 84 (int -> INT_NUMBER .)


state 75

    (50) tipoValue -> DOUBLE EQUAL double .

    $end            reduce using rule 50 (tipoValue -> DOUBLE EQUAL double .)
    RBRACE          reduce using rule 50 (tipoValue -> DOUBLE EQUAL double .)


state 76

    (83) double -> DOUBLE_NUMBER .

    $end            reduce using rule 83 (double -> DOUBLE_NUMBER .)
    RBRACE          reduce using rule 83 (double -> DOUBLE_NUMBER .)
    COMMA           reduce using rule 83 (double -> DOUBLE_NUMBER .)
    RPAREN          reduce using rule 83 (double -> DOUBLE_NUMBER .)


state 77

    (51) tipoValue -> ARRAY LBRACK INT . RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 93


state 78

    (52) tipoValue -> ARRAY LBRACK DOUBLE . RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 94


state 79

    (53) tipoValue -> ARRAY LBRACK BOOL . RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 95


state 80

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE . RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 96


state 81

    (12) value -> NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN
    (13) value -> NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN
    (14) value -> NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN
    (15) value -> NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN
    (46) value -> NEW ARRAY LBRACK . tipo RBRACK LPAREN int RPAREN
    (42) tipo -> . INT
    (43) tipo -> . DOUBLE
    (44) tipo -> . BOOL
    (45) tipo -> . STRING_TYPE

    INT             shift and go to state 97
    DOUBLE          shift and go to state 98
    BOOL            shift and go to state 99
    STRING_TYPE     shift and go to state 100

    tipo                           shift and go to state 101

state 82

    (16) value -> ARRAY LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 102


state 83

    (19) elementosInternos -> elementosInternosInt .

    RPAREN          reduce using rule 19 (elementosInternos -> elementosInternosInt .)


state 84

    (20) elementosInternos -> elementosInternosDouble .

    RPAREN          reduce using rule 20 (elementosInternos -> elementosInternosDouble .)


state 85

    (21) elementosInternos -> elementosInternosBool .

    RPAREN          reduce using rule 21 (elementosInternos -> elementosInternosBool .)


state 86

    (22) elementosInternos -> elementosInternosString .

    RPAREN          reduce using rule 22 (elementosInternos -> elementosInternosString .)


state 87

    (23) elementosInternosInt -> int .
    (24) elementosInternosInt -> int . COMMA elementosInternosInt

    RPAREN          reduce using rule 23 (elementosInternosInt -> int .)
    COMMA           shift and go to state 103


state 88

    (25) elementosInternosDouble -> double .
    (26) elementosInternosDouble -> double . COMMA elementosInternosDouble

    RPAREN          reduce using rule 25 (elementosInternosDouble -> double .)
    COMMA           shift and go to state 104


state 89

    (27) elementosInternosBool -> booleano .
    (28) elementosInternosBool -> booleano . COMMA elementosInternosBool

    RPAREN          reduce using rule 27 (elementosInternosBool -> booleano .)
    COMMA           shift and go to state 105


state 90

    (29) elementosInternosString -> string .
    (30) elementosInternosString -> string . COMMA elementosInternosString

    RPAREN          reduce using rule 29 (elementosInternosString -> string .)
    COMMA           shift and go to state 106


state 91

    (72) sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE .

    $end            reduce using rule 72 (sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 72 (sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE .)


state 92

    (9) declararVariable -> VAR ID COLON LIST LPAREN tipo RPAREN .

    $end            reduce using rule 9 (declararVariable -> VAR ID COLON LIST LPAREN tipo RPAREN .)
    RBRACE          reduce using rule 9 (declararVariable -> VAR ID COLON LIST LPAREN tipo RPAREN .)


state 93

    (51) tipoValue -> ARRAY LBRACK INT RBRACK . EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 107


state 94

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK . EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 108


state 95

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK . EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 109


state 96

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK . EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 110


state 97

    (12) value -> NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN
    (42) tipo -> INT .

  ! shift/reduce conflict for RBRACK resolved as shift
    RBRACK          shift and go to state 111

  ! RBRACK          [ reduce using rule 42 (tipo -> INT .) ]


state 98

    (13) value -> NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN
    (43) tipo -> DOUBLE .

  ! shift/reduce conflict for RBRACK resolved as shift
    RBRACK          shift and go to state 112

  ! RBRACK          [ reduce using rule 43 (tipo -> DOUBLE .) ]


state 99

    (14) value -> NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN
    (44) tipo -> BOOL .

  ! shift/reduce conflict for RBRACK resolved as shift
    RBRACK          shift and go to state 113

  ! RBRACK          [ reduce using rule 44 (tipo -> BOOL .) ]


state 100

    (15) value -> NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN
    (45) tipo -> STRING_TYPE .

  ! shift/reduce conflict for RBRACK resolved as shift
    RBRACK          shift and go to state 114

  ! RBRACK          [ reduce using rule 45 (tipo -> STRING_TYPE .) ]


state 101

    (46) value -> NEW ARRAY LBRACK tipo . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 115


state 102

    (16) value -> ARRAY LPAREN elementosInternos RPAREN .

    $end            reduce using rule 16 (value -> ARRAY LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 16 (value -> ARRAY LPAREN elementosInternos RPAREN .)


state 103

    (24) elementosInternosInt -> int COMMA . elementosInternosInt
    (23) elementosInternosInt -> . int
    (24) elementosInternosInt -> . int COMMA elementosInternosInt
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 87
    elementosInternosInt           shift and go to state 116

state 104

    (26) elementosInternosDouble -> double COMMA . elementosInternosDouble
    (25) elementosInternosDouble -> . double
    (26) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (83) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 76

    double                         shift and go to state 88
    elementosInternosDouble        shift and go to state 117

state 105

    (28) elementosInternosBool -> booleano COMMA . elementosInternosBool
    (27) elementosInternosBool -> . booleano
    (28) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (80) booleano -> . TRUE
    (81) booleano -> . FALSE

    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    booleano                       shift and go to state 89
    elementosInternosBool          shift and go to state 118

state 106

    (30) elementosInternosString -> string COMMA . elementosInternosString
    (29) elementosInternosString -> . string
    (30) elementosInternosString -> . string COMMA elementosInternosString
    (82) string -> . STRING

    STRING          shift and go to state 53

    string                         shift and go to state 90
    elementosInternosString        shift and go to state 119

state 107

    (51) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    NEW             shift and go to state 120


state 108

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 121


state 109

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    NEW             shift and go to state 122


state 110

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 123


state 111

    (12) value -> NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 124


state 112

    (13) value -> NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 125


state 113

    (14) value -> NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 126


state 114

    (15) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 127


state 115

    (46) value -> NEW ARRAY LBRACK tipo RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 128


state 116

    (24) elementosInternosInt -> int COMMA elementosInternosInt .

    RPAREN          reduce using rule 24 (elementosInternosInt -> int COMMA elementosInternosInt .)


state 117

    (26) elementosInternosDouble -> double COMMA elementosInternosDouble .

    RPAREN          reduce using rule 26 (elementosInternosDouble -> double COMMA elementosInternosDouble .)


state 118

    (28) elementosInternosBool -> booleano COMMA elementosInternosBool .

    RPAREN          reduce using rule 28 (elementosInternosBool -> booleano COMMA elementosInternosBool .)


state 119

    (30) elementosInternosString -> string COMMA elementosInternosString .

    RPAREN          reduce using rule 30 (elementosInternosString -> string COMMA elementosInternosString .)


state 120

    (51) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 129


state 121

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 130


state 122

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 131


state 123

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 132


state 124

    (12) value -> NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 133

state 125

    (13) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 134

state 126

    (14) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 135

state 127

    (15) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 136

state 128

    (46) value -> NEW ARRAY LBRACK tipo RBRACK LPAREN . int RPAREN
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 137

state 129

    (51) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 138


state 130

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 139


state 131

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 140


state 132

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 141


state 133

    (12) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 142


state 134

    (13) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 143


state 135

    (14) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 144


state 136

    (15) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 145


state 137

    (46) value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 146


state 138

    (51) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN

    INT             shift and go to state 147


state 139

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN

    DOUBLE          shift and go to state 148


state 140

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN

    BOOL            shift and go to state 149


state 141

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN

    STRING_TYPE     shift and go to state 150


state 142

    (12) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 12 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 12 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 143

    (13) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 13 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 13 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 144

    (14) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 14 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 14 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 145

    (15) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 15 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 15 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)


state 146

    (46) value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN .

    $end            reduce using rule 46 (value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 46 (value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN .)


state 147

    (51) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 151


state 148

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 152


state 149

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 153


state 150

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 154


state 151

    (51) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 155


state 152

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 156


state 153

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 157


state 154

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 158


state 155

    (51) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 159

state 156

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 160

state 157

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 161

state 158

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (84) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 74

    int                            shift and go to state 162

state 159

    (51) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 163


state 160

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 164


state 161

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 165


state 162

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 166


state 163

    (51) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 51 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 51 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 164

    (52) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 52 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 52 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 165

    (53) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 53 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 53 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 166

    (54) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 54 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 54 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACK in state 97 resolved as shift
WARNING: shift/reduce conflict for RBRACK in state 98 resolved as shift
WARNING: shift/reduce conflict for RBRACK in state 99 resolved as shift
WARNING: shift/reduce conflict for RBRACK in state 100 resolved as shift

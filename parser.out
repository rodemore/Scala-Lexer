Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CLASS
    DECREMENT
    DEF
    INCREMENT
    MOD
    OBJECT
    OR
    RETURN
    SEMICOLON
    THIS
    unit

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> expression
Rule 2     cuerpo -> sentencia
Rule 3     cuerpo -> declararVariable
Rule 4     cuerpo -> declararConstante
Rule 5     cuerpo -> funcionesTupla
Rule 6     cuerpo -> funcionesList
Rule 7     cuerpo -> funcionesArray
Rule 8     cuerpo -> for
Rule 9     cuerpo -> funcionesPropias
Rule 10    cuerpo -> while
Rule 11    declararConstante -> VAL ID COLON tipoValueCons
Rule 12    declararConstante -> VAL ID COLON tipo
Rule 13    declararConstante -> VAL ID EQUAL valueCons
Rule 14    declararConstante -> VAL ID EQUAL expression
Rule 15    declararVariable -> VAR ID COLON tipoValue
Rule 16    declararVariable -> VAR ID COLON tipo
Rule 17    declararVariable -> VAR ID EQUAL value
Rule 18    declararVariable -> VAR ID EQUAL expression
Rule 19    value -> string
Rule 20    value -> booleano
Rule 21    value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 22    value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 23    value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 24    value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 25    value -> ARRAY LPAREN elementosInternos RPAREN
Rule 26    value -> LIST LPAREN elementosInternos RPAREN
Rule 27    elementosInternos -> elementosInternosInt
Rule 28    elementosInternos -> elementosInternosDouble
Rule 29    elementosInternos -> elementosInternosBool
Rule 30    elementosInternos -> elementosInternosString
Rule 31    elementosInternosInt -> int
Rule 32    elementosInternosInt -> int COMMA elementosInternosInt
Rule 33    elementosInternosDouble -> double
Rule 34    elementosInternosDouble -> double COMMA elementosInternosDouble
Rule 35    elementosInternosBool -> booleano
Rule 36    elementosInternosBool -> booleano COMMA elementosInternosBool
Rule 37    elementosInternosString -> string
Rule 38    elementosInternosString -> string COMMA elementosInternosString
Rule 39    elementosInternos2 -> int
Rule 40    elementosInternos2 -> double
Rule 41    elementosInternos2 -> booleano
Rule 42    elementosInternos2 -> string
Rule 43    elementosInternos2 -> int COMMA elementosInternos2
Rule 44    elementosInternos2 -> double COMMA elementosInternos2
Rule 45    elementosInternos2 -> booleano COMMA elementosInternos2
Rule 46    elementosInternos2 -> string COMMA elementosInternos2
Rule 47    valueCons -> string
Rule 48    valueCons -> booleano
Rule 49    valueCons -> tupla
Rule 50    tipo -> INT
Rule 51    tipo -> DOUBLE
Rule 52    tipo -> BOOL
Rule 53    tipo -> STRING_TYPE
Rule 54    tipoValue -> STRING_TYPE EQUAL string
Rule 55    tipoValue -> BOOL EQUAL booleano
Rule 56    tipoValue -> INT EQUAL int
Rule 57    tipoValue -> DOUBLE EQUAL double
Rule 58    tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 59    tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 60    tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 61    tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 62    tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
Rule 63    tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
Rule 64    tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
Rule 65    tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
Rule 66    tipoValueCons -> STRING_TYPE EQUAL string
Rule 67    tipoValueCons -> BOOL EQUAL booleano
Rule 68    tipoValueCons -> INT EQUAL int
Rule 69    tipoValueCons -> DOUBLE EQUAL double
Rule 70    tupla -> LPAREN elementosInternos2 RPAREN
Rule 71    funcionesTupla -> tuplaSwap
Rule 72    funcionesTupla -> tuplaToString
Rule 73    funcionesTupla -> tuplaProductIterator
Rule 74    tuplaSwap -> ID DOT SWAP
Rule 75    tuplaToString -> ID DOT TOSTRING LPAREN RPAREN
Rule 76    tuplaProductIterator -> ID DOT PRODUCTITERATOR
Rule 77    funcionesArray -> arrayHead
Rule 78    funcionesArray -> arrayTail
Rule 79    funcionesArray -> arrayLength
Rule 80    funcionesList -> listIsEmpty
Rule 81    funcionesList -> listReverse
Rule 82    funcionesPropias -> INPUT LPAREN RPAREN
Rule 83    funcionesPropias -> PRINTLN LPAREN string RPAREN
Rule 84    funcionesPropias -> PRINTLN LPAREN booleano RPAREN
Rule 85    funcionesPropias -> PRINTLN LPAREN ID RPAREN
Rule 86    funcionesPropias -> PRINTLN LPAREN expression RPAREN
Rule 87    arrayHead -> ID DOT HEAD
Rule 88    arrayTail -> ID DOT TAIL
Rule 89    arrayLength -> ID DOT LENGTH
Rule 90    listReverse -> ID DOT REVERSE
Rule 91    listIsEmpty -> ID DOT ISEMPTY
Rule 92    expression -> expression PLUS term
Rule 93    expression -> expression MINUS term
Rule 94    expression -> term
Rule 95    term -> term TIMES factor
Rule 96    term -> term DIVIDE factor
Rule 97    term -> factor
Rule 98    if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
Rule 99    sentencia -> if
Rule 100   sentencia -> if ELSE LBRACE cuerpo RBRACE
Rule 101   comp -> factor comparacion factor
Rule 102   comp -> comparacionesVar
Rule 103   while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
Rule 104   whileclause -> comp
Rule 105   whileclause -> ID
Rule 106   whileclause -> booleano
Rule 107   for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
Rule 108   comparacionesVar -> ID DOT EQUALS LPAREN ID RPAREN
Rule 109   comparacionesVar -> ID DOT EQ LPAREN ID RPAREN
Rule 110   comparacion -> GT
Rule 111   comparacion -> GE
Rule 112   comparacion -> LT
Rule 113   comparacion -> LE
Rule 114   comparacion -> EQUAL2
Rule 115   factor -> int
Rule 116   factor -> double
Rule 117   booleano -> TRUE
Rule 118   booleano -> FALSE
Rule 119   string -> STRING
Rule 120   double -> DOUBLE_NUMBER
Rule 121   int -> INT_NUMBER

Terminals, with rules where they appear

AND                  : 
ARRAY                : 21 22 23 24 25 58 58 59 59 60 60 61 61
BOOL                 : 23 52 55 60 60 64 67
CLASS                : 
COLON                : 11 12 15 16
COMMA                : 32 34 36 38 43 44 45 46
DECREMENT            : 
DEF                  : 
DIVIDE               : 96
DOT                  : 74 75 76 87 88 89 90 91 108 109
DOUBLE               : 22 51 57 59 59 63 69
DOUBLE_NUMBER        : 120
ELSE                 : 100
EQ                   : 109
EQUAL                : 13 14 17 18 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
EQUAL2               : 114
EQUALS               : 108
FALSE                : 118
FOR                  : 107
GE                   : 111
GT                   : 110
HEAD                 : 87
ID                   : 11 12 13 14 15 16 17 18 74 75 76 85 87 88 89 90 91 105 107 107 108 108 109 109
IF                   : 98
INCREMENT            : 
INPUT                : 82
INT                  : 21 50 56 58 58 62 68
INT_NUMBER           : 121
ISEMPTY              : 91
LBRACE               : 98 100 103 107
LBRACK               : 21 22 23 24 58 58 59 59 60 60 61 61 62 63 64 65
LE                   : 113
LENGTH               : 89
LIST                 : 26 62 62 63 63 64 64 65 65
LM                   : 107
LPAREN               : 21 22 23 24 25 26 58 59 60 61 62 63 64 65 70 75 82 83 84 85 86 98 103 107 108 109
LT                   : 112
MINUS                : 93
MOD                  : 
NEW                  : 21 22 23 24 58 59 60 61
OBJECT               : 
OR                   : 
PLUS                 : 92
PRINTLN              : 83 84 85 86
PRODUCTITERATOR      : 76
RBRACE               : 98 100 103 107
RBRACK               : 21 22 23 24 58 58 59 59 60 60 61 61 62 63 64 65
RETURN               : 
REVERSE              : 90
RPAREN               : 21 22 23 24 25 26 58 59 60 61 62 63 64 65 70 75 82 83 84 85 86 98 103 107 108 109
SEMICOLON            : 
STRING               : 119
STRING_TYPE          : 24 53 54 61 61 65 66
SWAP                 : 74
TAIL                 : 88
THIS                 : 
TIMES                : 95
TOSTRING             : 75
TRUE                 : 117
VAL                  : 11 12 13 14
VAR                  : 15 16 17 18
WHILE                : 103
error                : 
unit                 : 

Nonterminals, with rules where they appear

arrayHead            : 77
arrayLength          : 79
arrayTail            : 78
booleano             : 20 35 36 41 45 48 55 67 84 106
comp                 : 104
comparacion          : 98 101
comparacionesVar     : 102
cuerpo               : 98 100 103 107 0
declararConstante    : 4
declararVariable     : 3
double               : 33 34 40 44 57 69 116
elementosInternos    : 25 26 62 63 64 65
elementosInternos2   : 43 44 45 46 70
elementosInternosBool : 29 36
elementosInternosDouble : 28 34
elementosInternosInt : 27 32
elementosInternosString : 30 38
expression           : 1 14 18 86 92 93
factor               : 95 96 97 98 98 101 101
for                  : 8
funcionesArray       : 7
funcionesList        : 6
funcionesPropias     : 9
funcionesTupla       : 5
if                   : 99 100
int                  : 21 22 23 24 31 32 39 43 56 58 59 60 61 68 115
listIsEmpty          : 80
listReverse          : 81
sentencia            : 2
string               : 19 37 38 42 46 47 54 66 83
term                 : 92 93 94 95 96
tipo                 : 12 16
tipoValue            : 15
tipoValueCons        : 11
tupla                : 49
tuplaProductIterator : 73
tuplaSwap            : 71
tuplaToString        : 72
value                : 17
valueCons            : 13
while                : 10
whileclause          : 103

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (4) cuerpo -> . declararConstante
    (5) cuerpo -> . funcionesTupla
    (6) cuerpo -> . funcionesList
    (7) cuerpo -> . funcionesArray
    (8) cuerpo -> . for
    (9) cuerpo -> . funcionesPropias
    (10) cuerpo -> . while
    (92) expression -> . expression PLUS term
    (93) expression -> . expression MINUS term
    (94) expression -> . term
    (99) sentencia -> . if
    (100) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (15) declararVariable -> . VAR ID COLON tipoValue
    (16) declararVariable -> . VAR ID COLON tipo
    (17) declararVariable -> . VAR ID EQUAL value
    (18) declararVariable -> . VAR ID EQUAL expression
    (11) declararConstante -> . VAL ID COLON tipoValueCons
    (12) declararConstante -> . VAL ID COLON tipo
    (13) declararConstante -> . VAL ID EQUAL valueCons
    (14) declararConstante -> . VAL ID EQUAL expression
    (71) funcionesTupla -> . tuplaSwap
    (72) funcionesTupla -> . tuplaToString
    (73) funcionesTupla -> . tuplaProductIterator
    (80) funcionesList -> . listIsEmpty
    (81) funcionesList -> . listReverse
    (77) funcionesArray -> . arrayHead
    (78) funcionesArray -> . arrayTail
    (79) funcionesArray -> . arrayLength
    (107) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (82) funcionesPropias -> . INPUT LPAREN RPAREN
    (83) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (84) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (85) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (103) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (74) tuplaSwap -> . ID DOT SWAP
    (75) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (76) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (91) listIsEmpty -> . ID DOT ISEMPTY
    (90) listReverse -> . ID DOT REVERSE
    (87) arrayHead -> . ID DOT HEAD
    (88) arrayTail -> . ID DOT TAIL
    (89) arrayLength -> . ID DOT LENGTH
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 14
    VAL             shift and go to state 16
    FOR             shift and go to state 25
    INPUT           shift and go to state 26
    PRINTLN         shift and go to state 27
    WHILE           shift and go to state 28
    IF              shift and go to state 30
    ID              shift and go to state 15
    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    cuerpo                         shift and go to state 1
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    declararConstante              shift and go to state 5
    funcionesTupla                 shift and go to state 6
    funcionesList                  shift and go to state 7
    funcionesArray                 shift and go to state 8
    for                            shift and go to state 9
    funcionesPropias               shift and go to state 10
    while                          shift and go to state 11
    term                           shift and go to state 12
    if                             shift and go to state 13
    tuplaSwap                      shift and go to state 17
    tuplaToString                  shift and go to state 18
    tuplaProductIterator           shift and go to state 19
    listIsEmpty                    shift and go to state 20
    listReverse                    shift and go to state 21
    arrayHead                      shift and go to state 22
    arrayTail                      shift and go to state 23
    arrayLength                    shift and go to state 24
    factor                         shift and go to state 29
    int                            shift and go to state 31
    double                         shift and go to state 32

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> expression .
    (92) expression -> expression . PLUS term
    (93) expression -> expression . MINUS term

    $end            reduce using rule 1 (cuerpo -> expression .)
    RBRACE          reduce using rule 1 (cuerpo -> expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 3

    (2) cuerpo -> sentencia .

    $end            reduce using rule 2 (cuerpo -> sentencia .)
    RBRACE          reduce using rule 2 (cuerpo -> sentencia .)


state 4

    (3) cuerpo -> declararVariable .

    $end            reduce using rule 3 (cuerpo -> declararVariable .)
    RBRACE          reduce using rule 3 (cuerpo -> declararVariable .)


state 5

    (4) cuerpo -> declararConstante .

    $end            reduce using rule 4 (cuerpo -> declararConstante .)
    RBRACE          reduce using rule 4 (cuerpo -> declararConstante .)


state 6

    (5) cuerpo -> funcionesTupla .

    $end            reduce using rule 5 (cuerpo -> funcionesTupla .)
    RBRACE          reduce using rule 5 (cuerpo -> funcionesTupla .)


state 7

    (6) cuerpo -> funcionesList .

    $end            reduce using rule 6 (cuerpo -> funcionesList .)
    RBRACE          reduce using rule 6 (cuerpo -> funcionesList .)


state 8

    (7) cuerpo -> funcionesArray .

    $end            reduce using rule 7 (cuerpo -> funcionesArray .)
    RBRACE          reduce using rule 7 (cuerpo -> funcionesArray .)


state 9

    (8) cuerpo -> for .

    $end            reduce using rule 8 (cuerpo -> for .)
    RBRACE          reduce using rule 8 (cuerpo -> for .)


state 10

    (9) cuerpo -> funcionesPropias .

    $end            reduce using rule 9 (cuerpo -> funcionesPropias .)
    RBRACE          reduce using rule 9 (cuerpo -> funcionesPropias .)


state 11

    (10) cuerpo -> while .

    $end            reduce using rule 10 (cuerpo -> while .)
    RBRACE          reduce using rule 10 (cuerpo -> while .)


state 12

    (94) expression -> term .
    (95) term -> term . TIMES factor
    (96) term -> term . DIVIDE factor

    PLUS            reduce using rule 94 (expression -> term .)
    MINUS           reduce using rule 94 (expression -> term .)
    $end            reduce using rule 94 (expression -> term .)
    RPAREN          reduce using rule 94 (expression -> term .)
    RBRACE          reduce using rule 94 (expression -> term .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38


state 13

    (99) sentencia -> if .
    (100) sentencia -> if . ELSE LBRACE cuerpo RBRACE

    $end            reduce using rule 99 (sentencia -> if .)
    RBRACE          reduce using rule 99 (sentencia -> if .)
    ELSE            shift and go to state 39


state 14

    (15) declararVariable -> VAR . ID COLON tipoValue
    (16) declararVariable -> VAR . ID COLON tipo
    (17) declararVariable -> VAR . ID EQUAL value
    (18) declararVariable -> VAR . ID EQUAL expression

    ID              shift and go to state 40


state 15

    (74) tuplaSwap -> ID . DOT SWAP
    (75) tuplaToString -> ID . DOT TOSTRING LPAREN RPAREN
    (76) tuplaProductIterator -> ID . DOT PRODUCTITERATOR
    (91) listIsEmpty -> ID . DOT ISEMPTY
    (90) listReverse -> ID . DOT REVERSE
    (87) arrayHead -> ID . DOT HEAD
    (88) arrayTail -> ID . DOT TAIL
    (89) arrayLength -> ID . DOT LENGTH

    DOT             shift and go to state 41


state 16

    (11) declararConstante -> VAL . ID COLON tipoValueCons
    (12) declararConstante -> VAL . ID COLON tipo
    (13) declararConstante -> VAL . ID EQUAL valueCons
    (14) declararConstante -> VAL . ID EQUAL expression

    ID              shift and go to state 42


state 17

    (71) funcionesTupla -> tuplaSwap .

    $end            reduce using rule 71 (funcionesTupla -> tuplaSwap .)
    RBRACE          reduce using rule 71 (funcionesTupla -> tuplaSwap .)


state 18

    (72) funcionesTupla -> tuplaToString .

    $end            reduce using rule 72 (funcionesTupla -> tuplaToString .)
    RBRACE          reduce using rule 72 (funcionesTupla -> tuplaToString .)


state 19

    (73) funcionesTupla -> tuplaProductIterator .

    $end            reduce using rule 73 (funcionesTupla -> tuplaProductIterator .)
    RBRACE          reduce using rule 73 (funcionesTupla -> tuplaProductIterator .)


state 20

    (80) funcionesList -> listIsEmpty .

    $end            reduce using rule 80 (funcionesList -> listIsEmpty .)
    RBRACE          reduce using rule 80 (funcionesList -> listIsEmpty .)


state 21

    (81) funcionesList -> listReverse .

    $end            reduce using rule 81 (funcionesList -> listReverse .)
    RBRACE          reduce using rule 81 (funcionesList -> listReverse .)


state 22

    (77) funcionesArray -> arrayHead .

    $end            reduce using rule 77 (funcionesArray -> arrayHead .)
    RBRACE          reduce using rule 77 (funcionesArray -> arrayHead .)


state 23

    (78) funcionesArray -> arrayTail .

    $end            reduce using rule 78 (funcionesArray -> arrayTail .)
    RBRACE          reduce using rule 78 (funcionesArray -> arrayTail .)


state 24

    (79) funcionesArray -> arrayLength .

    $end            reduce using rule 79 (funcionesArray -> arrayLength .)
    RBRACE          reduce using rule 79 (funcionesArray -> arrayLength .)


state 25

    (107) for -> FOR . LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 43


state 26

    (82) funcionesPropias -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 44


state 27

    (83) funcionesPropias -> PRINTLN . LPAREN string RPAREN
    (84) funcionesPropias -> PRINTLN . LPAREN booleano RPAREN
    (85) funcionesPropias -> PRINTLN . LPAREN ID RPAREN
    (86) funcionesPropias -> PRINTLN . LPAREN expression RPAREN

    LPAREN          shift and go to state 45


state 28

    (103) while -> WHILE . LPAREN whileclause RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 46


state 29

    (97) term -> factor .

    TIMES           reduce using rule 97 (term -> factor .)
    DIVIDE          reduce using rule 97 (term -> factor .)
    PLUS            reduce using rule 97 (term -> factor .)
    MINUS           reduce using rule 97 (term -> factor .)
    $end            reduce using rule 97 (term -> factor .)
    RPAREN          reduce using rule 97 (term -> factor .)
    RBRACE          reduce using rule 97 (term -> factor .)


state 30

    (98) if -> IF . LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 47


state 31

    (115) factor -> int .

    TIMES           reduce using rule 115 (factor -> int .)
    DIVIDE          reduce using rule 115 (factor -> int .)
    PLUS            reduce using rule 115 (factor -> int .)
    MINUS           reduce using rule 115 (factor -> int .)
    $end            reduce using rule 115 (factor -> int .)
    RPAREN          reduce using rule 115 (factor -> int .)
    RBRACE          reduce using rule 115 (factor -> int .)
    GT              reduce using rule 115 (factor -> int .)
    GE              reduce using rule 115 (factor -> int .)
    LT              reduce using rule 115 (factor -> int .)
    LE              reduce using rule 115 (factor -> int .)
    EQUAL2          reduce using rule 115 (factor -> int .)


state 32

    (116) factor -> double .

    TIMES           reduce using rule 116 (factor -> double .)
    DIVIDE          reduce using rule 116 (factor -> double .)
    PLUS            reduce using rule 116 (factor -> double .)
    MINUS           reduce using rule 116 (factor -> double .)
    $end            reduce using rule 116 (factor -> double .)
    RPAREN          reduce using rule 116 (factor -> double .)
    RBRACE          reduce using rule 116 (factor -> double .)
    GT              reduce using rule 116 (factor -> double .)
    GE              reduce using rule 116 (factor -> double .)
    LT              reduce using rule 116 (factor -> double .)
    LE              reduce using rule 116 (factor -> double .)
    EQUAL2          reduce using rule 116 (factor -> double .)


state 33

    (121) int -> INT_NUMBER .

    TIMES           reduce using rule 121 (int -> INT_NUMBER .)
    DIVIDE          reduce using rule 121 (int -> INT_NUMBER .)
    PLUS            reduce using rule 121 (int -> INT_NUMBER .)
    MINUS           reduce using rule 121 (int -> INT_NUMBER .)
    $end            reduce using rule 121 (int -> INT_NUMBER .)
    RPAREN          reduce using rule 121 (int -> INT_NUMBER .)
    RBRACE          reduce using rule 121 (int -> INT_NUMBER .)
    GT              reduce using rule 121 (int -> INT_NUMBER .)
    GE              reduce using rule 121 (int -> INT_NUMBER .)
    LT              reduce using rule 121 (int -> INT_NUMBER .)
    LE              reduce using rule 121 (int -> INT_NUMBER .)
    EQUAL2          reduce using rule 121 (int -> INT_NUMBER .)
    COMMA           reduce using rule 121 (int -> INT_NUMBER .)


state 34

    (120) double -> DOUBLE_NUMBER .

    TIMES           reduce using rule 120 (double -> DOUBLE_NUMBER .)
    DIVIDE          reduce using rule 120 (double -> DOUBLE_NUMBER .)
    PLUS            reduce using rule 120 (double -> DOUBLE_NUMBER .)
    MINUS           reduce using rule 120 (double -> DOUBLE_NUMBER .)
    $end            reduce using rule 120 (double -> DOUBLE_NUMBER .)
    RPAREN          reduce using rule 120 (double -> DOUBLE_NUMBER .)
    RBRACE          reduce using rule 120 (double -> DOUBLE_NUMBER .)
    GT              reduce using rule 120 (double -> DOUBLE_NUMBER .)
    GE              reduce using rule 120 (double -> DOUBLE_NUMBER .)
    LT              reduce using rule 120 (double -> DOUBLE_NUMBER .)
    LE              reduce using rule 120 (double -> DOUBLE_NUMBER .)
    EQUAL2          reduce using rule 120 (double -> DOUBLE_NUMBER .)
    COMMA           reduce using rule 120 (double -> DOUBLE_NUMBER .)


state 35

    (92) expression -> expression PLUS . term
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    term                           shift and go to state 48
    factor                         shift and go to state 29
    int                            shift and go to state 31
    double                         shift and go to state 32

state 36

    (93) expression -> expression MINUS . term
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    term                           shift and go to state 49
    factor                         shift and go to state 29
    int                            shift and go to state 31
    double                         shift and go to state 32

state 37

    (95) term -> term TIMES . factor
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    factor                         shift and go to state 50
    int                            shift and go to state 31
    double                         shift and go to state 32

state 38

    (96) term -> term DIVIDE . factor
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    factor                         shift and go to state 51
    int                            shift and go to state 31
    double                         shift and go to state 32

state 39

    (100) sentencia -> if ELSE . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 52


state 40

    (15) declararVariable -> VAR ID . COLON tipoValue
    (16) declararVariable -> VAR ID . COLON tipo
    (17) declararVariable -> VAR ID . EQUAL value
    (18) declararVariable -> VAR ID . EQUAL expression

    COLON           shift and go to state 53
    EQUAL           shift and go to state 54


state 41

    (74) tuplaSwap -> ID DOT . SWAP
    (75) tuplaToString -> ID DOT . TOSTRING LPAREN RPAREN
    (76) tuplaProductIterator -> ID DOT . PRODUCTITERATOR
    (91) listIsEmpty -> ID DOT . ISEMPTY
    (90) listReverse -> ID DOT . REVERSE
    (87) arrayHead -> ID DOT . HEAD
    (88) arrayTail -> ID DOT . TAIL
    (89) arrayLength -> ID DOT . LENGTH

    SWAP            shift and go to state 55
    TOSTRING        shift and go to state 56
    PRODUCTITERATOR shift and go to state 57
    ISEMPTY         shift and go to state 58
    REVERSE         shift and go to state 59
    HEAD            shift and go to state 60
    TAIL            shift and go to state 61
    LENGTH          shift and go to state 62


state 42

    (11) declararConstante -> VAL ID . COLON tipoValueCons
    (12) declararConstante -> VAL ID . COLON tipo
    (13) declararConstante -> VAL ID . EQUAL valueCons
    (14) declararConstante -> VAL ID . EQUAL expression

    COLON           shift and go to state 63
    EQUAL           shift and go to state 64


state 43

    (107) for -> FOR LPAREN . ID LM ID RPAREN LBRACE cuerpo RBRACE

    ID              shift and go to state 65


state 44

    (82) funcionesPropias -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 66


state 45

    (83) funcionesPropias -> PRINTLN LPAREN . string RPAREN
    (84) funcionesPropias -> PRINTLN LPAREN . booleano RPAREN
    (85) funcionesPropias -> PRINTLN LPAREN . ID RPAREN
    (86) funcionesPropias -> PRINTLN LPAREN . expression RPAREN
    (119) string -> . STRING
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (92) expression -> . expression PLUS term
    (93) expression -> . expression MINUS term
    (94) expression -> . term
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    ID              shift and go to state 69
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    string                         shift and go to state 67
    booleano                       shift and go to state 68
    expression                     shift and go to state 70
    term                           shift and go to state 12
    factor                         shift and go to state 29
    int                            shift and go to state 31
    double                         shift and go to state 32

state 46

    (103) while -> WHILE LPAREN . whileclause RPAREN LBRACE cuerpo RBRACE
    (104) whileclause -> . comp
    (105) whileclause -> . ID
    (106) whileclause -> . booleano
    (101) comp -> . factor comparacion factor
    (102) comp -> . comparacionesVar
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (115) factor -> . int
    (116) factor -> . double
    (108) comparacionesVar -> . ID DOT EQUALS LPAREN ID RPAREN
    (109) comparacionesVar -> . ID DOT EQ LPAREN ID RPAREN
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    ID              shift and go to state 76
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    whileclause                    shift and go to state 74
    comp                           shift and go to state 75
    booleano                       shift and go to state 77
    factor                         shift and go to state 78
    comparacionesVar               shift and go to state 79
    int                            shift and go to state 31
    double                         shift and go to state 32

state 47

    (98) if -> IF LPAREN . factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    factor                         shift and go to state 80
    int                            shift and go to state 31
    double                         shift and go to state 32

state 48

    (92) expression -> expression PLUS term .
    (95) term -> term . TIMES factor
    (96) term -> term . DIVIDE factor

    PLUS            reduce using rule 92 (expression -> expression PLUS term .)
    MINUS           reduce using rule 92 (expression -> expression PLUS term .)
    $end            reduce using rule 92 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 92 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 92 (expression -> expression PLUS term .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38


state 49

    (93) expression -> expression MINUS term .
    (95) term -> term . TIMES factor
    (96) term -> term . DIVIDE factor

    PLUS            reduce using rule 93 (expression -> expression MINUS term .)
    MINUS           reduce using rule 93 (expression -> expression MINUS term .)
    $end            reduce using rule 93 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 93 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 93 (expression -> expression MINUS term .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38


state 50

    (95) term -> term TIMES factor .

    TIMES           reduce using rule 95 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 95 (term -> term TIMES factor .)
    PLUS            reduce using rule 95 (term -> term TIMES factor .)
    MINUS           reduce using rule 95 (term -> term TIMES factor .)
    $end            reduce using rule 95 (term -> term TIMES factor .)
    RPAREN          reduce using rule 95 (term -> term TIMES factor .)
    RBRACE          reduce using rule 95 (term -> term TIMES factor .)


state 51

    (96) term -> term DIVIDE factor .

    TIMES           reduce using rule 96 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 96 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 96 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 96 (term -> term DIVIDE factor .)
    $end            reduce using rule 96 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 96 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 96 (term -> term DIVIDE factor .)


state 52

    (100) sentencia -> if ELSE LBRACE . cuerpo RBRACE
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (4) cuerpo -> . declararConstante
    (5) cuerpo -> . funcionesTupla
    (6) cuerpo -> . funcionesList
    (7) cuerpo -> . funcionesArray
    (8) cuerpo -> . for
    (9) cuerpo -> . funcionesPropias
    (10) cuerpo -> . while
    (92) expression -> . expression PLUS term
    (93) expression -> . expression MINUS term
    (94) expression -> . term
    (99) sentencia -> . if
    (100) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (15) declararVariable -> . VAR ID COLON tipoValue
    (16) declararVariable -> . VAR ID COLON tipo
    (17) declararVariable -> . VAR ID EQUAL value
    (18) declararVariable -> . VAR ID EQUAL expression
    (11) declararConstante -> . VAL ID COLON tipoValueCons
    (12) declararConstante -> . VAL ID COLON tipo
    (13) declararConstante -> . VAL ID EQUAL valueCons
    (14) declararConstante -> . VAL ID EQUAL expression
    (71) funcionesTupla -> . tuplaSwap
    (72) funcionesTupla -> . tuplaToString
    (73) funcionesTupla -> . tuplaProductIterator
    (80) funcionesList -> . listIsEmpty
    (81) funcionesList -> . listReverse
    (77) funcionesArray -> . arrayHead
    (78) funcionesArray -> . arrayTail
    (79) funcionesArray -> . arrayLength
    (107) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (82) funcionesPropias -> . INPUT LPAREN RPAREN
    (83) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (84) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (85) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (103) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (74) tuplaSwap -> . ID DOT SWAP
    (75) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (76) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (91) listIsEmpty -> . ID DOT ISEMPTY
    (90) listReverse -> . ID DOT REVERSE
    (87) arrayHead -> . ID DOT HEAD
    (88) arrayTail -> . ID DOT TAIL
    (89) arrayLength -> . ID DOT LENGTH
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 14
    VAL             shift and go to state 16
    FOR             shift and go to state 25
    INPUT           shift and go to state 26
    PRINTLN         shift and go to state 27
    WHILE           shift and go to state 28
    IF              shift and go to state 30
    ID              shift and go to state 15
    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    if                             shift and go to state 13
    cuerpo                         shift and go to state 81
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    declararConstante              shift and go to state 5
    funcionesTupla                 shift and go to state 6
    funcionesList                  shift and go to state 7
    funcionesArray                 shift and go to state 8
    for                            shift and go to state 9
    funcionesPropias               shift and go to state 10
    while                          shift and go to state 11
    term                           shift and go to state 12
    tuplaSwap                      shift and go to state 17
    tuplaToString                  shift and go to state 18
    tuplaProductIterator           shift and go to state 19
    listIsEmpty                    shift and go to state 20
    listReverse                    shift and go to state 21
    arrayHead                      shift and go to state 22
    arrayTail                      shift and go to state 23
    arrayLength                    shift and go to state 24
    factor                         shift and go to state 29
    int                            shift and go to state 31
    double                         shift and go to state 32

state 53

    (15) declararVariable -> VAR ID COLON . tipoValue
    (16) declararVariable -> VAR ID COLON . tipo
    (54) tipoValue -> . STRING_TYPE EQUAL string
    (55) tipoValue -> . BOOL EQUAL booleano
    (56) tipoValue -> . INT EQUAL int
    (57) tipoValue -> . DOUBLE EQUAL double
    (58) tipoValue -> . ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (59) tipoValue -> . ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (60) tipoValue -> . ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (61) tipoValue -> . ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (62) tipoValue -> . LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (63) tipoValue -> . LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (64) tipoValue -> . LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (65) tipoValue -> . LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (50) tipo -> . INT
    (51) tipo -> . DOUBLE
    (52) tipo -> . BOOL
    (53) tipo -> . STRING_TYPE

    STRING_TYPE     shift and go to state 84
    BOOL            shift and go to state 85
    INT             shift and go to state 86
    DOUBLE          shift and go to state 87
    ARRAY           shift and go to state 88
    LIST            shift and go to state 89

    tipoValue                      shift and go to state 82
    tipo                           shift and go to state 83

state 54

    (17) declararVariable -> VAR ID EQUAL . value
    (18) declararVariable -> VAR ID EQUAL . expression
    (19) value -> . string
    (20) value -> . booleano
    (21) value -> . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (22) value -> . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (23) value -> . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (24) value -> . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (25) value -> . ARRAY LPAREN elementosInternos RPAREN
    (26) value -> . LIST LPAREN elementosInternos RPAREN
    (92) expression -> . expression PLUS term
    (93) expression -> . expression MINUS term
    (94) expression -> . term
    (119) string -> . STRING
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    NEW             shift and go to state 94
    ARRAY           shift and go to state 95
    LIST            shift and go to state 96
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    value                          shift and go to state 90
    expression                     shift and go to state 91
    string                         shift and go to state 92
    booleano                       shift and go to state 93
    int                            shift and go to state 31
    term                           shift and go to state 12
    factor                         shift and go to state 29
    double                         shift and go to state 32

state 55

    (74) tuplaSwap -> ID DOT SWAP .

    $end            reduce using rule 74 (tuplaSwap -> ID DOT SWAP .)
    RBRACE          reduce using rule 74 (tuplaSwap -> ID DOT SWAP .)


state 56

    (75) tuplaToString -> ID DOT TOSTRING . LPAREN RPAREN

    LPAREN          shift and go to state 97


state 57

    (76) tuplaProductIterator -> ID DOT PRODUCTITERATOR .

    $end            reduce using rule 76 (tuplaProductIterator -> ID DOT PRODUCTITERATOR .)
    RBRACE          reduce using rule 76 (tuplaProductIterator -> ID DOT PRODUCTITERATOR .)


state 58

    (91) listIsEmpty -> ID DOT ISEMPTY .

    $end            reduce using rule 91 (listIsEmpty -> ID DOT ISEMPTY .)
    RBRACE          reduce using rule 91 (listIsEmpty -> ID DOT ISEMPTY .)


state 59

    (90) listReverse -> ID DOT REVERSE .

    $end            reduce using rule 90 (listReverse -> ID DOT REVERSE .)
    RBRACE          reduce using rule 90 (listReverse -> ID DOT REVERSE .)


state 60

    (87) arrayHead -> ID DOT HEAD .

    $end            reduce using rule 87 (arrayHead -> ID DOT HEAD .)
    RBRACE          reduce using rule 87 (arrayHead -> ID DOT HEAD .)


state 61

    (88) arrayTail -> ID DOT TAIL .

    $end            reduce using rule 88 (arrayTail -> ID DOT TAIL .)
    RBRACE          reduce using rule 88 (arrayTail -> ID DOT TAIL .)


state 62

    (89) arrayLength -> ID DOT LENGTH .

    $end            reduce using rule 89 (arrayLength -> ID DOT LENGTH .)
    RBRACE          reduce using rule 89 (arrayLength -> ID DOT LENGTH .)


state 63

    (11) declararConstante -> VAL ID COLON . tipoValueCons
    (12) declararConstante -> VAL ID COLON . tipo
    (66) tipoValueCons -> . STRING_TYPE EQUAL string
    (67) tipoValueCons -> . BOOL EQUAL booleano
    (68) tipoValueCons -> . INT EQUAL int
    (69) tipoValueCons -> . DOUBLE EQUAL double
    (50) tipo -> . INT
    (51) tipo -> . DOUBLE
    (52) tipo -> . BOOL
    (53) tipo -> . STRING_TYPE

    STRING_TYPE     shift and go to state 100
    BOOL            shift and go to state 101
    INT             shift and go to state 102
    DOUBLE          shift and go to state 103

    tipoValueCons                  shift and go to state 98
    tipo                           shift and go to state 99

state 64

    (13) declararConstante -> VAL ID EQUAL . valueCons
    (14) declararConstante -> VAL ID EQUAL . expression
    (47) valueCons -> . string
    (48) valueCons -> . booleano
    (49) valueCons -> . tupla
    (92) expression -> . expression PLUS term
    (93) expression -> . expression MINUS term
    (94) expression -> . term
    (119) string -> . STRING
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (70) tupla -> . LPAREN elementosInternos2 RPAREN
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    LPAREN          shift and go to state 109
    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    valueCons                      shift and go to state 104
    expression                     shift and go to state 105
    string                         shift and go to state 106
    booleano                       shift and go to state 107
    tupla                          shift and go to state 108
    term                           shift and go to state 12
    factor                         shift and go to state 29
    int                            shift and go to state 31
    double                         shift and go to state 32

state 65

    (107) for -> FOR LPAREN ID . LM ID RPAREN LBRACE cuerpo RBRACE

    LM              shift and go to state 110


state 66

    (82) funcionesPropias -> INPUT LPAREN RPAREN .

    $end            reduce using rule 82 (funcionesPropias -> INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 82 (funcionesPropias -> INPUT LPAREN RPAREN .)


state 67

    (83) funcionesPropias -> PRINTLN LPAREN string . RPAREN

    RPAREN          shift and go to state 111


state 68

    (84) funcionesPropias -> PRINTLN LPAREN booleano . RPAREN

    RPAREN          shift and go to state 112


state 69

    (85) funcionesPropias -> PRINTLN LPAREN ID . RPAREN

    RPAREN          shift and go to state 113


state 70

    (86) funcionesPropias -> PRINTLN LPAREN expression . RPAREN
    (92) expression -> expression . PLUS term
    (93) expression -> expression . MINUS term

    RPAREN          shift and go to state 114
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 71

    (119) string -> STRING .

    RPAREN          reduce using rule 119 (string -> STRING .)
    $end            reduce using rule 119 (string -> STRING .)
    RBRACE          reduce using rule 119 (string -> STRING .)
    COMMA           reduce using rule 119 (string -> STRING .)


state 72

    (117) booleano -> TRUE .

    RPAREN          reduce using rule 117 (booleano -> TRUE .)
    $end            reduce using rule 117 (booleano -> TRUE .)
    RBRACE          reduce using rule 117 (booleano -> TRUE .)
    COMMA           reduce using rule 117 (booleano -> TRUE .)


state 73

    (118) booleano -> FALSE .

    RPAREN          reduce using rule 118 (booleano -> FALSE .)
    $end            reduce using rule 118 (booleano -> FALSE .)
    RBRACE          reduce using rule 118 (booleano -> FALSE .)
    COMMA           reduce using rule 118 (booleano -> FALSE .)


state 74

    (103) while -> WHILE LPAREN whileclause . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 115


state 75

    (104) whileclause -> comp .

    RPAREN          reduce using rule 104 (whileclause -> comp .)


state 76

    (105) whileclause -> ID .
    (108) comparacionesVar -> ID . DOT EQUALS LPAREN ID RPAREN
    (109) comparacionesVar -> ID . DOT EQ LPAREN ID RPAREN

    RPAREN          reduce using rule 105 (whileclause -> ID .)
    DOT             shift and go to state 116


state 77

    (106) whileclause -> booleano .

    RPAREN          reduce using rule 106 (whileclause -> booleano .)


state 78

    (101) comp -> factor . comparacion factor
    (110) comparacion -> . GT
    (111) comparacion -> . GE
    (112) comparacion -> . LT
    (113) comparacion -> . LE
    (114) comparacion -> . EQUAL2

    GT              shift and go to state 118
    GE              shift and go to state 119
    LT              shift and go to state 120
    LE              shift and go to state 121
    EQUAL2          shift and go to state 122

    comparacion                    shift and go to state 117

state 79

    (102) comp -> comparacionesVar .

    RPAREN          reduce using rule 102 (comp -> comparacionesVar .)


state 80

    (98) if -> IF LPAREN factor . comparacion factor RPAREN LBRACE cuerpo RBRACE
    (110) comparacion -> . GT
    (111) comparacion -> . GE
    (112) comparacion -> . LT
    (113) comparacion -> . LE
    (114) comparacion -> . EQUAL2

    GT              shift and go to state 118
    GE              shift and go to state 119
    LT              shift and go to state 120
    LE              shift and go to state 121
    EQUAL2          shift and go to state 122

    comparacion                    shift and go to state 123

state 81

    (100) sentencia -> if ELSE LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 124


state 82

    (15) declararVariable -> VAR ID COLON tipoValue .

    $end            reduce using rule 15 (declararVariable -> VAR ID COLON tipoValue .)
    RBRACE          reduce using rule 15 (declararVariable -> VAR ID COLON tipoValue .)


state 83

    (16) declararVariable -> VAR ID COLON tipo .

    $end            reduce using rule 16 (declararVariable -> VAR ID COLON tipo .)
    RBRACE          reduce using rule 16 (declararVariable -> VAR ID COLON tipo .)


state 84

    (54) tipoValue -> STRING_TYPE . EQUAL string
    (53) tipo -> STRING_TYPE .

    EQUAL           shift and go to state 125
    $end            reduce using rule 53 (tipo -> STRING_TYPE .)
    RBRACE          reduce using rule 53 (tipo -> STRING_TYPE .)


state 85

    (55) tipoValue -> BOOL . EQUAL booleano
    (52) tipo -> BOOL .

    EQUAL           shift and go to state 126
    $end            reduce using rule 52 (tipo -> BOOL .)
    RBRACE          reduce using rule 52 (tipo -> BOOL .)


state 86

    (56) tipoValue -> INT . EQUAL int
    (50) tipo -> INT .

    EQUAL           shift and go to state 127
    $end            reduce using rule 50 (tipo -> INT .)
    RBRACE          reduce using rule 50 (tipo -> INT .)


state 87

    (57) tipoValue -> DOUBLE . EQUAL double
    (51) tipo -> DOUBLE .

    EQUAL           shift and go to state 128
    $end            reduce using rule 51 (tipo -> DOUBLE .)
    RBRACE          reduce using rule 51 (tipo -> DOUBLE .)


state 88

    (58) tipoValue -> ARRAY . LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (59) tipoValue -> ARRAY . LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (60) tipoValue -> ARRAY . LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (61) tipoValue -> ARRAY . LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 129


state 89

    (62) tipoValue -> LIST . LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (63) tipoValue -> LIST . LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (64) tipoValue -> LIST . LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (65) tipoValue -> LIST . LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    LBRACK          shift and go to state 130


state 90

    (17) declararVariable -> VAR ID EQUAL value .

    $end            reduce using rule 17 (declararVariable -> VAR ID EQUAL value .)
    RBRACE          reduce using rule 17 (declararVariable -> VAR ID EQUAL value .)


state 91

    (18) declararVariable -> VAR ID EQUAL expression .
    (92) expression -> expression . PLUS term
    (93) expression -> expression . MINUS term

    $end            reduce using rule 18 (declararVariable -> VAR ID EQUAL expression .)
    RBRACE          reduce using rule 18 (declararVariable -> VAR ID EQUAL expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 92

    (19) value -> string .

    $end            reduce using rule 19 (value -> string .)
    RBRACE          reduce using rule 19 (value -> string .)


state 93

    (20) value -> booleano .

    $end            reduce using rule 20 (value -> booleano .)
    RBRACE          reduce using rule 20 (value -> booleano .)


state 94

    (21) value -> NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (22) value -> NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (23) value -> NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (24) value -> NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 131


state 95

    (25) value -> ARRAY . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 132


state 96

    (26) value -> LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 133


state 97

    (75) tuplaToString -> ID DOT TOSTRING LPAREN . RPAREN

    RPAREN          shift and go to state 134


state 98

    (11) declararConstante -> VAL ID COLON tipoValueCons .

    $end            reduce using rule 11 (declararConstante -> VAL ID COLON tipoValueCons .)
    RBRACE          reduce using rule 11 (declararConstante -> VAL ID COLON tipoValueCons .)


state 99

    (12) declararConstante -> VAL ID COLON tipo .

    $end            reduce using rule 12 (declararConstante -> VAL ID COLON tipo .)
    RBRACE          reduce using rule 12 (declararConstante -> VAL ID COLON tipo .)


state 100

    (66) tipoValueCons -> STRING_TYPE . EQUAL string
    (53) tipo -> STRING_TYPE .

    EQUAL           shift and go to state 135
    $end            reduce using rule 53 (tipo -> STRING_TYPE .)
    RBRACE          reduce using rule 53 (tipo -> STRING_TYPE .)


state 101

    (67) tipoValueCons -> BOOL . EQUAL booleano
    (52) tipo -> BOOL .

    EQUAL           shift and go to state 136
    $end            reduce using rule 52 (tipo -> BOOL .)
    RBRACE          reduce using rule 52 (tipo -> BOOL .)


state 102

    (68) tipoValueCons -> INT . EQUAL int
    (50) tipo -> INT .

    EQUAL           shift and go to state 137
    $end            reduce using rule 50 (tipo -> INT .)
    RBRACE          reduce using rule 50 (tipo -> INT .)


state 103

    (69) tipoValueCons -> DOUBLE . EQUAL double
    (51) tipo -> DOUBLE .

    EQUAL           shift and go to state 138
    $end            reduce using rule 51 (tipo -> DOUBLE .)
    RBRACE          reduce using rule 51 (tipo -> DOUBLE .)


state 104

    (13) declararConstante -> VAL ID EQUAL valueCons .

    $end            reduce using rule 13 (declararConstante -> VAL ID EQUAL valueCons .)
    RBRACE          reduce using rule 13 (declararConstante -> VAL ID EQUAL valueCons .)


state 105

    (14) declararConstante -> VAL ID EQUAL expression .
    (92) expression -> expression . PLUS term
    (93) expression -> expression . MINUS term

    $end            reduce using rule 14 (declararConstante -> VAL ID EQUAL expression .)
    RBRACE          reduce using rule 14 (declararConstante -> VAL ID EQUAL expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 106

    (47) valueCons -> string .

    $end            reduce using rule 47 (valueCons -> string .)
    RBRACE          reduce using rule 47 (valueCons -> string .)


state 107

    (48) valueCons -> booleano .

    $end            reduce using rule 48 (valueCons -> booleano .)
    RBRACE          reduce using rule 48 (valueCons -> booleano .)


state 108

    (49) valueCons -> tupla .

    $end            reduce using rule 49 (valueCons -> tupla .)
    RBRACE          reduce using rule 49 (valueCons -> tupla .)


state 109

    (70) tupla -> LPAREN . elementosInternos2 RPAREN
    (39) elementosInternos2 -> . int
    (40) elementosInternos2 -> . double
    (41) elementosInternos2 -> . booleano
    (42) elementosInternos2 -> . string
    (43) elementosInternos2 -> . int COMMA elementosInternos2
    (44) elementosInternos2 -> . double COMMA elementosInternos2
    (45) elementosInternos2 -> . booleano COMMA elementosInternos2
    (46) elementosInternos2 -> . string COMMA elementosInternos2
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    elementosInternos2             shift and go to state 139
    int                            shift and go to state 140
    double                         shift and go to state 141
    booleano                       shift and go to state 142
    string                         shift and go to state 143

state 110

    (107) for -> FOR LPAREN ID LM . ID RPAREN LBRACE cuerpo RBRACE

    ID              shift and go to state 144


state 111

    (83) funcionesPropias -> PRINTLN LPAREN string RPAREN .

    $end            reduce using rule 83 (funcionesPropias -> PRINTLN LPAREN string RPAREN .)
    RBRACE          reduce using rule 83 (funcionesPropias -> PRINTLN LPAREN string RPAREN .)


state 112

    (84) funcionesPropias -> PRINTLN LPAREN booleano RPAREN .

    $end            reduce using rule 84 (funcionesPropias -> PRINTLN LPAREN booleano RPAREN .)
    RBRACE          reduce using rule 84 (funcionesPropias -> PRINTLN LPAREN booleano RPAREN .)


state 113

    (85) funcionesPropias -> PRINTLN LPAREN ID RPAREN .

    $end            reduce using rule 85 (funcionesPropias -> PRINTLN LPAREN ID RPAREN .)
    RBRACE          reduce using rule 85 (funcionesPropias -> PRINTLN LPAREN ID RPAREN .)


state 114

    (86) funcionesPropias -> PRINTLN LPAREN expression RPAREN .

    $end            reduce using rule 86 (funcionesPropias -> PRINTLN LPAREN expression RPAREN .)
    RBRACE          reduce using rule 86 (funcionesPropias -> PRINTLN LPAREN expression RPAREN .)


state 115

    (103) while -> WHILE LPAREN whileclause RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 145


state 116

    (108) comparacionesVar -> ID DOT . EQUALS LPAREN ID RPAREN
    (109) comparacionesVar -> ID DOT . EQ LPAREN ID RPAREN

    EQUALS          shift and go to state 146
    EQ              shift and go to state 147


state 117

    (101) comp -> factor comparacion . factor
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    factor                         shift and go to state 148
    int                            shift and go to state 31
    double                         shift and go to state 32

state 118

    (110) comparacion -> GT .

    INT_NUMBER      reduce using rule 110 (comparacion -> GT .)
    DOUBLE_NUMBER   reduce using rule 110 (comparacion -> GT .)


state 119

    (111) comparacion -> GE .

    INT_NUMBER      reduce using rule 111 (comparacion -> GE .)
    DOUBLE_NUMBER   reduce using rule 111 (comparacion -> GE .)


state 120

    (112) comparacion -> LT .

    INT_NUMBER      reduce using rule 112 (comparacion -> LT .)
    DOUBLE_NUMBER   reduce using rule 112 (comparacion -> LT .)


state 121

    (113) comparacion -> LE .

    INT_NUMBER      reduce using rule 113 (comparacion -> LE .)
    DOUBLE_NUMBER   reduce using rule 113 (comparacion -> LE .)


state 122

    (114) comparacion -> EQUAL2 .

    INT_NUMBER      reduce using rule 114 (comparacion -> EQUAL2 .)
    DOUBLE_NUMBER   reduce using rule 114 (comparacion -> EQUAL2 .)


state 123

    (98) if -> IF LPAREN factor comparacion . factor RPAREN LBRACE cuerpo RBRACE
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    factor                         shift and go to state 149
    int                            shift and go to state 31
    double                         shift and go to state 32

state 124

    (100) sentencia -> if ELSE LBRACE cuerpo RBRACE .

    $end            reduce using rule 100 (sentencia -> if ELSE LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 100 (sentencia -> if ELSE LBRACE cuerpo RBRACE .)


state 125

    (54) tipoValue -> STRING_TYPE EQUAL . string
    (119) string -> . STRING

    STRING          shift and go to state 71

    string                         shift and go to state 150

state 126

    (55) tipoValue -> BOOL EQUAL . booleano
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE

    TRUE            shift and go to state 72
    FALSE           shift and go to state 73

    booleano                       shift and go to state 151

state 127

    (56) tipoValue -> INT EQUAL . int
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 152

state 128

    (57) tipoValue -> DOUBLE EQUAL . double
    (120) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 34

    double                         shift and go to state 153

state 129

    (58) tipoValue -> ARRAY LBRACK . INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (59) tipoValue -> ARRAY LBRACK . DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (60) tipoValue -> ARRAY LBRACK . BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (61) tipoValue -> ARRAY LBRACK . STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    INT             shift and go to state 154
    DOUBLE          shift and go to state 155
    BOOL            shift and go to state 156
    STRING_TYPE     shift and go to state 157


state 130

    (62) tipoValue -> LIST LBRACK . INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (63) tipoValue -> LIST LBRACK . DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (64) tipoValue -> LIST LBRACK . BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (65) tipoValue -> LIST LBRACK . STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    INT             shift and go to state 158
    DOUBLE          shift and go to state 159
    BOOL            shift and go to state 160
    STRING_TYPE     shift and go to state 161


state 131

    (21) value -> NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN
    (22) value -> NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (23) value -> NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN
    (24) value -> NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 162


state 132

    (25) value -> ARRAY LPAREN . elementosInternos RPAREN
    (27) elementosInternos -> . elementosInternosInt
    (28) elementosInternos -> . elementosInternosDouble
    (29) elementosInternos -> . elementosInternosBool
    (30) elementosInternos -> . elementosInternosString
    (31) elementosInternosInt -> . int
    (32) elementosInternosInt -> . int COMMA elementosInternosInt
    (33) elementosInternosDouble -> . double
    (34) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (35) elementosInternosBool -> . booleano
    (36) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (37) elementosInternosString -> . string
    (38) elementosInternosString -> . string COMMA elementosInternosString
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    elementosInternos              shift and go to state 163
    elementosInternosInt           shift and go to state 164
    elementosInternosDouble        shift and go to state 165
    elementosInternosBool          shift and go to state 166
    elementosInternosString        shift and go to state 167
    int                            shift and go to state 168
    double                         shift and go to state 169
    booleano                       shift and go to state 170
    string                         shift and go to state 171

state 133

    (26) value -> LIST LPAREN . elementosInternos RPAREN
    (27) elementosInternos -> . elementosInternosInt
    (28) elementosInternos -> . elementosInternosDouble
    (29) elementosInternos -> . elementosInternosBool
    (30) elementosInternos -> . elementosInternosString
    (31) elementosInternosInt -> . int
    (32) elementosInternosInt -> . int COMMA elementosInternosInt
    (33) elementosInternosDouble -> . double
    (34) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (35) elementosInternosBool -> . booleano
    (36) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (37) elementosInternosString -> . string
    (38) elementosInternosString -> . string COMMA elementosInternosString
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    elementosInternos              shift and go to state 172
    elementosInternosInt           shift and go to state 164
    elementosInternosDouble        shift and go to state 165
    elementosInternosBool          shift and go to state 166
    elementosInternosString        shift and go to state 167
    int                            shift and go to state 168
    double                         shift and go to state 169
    booleano                       shift and go to state 170
    string                         shift and go to state 171

state 134

    (75) tuplaToString -> ID DOT TOSTRING LPAREN RPAREN .

    $end            reduce using rule 75 (tuplaToString -> ID DOT TOSTRING LPAREN RPAREN .)
    RBRACE          reduce using rule 75 (tuplaToString -> ID DOT TOSTRING LPAREN RPAREN .)


state 135

    (66) tipoValueCons -> STRING_TYPE EQUAL . string
    (119) string -> . STRING

    STRING          shift and go to state 71

    string                         shift and go to state 173

state 136

    (67) tipoValueCons -> BOOL EQUAL . booleano
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE

    TRUE            shift and go to state 72
    FALSE           shift and go to state 73

    booleano                       shift and go to state 174

state 137

    (68) tipoValueCons -> INT EQUAL . int
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 175

state 138

    (69) tipoValueCons -> DOUBLE EQUAL . double
    (120) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 34

    double                         shift and go to state 176

state 139

    (70) tupla -> LPAREN elementosInternos2 . RPAREN

    RPAREN          shift and go to state 177


state 140

    (39) elementosInternos2 -> int .
    (43) elementosInternos2 -> int . COMMA elementosInternos2

    RPAREN          reduce using rule 39 (elementosInternos2 -> int .)
    COMMA           shift and go to state 178


state 141

    (40) elementosInternos2 -> double .
    (44) elementosInternos2 -> double . COMMA elementosInternos2

    RPAREN          reduce using rule 40 (elementosInternos2 -> double .)
    COMMA           shift and go to state 179


state 142

    (41) elementosInternos2 -> booleano .
    (45) elementosInternos2 -> booleano . COMMA elementosInternos2

    RPAREN          reduce using rule 41 (elementosInternos2 -> booleano .)
    COMMA           shift and go to state 180


state 143

    (42) elementosInternos2 -> string .
    (46) elementosInternos2 -> string . COMMA elementosInternos2

    RPAREN          reduce using rule 42 (elementosInternos2 -> string .)
    COMMA           shift and go to state 181


state 144

    (107) for -> FOR LPAREN ID LM ID . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 182


state 145

    (103) while -> WHILE LPAREN whileclause RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (4) cuerpo -> . declararConstante
    (5) cuerpo -> . funcionesTupla
    (6) cuerpo -> . funcionesList
    (7) cuerpo -> . funcionesArray
    (8) cuerpo -> . for
    (9) cuerpo -> . funcionesPropias
    (10) cuerpo -> . while
    (92) expression -> . expression PLUS term
    (93) expression -> . expression MINUS term
    (94) expression -> . term
    (99) sentencia -> . if
    (100) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (15) declararVariable -> . VAR ID COLON tipoValue
    (16) declararVariable -> . VAR ID COLON tipo
    (17) declararVariable -> . VAR ID EQUAL value
    (18) declararVariable -> . VAR ID EQUAL expression
    (11) declararConstante -> . VAL ID COLON tipoValueCons
    (12) declararConstante -> . VAL ID COLON tipo
    (13) declararConstante -> . VAL ID EQUAL valueCons
    (14) declararConstante -> . VAL ID EQUAL expression
    (71) funcionesTupla -> . tuplaSwap
    (72) funcionesTupla -> . tuplaToString
    (73) funcionesTupla -> . tuplaProductIterator
    (80) funcionesList -> . listIsEmpty
    (81) funcionesList -> . listReverse
    (77) funcionesArray -> . arrayHead
    (78) funcionesArray -> . arrayTail
    (79) funcionesArray -> . arrayLength
    (107) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (82) funcionesPropias -> . INPUT LPAREN RPAREN
    (83) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (84) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (85) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (103) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (74) tuplaSwap -> . ID DOT SWAP
    (75) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (76) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (91) listIsEmpty -> . ID DOT ISEMPTY
    (90) listReverse -> . ID DOT REVERSE
    (87) arrayHead -> . ID DOT HEAD
    (88) arrayTail -> . ID DOT TAIL
    (89) arrayLength -> . ID DOT LENGTH
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 14
    VAL             shift and go to state 16
    FOR             shift and go to state 25
    INPUT           shift and go to state 26
    PRINTLN         shift and go to state 27
    WHILE           shift and go to state 28
    IF              shift and go to state 30
    ID              shift and go to state 15
    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    cuerpo                         shift and go to state 183
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    declararConstante              shift and go to state 5
    funcionesTupla                 shift and go to state 6
    funcionesList                  shift and go to state 7
    funcionesArray                 shift and go to state 8
    for                            shift and go to state 9
    funcionesPropias               shift and go to state 10
    while                          shift and go to state 11
    term                           shift and go to state 12
    if                             shift and go to state 13
    tuplaSwap                      shift and go to state 17
    tuplaToString                  shift and go to state 18
    tuplaProductIterator           shift and go to state 19
    listIsEmpty                    shift and go to state 20
    listReverse                    shift and go to state 21
    arrayHead                      shift and go to state 22
    arrayTail                      shift and go to state 23
    arrayLength                    shift and go to state 24
    factor                         shift and go to state 29
    int                            shift and go to state 31
    double                         shift and go to state 32

state 146

    (108) comparacionesVar -> ID DOT EQUALS . LPAREN ID RPAREN

    LPAREN          shift and go to state 184


state 147

    (109) comparacionesVar -> ID DOT EQ . LPAREN ID RPAREN

    LPAREN          shift and go to state 185


state 148

    (101) comp -> factor comparacion factor .

    RPAREN          reduce using rule 101 (comp -> factor comparacion factor .)


state 149

    (98) if -> IF LPAREN factor comparacion factor . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 186


state 150

    (54) tipoValue -> STRING_TYPE EQUAL string .

    $end            reduce using rule 54 (tipoValue -> STRING_TYPE EQUAL string .)
    RBRACE          reduce using rule 54 (tipoValue -> STRING_TYPE EQUAL string .)


state 151

    (55) tipoValue -> BOOL EQUAL booleano .

    $end            reduce using rule 55 (tipoValue -> BOOL EQUAL booleano .)
    RBRACE          reduce using rule 55 (tipoValue -> BOOL EQUAL booleano .)


state 152

    (56) tipoValue -> INT EQUAL int .

    $end            reduce using rule 56 (tipoValue -> INT EQUAL int .)
    RBRACE          reduce using rule 56 (tipoValue -> INT EQUAL int .)


state 153

    (57) tipoValue -> DOUBLE EQUAL double .

    $end            reduce using rule 57 (tipoValue -> DOUBLE EQUAL double .)
    RBRACE          reduce using rule 57 (tipoValue -> DOUBLE EQUAL double .)


state 154

    (58) tipoValue -> ARRAY LBRACK INT . RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 187


state 155

    (59) tipoValue -> ARRAY LBRACK DOUBLE . RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 188


state 156

    (60) tipoValue -> ARRAY LBRACK BOOL . RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 189


state 157

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE . RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 190


state 158

    (62) tipoValue -> LIST LBRACK INT . RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    RBRACK          shift and go to state 191


state 159

    (63) tipoValue -> LIST LBRACK DOUBLE . RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    RBRACK          shift and go to state 192


state 160

    (64) tipoValue -> LIST LBRACK BOOL . RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    RBRACK          shift and go to state 193


state 161

    (65) tipoValue -> LIST LBRACK STRING_TYPE . RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    RBRACK          shift and go to state 194


state 162

    (21) value -> NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN
    (22) value -> NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN
    (23) value -> NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN
    (24) value -> NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN

    INT             shift and go to state 195
    DOUBLE          shift and go to state 196
    BOOL            shift and go to state 197
    STRING_TYPE     shift and go to state 198


state 163

    (25) value -> ARRAY LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 199


state 164

    (27) elementosInternos -> elementosInternosInt .

    RPAREN          reduce using rule 27 (elementosInternos -> elementosInternosInt .)


state 165

    (28) elementosInternos -> elementosInternosDouble .

    RPAREN          reduce using rule 28 (elementosInternos -> elementosInternosDouble .)


state 166

    (29) elementosInternos -> elementosInternosBool .

    RPAREN          reduce using rule 29 (elementosInternos -> elementosInternosBool .)


state 167

    (30) elementosInternos -> elementosInternosString .

    RPAREN          reduce using rule 30 (elementosInternos -> elementosInternosString .)


state 168

    (31) elementosInternosInt -> int .
    (32) elementosInternosInt -> int . COMMA elementosInternosInt

    RPAREN          reduce using rule 31 (elementosInternosInt -> int .)
    COMMA           shift and go to state 200


state 169

    (33) elementosInternosDouble -> double .
    (34) elementosInternosDouble -> double . COMMA elementosInternosDouble

    RPAREN          reduce using rule 33 (elementosInternosDouble -> double .)
    COMMA           shift and go to state 201


state 170

    (35) elementosInternosBool -> booleano .
    (36) elementosInternosBool -> booleano . COMMA elementosInternosBool

    RPAREN          reduce using rule 35 (elementosInternosBool -> booleano .)
    COMMA           shift and go to state 202


state 171

    (37) elementosInternosString -> string .
    (38) elementosInternosString -> string . COMMA elementosInternosString

    RPAREN          reduce using rule 37 (elementosInternosString -> string .)
    COMMA           shift and go to state 203


state 172

    (26) value -> LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 204


state 173

    (66) tipoValueCons -> STRING_TYPE EQUAL string .

    $end            reduce using rule 66 (tipoValueCons -> STRING_TYPE EQUAL string .)
    RBRACE          reduce using rule 66 (tipoValueCons -> STRING_TYPE EQUAL string .)


state 174

    (67) tipoValueCons -> BOOL EQUAL booleano .

    $end            reduce using rule 67 (tipoValueCons -> BOOL EQUAL booleano .)
    RBRACE          reduce using rule 67 (tipoValueCons -> BOOL EQUAL booleano .)


state 175

    (68) tipoValueCons -> INT EQUAL int .

    $end            reduce using rule 68 (tipoValueCons -> INT EQUAL int .)
    RBRACE          reduce using rule 68 (tipoValueCons -> INT EQUAL int .)


state 176

    (69) tipoValueCons -> DOUBLE EQUAL double .

    $end            reduce using rule 69 (tipoValueCons -> DOUBLE EQUAL double .)
    RBRACE          reduce using rule 69 (tipoValueCons -> DOUBLE EQUAL double .)


state 177

    (70) tupla -> LPAREN elementosInternos2 RPAREN .

    $end            reduce using rule 70 (tupla -> LPAREN elementosInternos2 RPAREN .)
    RBRACE          reduce using rule 70 (tupla -> LPAREN elementosInternos2 RPAREN .)


state 178

    (43) elementosInternos2 -> int COMMA . elementosInternos2
    (39) elementosInternos2 -> . int
    (40) elementosInternos2 -> . double
    (41) elementosInternos2 -> . booleano
    (42) elementosInternos2 -> . string
    (43) elementosInternos2 -> . int COMMA elementosInternos2
    (44) elementosInternos2 -> . double COMMA elementosInternos2
    (45) elementosInternos2 -> . booleano COMMA elementosInternos2
    (46) elementosInternos2 -> . string COMMA elementosInternos2
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    int                            shift and go to state 140
    elementosInternos2             shift and go to state 205
    double                         shift and go to state 141
    booleano                       shift and go to state 142
    string                         shift and go to state 143

state 179

    (44) elementosInternos2 -> double COMMA . elementosInternos2
    (39) elementosInternos2 -> . int
    (40) elementosInternos2 -> . double
    (41) elementosInternos2 -> . booleano
    (42) elementosInternos2 -> . string
    (43) elementosInternos2 -> . int COMMA elementosInternos2
    (44) elementosInternos2 -> . double COMMA elementosInternos2
    (45) elementosInternos2 -> . booleano COMMA elementosInternos2
    (46) elementosInternos2 -> . string COMMA elementosInternos2
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    double                         shift and go to state 141
    elementosInternos2             shift and go to state 206
    int                            shift and go to state 140
    booleano                       shift and go to state 142
    string                         shift and go to state 143

state 180

    (45) elementosInternos2 -> booleano COMMA . elementosInternos2
    (39) elementosInternos2 -> . int
    (40) elementosInternos2 -> . double
    (41) elementosInternos2 -> . booleano
    (42) elementosInternos2 -> . string
    (43) elementosInternos2 -> . int COMMA elementosInternos2
    (44) elementosInternos2 -> . double COMMA elementosInternos2
    (45) elementosInternos2 -> . booleano COMMA elementosInternos2
    (46) elementosInternos2 -> . string COMMA elementosInternos2
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    booleano                       shift and go to state 142
    elementosInternos2             shift and go to state 207
    int                            shift and go to state 140
    double                         shift and go to state 141
    string                         shift and go to state 143

state 181

    (46) elementosInternos2 -> string COMMA . elementosInternos2
    (39) elementosInternos2 -> . int
    (40) elementosInternos2 -> . double
    (41) elementosInternos2 -> . booleano
    (42) elementosInternos2 -> . string
    (43) elementosInternos2 -> . int COMMA elementosInternos2
    (44) elementosInternos2 -> . double COMMA elementosInternos2
    (45) elementosInternos2 -> . booleano COMMA elementosInternos2
    (46) elementosInternos2 -> . string COMMA elementosInternos2
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    string                         shift and go to state 143
    elementosInternos2             shift and go to state 208
    int                            shift and go to state 140
    double                         shift and go to state 141
    booleano                       shift and go to state 142

state 182

    (107) for -> FOR LPAREN ID LM ID RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 209


state 183

    (103) while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 210


state 184

    (108) comparacionesVar -> ID DOT EQUALS LPAREN . ID RPAREN

    ID              shift and go to state 211


state 185

    (109) comparacionesVar -> ID DOT EQ LPAREN . ID RPAREN

    ID              shift and go to state 212


state 186

    (98) if -> IF LPAREN factor comparacion factor RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 213


state 187

    (58) tipoValue -> ARRAY LBRACK INT RBRACK . EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 214


state 188

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK . EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 215


state 189

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK . EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 216


state 190

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK . EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 217


state 191

    (62) tipoValue -> LIST LBRACK INT RBRACK . EQUAL LIST LPAREN elementosInternos RPAREN

    EQUAL           shift and go to state 218


state 192

    (63) tipoValue -> LIST LBRACK DOUBLE RBRACK . EQUAL LIST LPAREN elementosInternos RPAREN

    EQUAL           shift and go to state 219


state 193

    (64) tipoValue -> LIST LBRACK BOOL RBRACK . EQUAL LIST LPAREN elementosInternos RPAREN

    EQUAL           shift and go to state 220


state 194

    (65) tipoValue -> LIST LBRACK STRING_TYPE RBRACK . EQUAL LIST LPAREN elementosInternos RPAREN

    EQUAL           shift and go to state 221


state 195

    (21) value -> NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 222


state 196

    (22) value -> NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 223


state 197

    (23) value -> NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 224


state 198

    (24) value -> NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 225


state 199

    (25) value -> ARRAY LPAREN elementosInternos RPAREN .

    $end            reduce using rule 25 (value -> ARRAY LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 25 (value -> ARRAY LPAREN elementosInternos RPAREN .)


state 200

    (32) elementosInternosInt -> int COMMA . elementosInternosInt
    (31) elementosInternosInt -> . int
    (32) elementosInternosInt -> . int COMMA elementosInternosInt
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 168
    elementosInternosInt           shift and go to state 226

state 201

    (34) elementosInternosDouble -> double COMMA . elementosInternosDouble
    (33) elementosInternosDouble -> . double
    (34) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (120) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 34

    double                         shift and go to state 169
    elementosInternosDouble        shift and go to state 227

state 202

    (36) elementosInternosBool -> booleano COMMA . elementosInternosBool
    (35) elementosInternosBool -> . booleano
    (36) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE

    TRUE            shift and go to state 72
    FALSE           shift and go to state 73

    booleano                       shift and go to state 170
    elementosInternosBool          shift and go to state 228

state 203

    (38) elementosInternosString -> string COMMA . elementosInternosString
    (37) elementosInternosString -> . string
    (38) elementosInternosString -> . string COMMA elementosInternosString
    (119) string -> . STRING

    STRING          shift and go to state 71

    string                         shift and go to state 171
    elementosInternosString        shift and go to state 229

state 204

    (26) value -> LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 26 (value -> LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 26 (value -> LIST LPAREN elementosInternos RPAREN .)


state 205

    (43) elementosInternos2 -> int COMMA elementosInternos2 .

    RPAREN          reduce using rule 43 (elementosInternos2 -> int COMMA elementosInternos2 .)


state 206

    (44) elementosInternos2 -> double COMMA elementosInternos2 .

    RPAREN          reduce using rule 44 (elementosInternos2 -> double COMMA elementosInternos2 .)


state 207

    (45) elementosInternos2 -> booleano COMMA elementosInternos2 .

    RPAREN          reduce using rule 45 (elementosInternos2 -> booleano COMMA elementosInternos2 .)


state 208

    (46) elementosInternos2 -> string COMMA elementosInternos2 .

    RPAREN          reduce using rule 46 (elementosInternos2 -> string COMMA elementosInternos2 .)


state 209

    (107) for -> FOR LPAREN ID LM ID RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (4) cuerpo -> . declararConstante
    (5) cuerpo -> . funcionesTupla
    (6) cuerpo -> . funcionesList
    (7) cuerpo -> . funcionesArray
    (8) cuerpo -> . for
    (9) cuerpo -> . funcionesPropias
    (10) cuerpo -> . while
    (92) expression -> . expression PLUS term
    (93) expression -> . expression MINUS term
    (94) expression -> . term
    (99) sentencia -> . if
    (100) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (15) declararVariable -> . VAR ID COLON tipoValue
    (16) declararVariable -> . VAR ID COLON tipo
    (17) declararVariable -> . VAR ID EQUAL value
    (18) declararVariable -> . VAR ID EQUAL expression
    (11) declararConstante -> . VAL ID COLON tipoValueCons
    (12) declararConstante -> . VAL ID COLON tipo
    (13) declararConstante -> . VAL ID EQUAL valueCons
    (14) declararConstante -> . VAL ID EQUAL expression
    (71) funcionesTupla -> . tuplaSwap
    (72) funcionesTupla -> . tuplaToString
    (73) funcionesTupla -> . tuplaProductIterator
    (80) funcionesList -> . listIsEmpty
    (81) funcionesList -> . listReverse
    (77) funcionesArray -> . arrayHead
    (78) funcionesArray -> . arrayTail
    (79) funcionesArray -> . arrayLength
    (107) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (82) funcionesPropias -> . INPUT LPAREN RPAREN
    (83) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (84) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (85) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (103) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (74) tuplaSwap -> . ID DOT SWAP
    (75) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (76) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (91) listIsEmpty -> . ID DOT ISEMPTY
    (90) listReverse -> . ID DOT REVERSE
    (87) arrayHead -> . ID DOT HEAD
    (88) arrayTail -> . ID DOT TAIL
    (89) arrayLength -> . ID DOT LENGTH
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 14
    VAL             shift and go to state 16
    FOR             shift and go to state 25
    INPUT           shift and go to state 26
    PRINTLN         shift and go to state 27
    WHILE           shift and go to state 28
    IF              shift and go to state 30
    ID              shift and go to state 15
    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    cuerpo                         shift and go to state 230
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    declararConstante              shift and go to state 5
    funcionesTupla                 shift and go to state 6
    funcionesList                  shift and go to state 7
    funcionesArray                 shift and go to state 8
    for                            shift and go to state 9
    funcionesPropias               shift and go to state 10
    while                          shift and go to state 11
    term                           shift and go to state 12
    if                             shift and go to state 13
    tuplaSwap                      shift and go to state 17
    tuplaToString                  shift and go to state 18
    tuplaProductIterator           shift and go to state 19
    listIsEmpty                    shift and go to state 20
    listReverse                    shift and go to state 21
    arrayHead                      shift and go to state 22
    arrayTail                      shift and go to state 23
    arrayLength                    shift and go to state 24
    factor                         shift and go to state 29
    int                            shift and go to state 31
    double                         shift and go to state 32

state 210

    (103) while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE .

    $end            reduce using rule 103 (while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 103 (while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE .)


state 211

    (108) comparacionesVar -> ID DOT EQUALS LPAREN ID . RPAREN

    RPAREN          shift and go to state 231


state 212

    (109) comparacionesVar -> ID DOT EQ LPAREN ID . RPAREN

    RPAREN          shift and go to state 232


state 213

    (98) if -> IF LPAREN factor comparacion factor RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (4) cuerpo -> . declararConstante
    (5) cuerpo -> . funcionesTupla
    (6) cuerpo -> . funcionesList
    (7) cuerpo -> . funcionesArray
    (8) cuerpo -> . for
    (9) cuerpo -> . funcionesPropias
    (10) cuerpo -> . while
    (92) expression -> . expression PLUS term
    (93) expression -> . expression MINUS term
    (94) expression -> . term
    (99) sentencia -> . if
    (100) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (15) declararVariable -> . VAR ID COLON tipoValue
    (16) declararVariable -> . VAR ID COLON tipo
    (17) declararVariable -> . VAR ID EQUAL value
    (18) declararVariable -> . VAR ID EQUAL expression
    (11) declararConstante -> . VAL ID COLON tipoValueCons
    (12) declararConstante -> . VAL ID COLON tipo
    (13) declararConstante -> . VAL ID EQUAL valueCons
    (14) declararConstante -> . VAL ID EQUAL expression
    (71) funcionesTupla -> . tuplaSwap
    (72) funcionesTupla -> . tuplaToString
    (73) funcionesTupla -> . tuplaProductIterator
    (80) funcionesList -> . listIsEmpty
    (81) funcionesList -> . listReverse
    (77) funcionesArray -> . arrayHead
    (78) funcionesArray -> . arrayTail
    (79) funcionesArray -> . arrayLength
    (107) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (82) funcionesPropias -> . INPUT LPAREN RPAREN
    (83) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (84) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (85) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (103) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (95) term -> . term TIMES factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (74) tuplaSwap -> . ID DOT SWAP
    (75) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (76) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (91) listIsEmpty -> . ID DOT ISEMPTY
    (90) listReverse -> . ID DOT REVERSE
    (87) arrayHead -> . ID DOT HEAD
    (88) arrayTail -> . ID DOT TAIL
    (89) arrayLength -> . ID DOT LENGTH
    (115) factor -> . int
    (116) factor -> . double
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 14
    VAL             shift and go to state 16
    FOR             shift and go to state 25
    INPUT           shift and go to state 26
    PRINTLN         shift and go to state 27
    WHILE           shift and go to state 28
    IF              shift and go to state 30
    ID              shift and go to state 15
    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34

    factor                         shift and go to state 29
    cuerpo                         shift and go to state 233
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    declararConstante              shift and go to state 5
    funcionesTupla                 shift and go to state 6
    funcionesList                  shift and go to state 7
    funcionesArray                 shift and go to state 8
    for                            shift and go to state 9
    funcionesPropias               shift and go to state 10
    while                          shift and go to state 11
    term                           shift and go to state 12
    if                             shift and go to state 13
    tuplaSwap                      shift and go to state 17
    tuplaToString                  shift and go to state 18
    tuplaProductIterator           shift and go to state 19
    listIsEmpty                    shift and go to state 20
    listReverse                    shift and go to state 21
    arrayHead                      shift and go to state 22
    arrayTail                      shift and go to state 23
    arrayLength                    shift and go to state 24
    int                            shift and go to state 31
    double                         shift and go to state 32

state 214

    (58) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    NEW             shift and go to state 234


state 215

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 235


state 216

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    NEW             shift and go to state 236


state 217

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 237


state 218

    (62) tipoValue -> LIST LBRACK INT RBRACK EQUAL . LIST LPAREN elementosInternos RPAREN

    LIST            shift and go to state 238


state 219

    (63) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL . LIST LPAREN elementosInternos RPAREN

    LIST            shift and go to state 239


state 220

    (64) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL . LIST LPAREN elementosInternos RPAREN

    LIST            shift and go to state 240


state 221

    (65) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL . LIST LPAREN elementosInternos RPAREN

    LIST            shift and go to state 241


state 222

    (21) value -> NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 242


state 223

    (22) value -> NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 243


state 224

    (23) value -> NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 244


state 225

    (24) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 245


state 226

    (32) elementosInternosInt -> int COMMA elementosInternosInt .

    RPAREN          reduce using rule 32 (elementosInternosInt -> int COMMA elementosInternosInt .)


state 227

    (34) elementosInternosDouble -> double COMMA elementosInternosDouble .

    RPAREN          reduce using rule 34 (elementosInternosDouble -> double COMMA elementosInternosDouble .)


state 228

    (36) elementosInternosBool -> booleano COMMA elementosInternosBool .

    RPAREN          reduce using rule 36 (elementosInternosBool -> booleano COMMA elementosInternosBool .)


state 229

    (38) elementosInternosString -> string COMMA elementosInternosString .

    RPAREN          reduce using rule 38 (elementosInternosString -> string COMMA elementosInternosString .)


state 230

    (107) for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 246


state 231

    (108) comparacionesVar -> ID DOT EQUALS LPAREN ID RPAREN .

    RPAREN          reduce using rule 108 (comparacionesVar -> ID DOT EQUALS LPAREN ID RPAREN .)


state 232

    (109) comparacionesVar -> ID DOT EQ LPAREN ID RPAREN .

    RPAREN          reduce using rule 109 (comparacionesVar -> ID DOT EQ LPAREN ID RPAREN .)


state 233

    (98) if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 247


state 234

    (58) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 248


state 235

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 249


state 236

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 250


state 237

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 251


state 238

    (62) tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 252


state 239

    (63) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 253


state 240

    (64) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 254


state 241

    (65) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 255


state 242

    (21) value -> NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 256

state 243

    (22) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 257

state 244

    (23) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 258

state 245

    (24) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 259

state 246

    (107) for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE .

    $end            reduce using rule 107 (for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 107 (for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE .)


state 247

    (98) if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 98 (if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 98 (if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 98 (if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE .)


state 248

    (58) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 260


state 249

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 261


state 250

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 262


state 251

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 263


state 252

    (62) tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN . elementosInternos RPAREN
    (27) elementosInternos -> . elementosInternosInt
    (28) elementosInternos -> . elementosInternosDouble
    (29) elementosInternos -> . elementosInternosBool
    (30) elementosInternos -> . elementosInternosString
    (31) elementosInternosInt -> . int
    (32) elementosInternosInt -> . int COMMA elementosInternosInt
    (33) elementosInternosDouble -> . double
    (34) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (35) elementosInternosBool -> . booleano
    (36) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (37) elementosInternosString -> . string
    (38) elementosInternosString -> . string COMMA elementosInternosString
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    elementosInternos              shift and go to state 264
    elementosInternosInt           shift and go to state 164
    elementosInternosDouble        shift and go to state 165
    elementosInternosBool          shift and go to state 166
    elementosInternosString        shift and go to state 167
    int                            shift and go to state 168
    double                         shift and go to state 169
    booleano                       shift and go to state 170
    string                         shift and go to state 171

state 253

    (63) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN . elementosInternos RPAREN
    (27) elementosInternos -> . elementosInternosInt
    (28) elementosInternos -> . elementosInternosDouble
    (29) elementosInternos -> . elementosInternosBool
    (30) elementosInternos -> . elementosInternosString
    (31) elementosInternosInt -> . int
    (32) elementosInternosInt -> . int COMMA elementosInternosInt
    (33) elementosInternosDouble -> . double
    (34) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (35) elementosInternosBool -> . booleano
    (36) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (37) elementosInternosString -> . string
    (38) elementosInternosString -> . string COMMA elementosInternosString
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    elementosInternos              shift and go to state 265
    elementosInternosInt           shift and go to state 164
    elementosInternosDouble        shift and go to state 165
    elementosInternosBool          shift and go to state 166
    elementosInternosString        shift and go to state 167
    int                            shift and go to state 168
    double                         shift and go to state 169
    booleano                       shift and go to state 170
    string                         shift and go to state 171

state 254

    (64) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN . elementosInternos RPAREN
    (27) elementosInternos -> . elementosInternosInt
    (28) elementosInternos -> . elementosInternosDouble
    (29) elementosInternos -> . elementosInternosBool
    (30) elementosInternos -> . elementosInternosString
    (31) elementosInternosInt -> . int
    (32) elementosInternosInt -> . int COMMA elementosInternosInt
    (33) elementosInternosDouble -> . double
    (34) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (35) elementosInternosBool -> . booleano
    (36) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (37) elementosInternosString -> . string
    (38) elementosInternosString -> . string COMMA elementosInternosString
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    elementosInternos              shift and go to state 266
    elementosInternosInt           shift and go to state 164
    elementosInternosDouble        shift and go to state 165
    elementosInternosBool          shift and go to state 166
    elementosInternosString        shift and go to state 167
    int                            shift and go to state 168
    double                         shift and go to state 169
    booleano                       shift and go to state 170
    string                         shift and go to state 171

state 255

    (65) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN . elementosInternos RPAREN
    (27) elementosInternos -> . elementosInternosInt
    (28) elementosInternos -> . elementosInternosDouble
    (29) elementosInternos -> . elementosInternosBool
    (30) elementosInternos -> . elementosInternosString
    (31) elementosInternosInt -> . int
    (32) elementosInternosInt -> . int COMMA elementosInternosInt
    (33) elementosInternosDouble -> . double
    (34) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (35) elementosInternosBool -> . booleano
    (36) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (37) elementosInternosString -> . string
    (38) elementosInternosString -> . string COMMA elementosInternosString
    (121) int -> . INT_NUMBER
    (120) double -> . DOUBLE_NUMBER
    (117) booleano -> . TRUE
    (118) booleano -> . FALSE
    (119) string -> . STRING

    INT_NUMBER      shift and go to state 33
    DOUBLE_NUMBER   shift and go to state 34
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    STRING          shift and go to state 71

    elementosInternos              shift and go to state 267
    elementosInternosInt           shift and go to state 164
    elementosInternosDouble        shift and go to state 165
    elementosInternosBool          shift and go to state 166
    elementosInternosString        shift and go to state 167
    int                            shift and go to state 168
    double                         shift and go to state 169
    booleano                       shift and go to state 170
    string                         shift and go to state 171

state 256

    (21) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 268


state 257

    (22) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 269


state 258

    (23) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 270


state 259

    (24) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 271


state 260

    (58) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN

    INT             shift and go to state 272


state 261

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN

    DOUBLE          shift and go to state 273


state 262

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN

    BOOL            shift and go to state 274


state 263

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN

    STRING_TYPE     shift and go to state 275


state 264

    (62) tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 276


state 265

    (63) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 277


state 266

    (64) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 278


state 267

    (65) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 279


state 268

    (21) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 21 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 21 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 269

    (22) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 22 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 22 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 270

    (23) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 23 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 23 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 271

    (24) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 24 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 24 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)


state 272

    (58) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 280


state 273

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 281


state 274

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 282


state 275

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 283


state 276

    (62) tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 62 (tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 62 (tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)


state 277

    (63) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 63 (tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 63 (tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)


state 278

    (64) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 64 (tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 64 (tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)


state 279

    (65) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 65 (tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 65 (tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)


state 280

    (58) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 284


state 281

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 285


state 282

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 286


state 283

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 287


state 284

    (58) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 288

state 285

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 289

state 286

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 290

state 287

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (121) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 33

    int                            shift and go to state 291

state 288

    (58) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 292


state 289

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 293


state 290

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 294


state 291

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 295


state 292

    (58) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 58 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 58 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 293

    (59) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 59 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 59 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 294

    (60) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 60 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 60 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 295

    (61) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 61 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 61 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)


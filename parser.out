Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> cuerpoP
Rule 1     cuerpoP -> cuerpo
Rule 2     cuerpoP -> defFunciones
Rule 3     cuerpo -> expression
Rule 4     cuerpo -> sentencia
Rule 5     cuerpo -> declararVariable
Rule 6     cuerpo -> declararConstante
Rule 7     cuerpo -> funcionesTupla
Rule 8     cuerpo -> funcionesList
Rule 9     cuerpo -> funcionesArray
Rule 10    cuerpo -> for
Rule 11    cuerpo -> funcionesPropias
Rule 12    cuerpo -> while
Rule 13    cuerpo -> funciones
Rule 14    declararConstante -> VAL ID COLON tipoValueCons
Rule 15    declararConstante -> VAL ID COLON tipo
Rule 16    declararConstante -> VAL ID EQUAL valueCons
Rule 17    declararConstante -> VAL ID EQUAL expression
Rule 18    declararVariable -> VAR ID COLON tipoValue
Rule 19    declararVariable -> VAR ID COLON tipo
Rule 20    declararVariable -> VAR ID EQUAL value
Rule 21    declararVariable -> VAR ID EQUAL expression
Rule 22    value -> string
Rule 23    value -> booleano
Rule 24    value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 25    value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 26    value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 27    value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 28    value -> ARRAY LPAREN elementosInternos RPAREN
Rule 29    value -> LIST LPAREN elementosInternos RPAREN
Rule 30    elementosInternos -> elementosInternosInt
Rule 31    elementosInternos -> elementosInternosDouble
Rule 32    elementosInternos -> elementosInternosBool
Rule 33    elementosInternos -> elementosInternosString
Rule 34    elementosInternosInt -> int
Rule 35    elementosInternosInt -> int COMMA elementosInternosInt
Rule 36    elementosInternosDouble -> double
Rule 37    elementosInternosDouble -> double COMMA elementosInternosDouble
Rule 38    elementosInternosBool -> booleano
Rule 39    elementosInternosBool -> booleano COMMA elementosInternosBool
Rule 40    elementosInternosString -> string
Rule 41    elementosInternosString -> string COMMA elementosInternosString
Rule 42    elementosInternos2 -> int
Rule 43    elementosInternos2 -> double
Rule 44    elementosInternos2 -> booleano
Rule 45    elementosInternos2 -> string
Rule 46    elementosInternos2 -> int COMMA elementosInternos2
Rule 47    elementosInternos2 -> double COMMA elementosInternos2
Rule 48    elementosInternos2 -> booleano COMMA elementosInternos2
Rule 49    elementosInternos2 -> string COMMA elementosInternos2
Rule 50    valueCons -> string
Rule 51    valueCons -> booleano
Rule 52    valueCons -> tupla
Rule 53    tipo -> INT
Rule 54    tipo -> DOUBLE
Rule 55    tipo -> BOOL
Rule 56    tipo -> STRING_TYPE
Rule 57    tipoValue -> STRING_TYPE EQUAL string
Rule 58    tipoValue -> BOOL EQUAL booleano
Rule 59    tipoValue -> INT EQUAL int
Rule 60    tipoValue -> DOUBLE EQUAL double
Rule 61    tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
Rule 62    tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
Rule 63    tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
Rule 64    tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
Rule 65    tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
Rule 66    tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
Rule 67    tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
Rule 68    tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
Rule 69    tipoValueCons -> STRING_TYPE EQUAL string
Rule 70    tipoValueCons -> BOOL EQUAL booleano
Rule 71    tipoValueCons -> INT EQUAL int
Rule 72    tipoValueCons -> DOUBLE EQUAL double
Rule 73    tupla -> LPAREN elementosInternos2 RPAREN
Rule 74    funcionesTupla -> tuplaSwap
Rule 75    funcionesTupla -> tuplaToString
Rule 76    funcionesTupla -> tuplaProductIterator
Rule 77    tuplaSwap -> ID DOT SWAP
Rule 78    tuplaToString -> ID DOT TOSTRING LPAREN RPAREN
Rule 79    tuplaProductIterator -> ID DOT PRODUCTITERATOR
Rule 80    funcionesArray -> arrayHead
Rule 81    funcionesArray -> arrayTail
Rule 82    funcionesArray -> arrayLength
Rule 83    funcionesList -> listIsEmpty
Rule 84    funcionesList -> listReverse
Rule 85    funcionesPropias -> INPUT LPAREN RPAREN
Rule 86    funcionesPropias -> PRINTLN LPAREN string RPAREN
Rule 87    funcionesPropias -> PRINTLN LPAREN booleano RPAREN
Rule 88    funcionesPropias -> PRINTLN LPAREN ID RPAREN
Rule 89    funcionesPropias -> PRINTLN LPAREN expression RPAREN
Rule 90    arrayHead -> ID DOT HEAD
Rule 91    arrayTail -> ID DOT TAIL
Rule 92    arrayLength -> ID DOT LENGTH
Rule 93    listReverse -> ID DOT REVERSE
Rule 94    listIsEmpty -> ID DOT ISEMPTY
Rule 95    expression -> expression PLUS term
Rule 96    expression -> expression MINUS term
Rule 97    expression -> term
Rule 98    term -> term TIMES factor
Rule 99    term -> term DIVIDE factor
Rule 100   term -> factor
Rule 101   if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
Rule 102   sentencia -> if
Rule 103   sentencia -> if ELSE LBRACE cuerpo RBRACE
Rule 104   comp -> factor comparacion factor
Rule 105   comp -> comparacionesVar
Rule 106   while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
Rule 107   whileclause -> comp
Rule 108   whileclause -> ID
Rule 109   whileclause -> booleano
Rule 110   for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
Rule 111   comparacionesVar -> ID DOT EQUALS LPAREN ID RPAREN
Rule 112   comparacionesVar -> ID DOT EQ LPAREN ID RPAREN
Rule 113   comparacion -> GT
Rule 114   comparacion -> GE
Rule 115   comparacion -> LT
Rule 116   comparacion -> LE
Rule 117   comparacion -> EQUAL2
Rule 118   defFunciones -> DEF ID LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
Rule 119   defFunciones -> DEF ID LPAREN RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
Rule 120   defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
Rule 121   defFunciones -> DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
Rule 122   funciones -> ID LPAREN RPAREN
Rule 123   funciones -> ID LPAREN argumentos RPAREN
Rule 124   parametros -> ID COLON tipo
Rule 125   parametros -> ID COLON tipo COMMA parametros
Rule 126   argumentos -> int
Rule 127   argumentos -> double
Rule 128   argumentos -> booleano
Rule 129   argumentos -> string
Rule 130   argumentos -> int COMMA argumentos
Rule 131   argumentos -> double COMMA argumentos
Rule 132   argumentos -> booleano COMMA argumentos
Rule 133   argumentos -> string COMMA argumentos
Rule 134   factor -> int
Rule 135   factor -> double
Rule 136   booleano -> TRUE
Rule 137   booleano -> FALSE
Rule 138   string -> STRING
Rule 139   double -> DOUBLE_NUMBER
Rule 140   int -> INT_NUMBER

Terminals, with rules where they appear

ARRAY                : 24 25 26 27 28 61 61 62 62 63 63 64 64
BOOL                 : 26 55 58 63 63 67 70
COLON                : 14 15 18 19 118 119 120 121 124 125
COMMA                : 35 37 39 41 46 47 48 49 125 130 131 132 133
DEF                  : 118 119 120 121
DIVIDE               : 99
DOT                  : 77 78 79 90 91 92 93 94 111 112
DOUBLE               : 25 54 60 62 62 66 72
DOUBLE_NUMBER        : 139
ELSE                 : 103
EQ                   : 112
EQUAL                : 16 17 20 21 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 118 119 120 121
EQUAL2               : 117
EQUALS               : 111
FALSE                : 137
FOR                  : 110
GE                   : 114
GT                   : 113
HEAD                 : 90
ID                   : 14 15 16 17 18 19 20 21 77 78 79 88 90 91 92 93 94 108 110 110 111 111 112 112 118 119 120 120 121 121 122 123 124 125
IF                   : 101
INPUT                : 85
INT                  : 24 53 59 61 61 65 71
INT_NUMBER           : 140
ISEMPTY              : 94
LBRACE               : 101 103 106 110 118 119 120 121
LBRACK               : 24 25 26 27 61 61 62 62 63 63 64 64 65 66 67 68
LE                   : 116
LENGTH               : 92
LIST                 : 29 65 65 66 66 67 67 68 68
LM                   : 110
LPAREN               : 24 25 26 27 28 29 61 62 63 64 65 66 67 68 73 78 85 86 87 88 89 101 106 110 111 112 118 119 120 121 122 123
LT                   : 115
MINUS                : 96
NEW                  : 24 25 26 27 61 62 63 64
PLUS                 : 95
PRINTLN              : 86 87 88 89
PRODUCTITERATOR      : 79
RBRACE               : 101 103 106 110 118 119 120 121
RBRACK               : 24 25 26 27 61 61 62 62 63 63 64 64 65 66 67 68
RETURN               : 120 121
REVERSE              : 93
RPAREN               : 24 25 26 27 28 29 61 62 63 64 65 66 67 68 73 78 85 86 87 88 89 101 106 110 111 112 118 119 120 121 122 123
STRING               : 138
STRING_TYPE          : 27 56 57 64 64 68 69
SWAP                 : 77
TAIL                 : 91
TIMES                : 98
TOSTRING             : 78
TRUE                 : 136
UNIT                 : 118 119
VAL                  : 14 15 16 17
VAR                  : 18 19 20 21
WHILE                : 106
error                : 

Nonterminals, with rules where they appear

argumentos           : 123 130 131 132 133
arrayHead            : 80
arrayLength          : 82
arrayTail            : 81
booleano             : 23 38 39 44 48 51 58 70 87 109 128 132
comp                 : 107
comparacion          : 101 104
comparacionesVar     : 105
cuerpo               : 1 101 103 106 110 118 119 120 121
cuerpoP              : 0
declararConstante    : 6
declararVariable     : 5
defFunciones         : 2
double               : 36 37 43 47 60 72 127 131 135
elementosInternos    : 28 29 65 66 67 68
elementosInternos2   : 46 47 48 49 73
elementosInternosBool : 32 39
elementosInternosDouble : 31 37
elementosInternosInt : 30 35
elementosInternosString : 33 41
expression           : 3 17 21 89 95 96
factor               : 98 99 100 101 101 104 104
for                  : 10
funciones            : 13
funcionesArray       : 9
funcionesList        : 8
funcionesPropias     : 11
funcionesTupla       : 7
if                   : 102 103
int                  : 24 25 26 27 34 35 42 46 59 61 62 63 64 71 126 130 134
listIsEmpty          : 83
listReverse          : 84
parametros           : 118 120 125
sentencia            : 4
string               : 22 40 41 45 49 50 57 69 86 129 133
term                 : 95 96 97 98 99
tipo                 : 15 19 120 121 124 125
tipoValue            : 18
tipoValueCons        : 14
tupla                : 52
tuplaProductIterator : 76
tuplaSwap            : 74
tuplaToString        : 75
value                : 20
valueCons            : 16
while                : 12
whileclause          : 106

Parsing method: LALR

state 0

    (0) S' -> . cuerpoP
    (1) cuerpoP -> . cuerpo
    (2) cuerpoP -> . defFunciones
    (3) cuerpo -> . expression
    (4) cuerpo -> . sentencia
    (5) cuerpo -> . declararVariable
    (6) cuerpo -> . declararConstante
    (7) cuerpo -> . funcionesTupla
    (8) cuerpo -> . funcionesList
    (9) cuerpo -> . funcionesArray
    (10) cuerpo -> . for
    (11) cuerpo -> . funcionesPropias
    (12) cuerpo -> . while
    (13) cuerpo -> . funciones
    (118) defFunciones -> . DEF ID LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (119) defFunciones -> . DEF ID LPAREN RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (120) defFunciones -> . DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
    (121) defFunciones -> . DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (102) sentencia -> . if
    (103) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (18) declararVariable -> . VAR ID COLON tipoValue
    (19) declararVariable -> . VAR ID COLON tipo
    (20) declararVariable -> . VAR ID EQUAL value
    (21) declararVariable -> . VAR ID EQUAL expression
    (14) declararConstante -> . VAL ID COLON tipoValueCons
    (15) declararConstante -> . VAL ID COLON tipo
    (16) declararConstante -> . VAL ID EQUAL valueCons
    (17) declararConstante -> . VAL ID EQUAL expression
    (74) funcionesTupla -> . tuplaSwap
    (75) funcionesTupla -> . tuplaToString
    (76) funcionesTupla -> . tuplaProductIterator
    (83) funcionesList -> . listIsEmpty
    (84) funcionesList -> . listReverse
    (80) funcionesArray -> . arrayHead
    (81) funcionesArray -> . arrayTail
    (82) funcionesArray -> . arrayLength
    (110) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (85) funcionesPropias -> . INPUT LPAREN RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (87) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (88) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (89) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (106) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (122) funciones -> . ID LPAREN RPAREN
    (123) funciones -> . ID LPAREN argumentos RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (101) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (77) tuplaSwap -> . ID DOT SWAP
    (78) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (94) listIsEmpty -> . ID DOT ISEMPTY
    (93) listReverse -> . ID DOT REVERSE
    (90) arrayHead -> . ID DOT HEAD
    (91) arrayTail -> . ID DOT TAIL
    (92) arrayLength -> . ID DOT LENGTH
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    DEF             shift and go to state 15
    VAR             shift and go to state 19
    VAL             shift and go to state 20
    FOR             shift and go to state 29
    INPUT           shift and go to state 30
    PRINTLN         shift and go to state 31
    WHILE           shift and go to state 32
    ID              shift and go to state 16
    IF              shift and go to state 34
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    cuerpoP                        shift and go to state 1
    cuerpo                         shift and go to state 2
    defFunciones                   shift and go to state 3
    expression                     shift and go to state 4
    sentencia                      shift and go to state 5
    declararVariable               shift and go to state 6
    declararConstante              shift and go to state 7
    funcionesTupla                 shift and go to state 8
    funcionesList                  shift and go to state 9
    funcionesArray                 shift and go to state 10
    for                            shift and go to state 11
    funcionesPropias               shift and go to state 12
    while                          shift and go to state 13
    funciones                      shift and go to state 14
    term                           shift and go to state 17
    if                             shift and go to state 18
    tuplaSwap                      shift and go to state 21
    tuplaToString                  shift and go to state 22
    tuplaProductIterator           shift and go to state 23
    listIsEmpty                    shift and go to state 24
    listReverse                    shift and go to state 25
    arrayHead                      shift and go to state 26
    arrayTail                      shift and go to state 27
    arrayLength                    shift and go to state 28
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 1

    (0) S' -> cuerpoP .



state 2

    (1) cuerpoP -> cuerpo .

    $end            reduce using rule 1 (cuerpoP -> cuerpo .)


state 3

    (2) cuerpoP -> defFunciones .

    $end            reduce using rule 2 (cuerpoP -> defFunciones .)


state 4

    (3) cuerpo -> expression .
    (95) expression -> expression . PLUS term
    (96) expression -> expression . MINUS term

    $end            reduce using rule 3 (cuerpo -> expression .)
    RBRACE          reduce using rule 3 (cuerpo -> expression .)
    RETURN          reduce using rule 3 (cuerpo -> expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40


state 5

    (4) cuerpo -> sentencia .

    $end            reduce using rule 4 (cuerpo -> sentencia .)
    RBRACE          reduce using rule 4 (cuerpo -> sentencia .)
    RETURN          reduce using rule 4 (cuerpo -> sentencia .)


state 6

    (5) cuerpo -> declararVariable .

    $end            reduce using rule 5 (cuerpo -> declararVariable .)
    RBRACE          reduce using rule 5 (cuerpo -> declararVariable .)
    RETURN          reduce using rule 5 (cuerpo -> declararVariable .)


state 7

    (6) cuerpo -> declararConstante .

    $end            reduce using rule 6 (cuerpo -> declararConstante .)
    RBRACE          reduce using rule 6 (cuerpo -> declararConstante .)
    RETURN          reduce using rule 6 (cuerpo -> declararConstante .)


state 8

    (7) cuerpo -> funcionesTupla .

    $end            reduce using rule 7 (cuerpo -> funcionesTupla .)
    RBRACE          reduce using rule 7 (cuerpo -> funcionesTupla .)
    RETURN          reduce using rule 7 (cuerpo -> funcionesTupla .)


state 9

    (8) cuerpo -> funcionesList .

    $end            reduce using rule 8 (cuerpo -> funcionesList .)
    RBRACE          reduce using rule 8 (cuerpo -> funcionesList .)
    RETURN          reduce using rule 8 (cuerpo -> funcionesList .)


state 10

    (9) cuerpo -> funcionesArray .

    $end            reduce using rule 9 (cuerpo -> funcionesArray .)
    RBRACE          reduce using rule 9 (cuerpo -> funcionesArray .)
    RETURN          reduce using rule 9 (cuerpo -> funcionesArray .)


state 11

    (10) cuerpo -> for .

    $end            reduce using rule 10 (cuerpo -> for .)
    RBRACE          reduce using rule 10 (cuerpo -> for .)
    RETURN          reduce using rule 10 (cuerpo -> for .)


state 12

    (11) cuerpo -> funcionesPropias .

    $end            reduce using rule 11 (cuerpo -> funcionesPropias .)
    RBRACE          reduce using rule 11 (cuerpo -> funcionesPropias .)
    RETURN          reduce using rule 11 (cuerpo -> funcionesPropias .)


state 13

    (12) cuerpo -> while .

    $end            reduce using rule 12 (cuerpo -> while .)
    RBRACE          reduce using rule 12 (cuerpo -> while .)
    RETURN          reduce using rule 12 (cuerpo -> while .)


state 14

    (13) cuerpo -> funciones .

    $end            reduce using rule 13 (cuerpo -> funciones .)
    RBRACE          reduce using rule 13 (cuerpo -> funciones .)
    RETURN          reduce using rule 13 (cuerpo -> funciones .)


state 15

    (118) defFunciones -> DEF . ID LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (119) defFunciones -> DEF . ID LPAREN RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (120) defFunciones -> DEF . ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
    (121) defFunciones -> DEF . ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE

    ID              shift and go to state 41


state 16

    (122) funciones -> ID . LPAREN RPAREN
    (123) funciones -> ID . LPAREN argumentos RPAREN
    (77) tuplaSwap -> ID . DOT SWAP
    (78) tuplaToString -> ID . DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> ID . DOT PRODUCTITERATOR
    (94) listIsEmpty -> ID . DOT ISEMPTY
    (93) listReverse -> ID . DOT REVERSE
    (90) arrayHead -> ID . DOT HEAD
    (91) arrayTail -> ID . DOT TAIL
    (92) arrayLength -> ID . DOT LENGTH

    LPAREN          shift and go to state 42
    DOT             shift and go to state 43


state 17

    (97) expression -> term .
    (98) term -> term . TIMES factor
    (99) term -> term . DIVIDE factor

    PLUS            reduce using rule 97 (expression -> term .)
    MINUS           reduce using rule 97 (expression -> term .)
    $end            reduce using rule 97 (expression -> term .)
    RPAREN          reduce using rule 97 (expression -> term .)
    RBRACE          reduce using rule 97 (expression -> term .)
    RETURN          reduce using rule 97 (expression -> term .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45


state 18

    (102) sentencia -> if .
    (103) sentencia -> if . ELSE LBRACE cuerpo RBRACE

    $end            reduce using rule 102 (sentencia -> if .)
    RBRACE          reduce using rule 102 (sentencia -> if .)
    RETURN          reduce using rule 102 (sentencia -> if .)
    ELSE            shift and go to state 46


state 19

    (18) declararVariable -> VAR . ID COLON tipoValue
    (19) declararVariable -> VAR . ID COLON tipo
    (20) declararVariable -> VAR . ID EQUAL value
    (21) declararVariable -> VAR . ID EQUAL expression

    ID              shift and go to state 47


state 20

    (14) declararConstante -> VAL . ID COLON tipoValueCons
    (15) declararConstante -> VAL . ID COLON tipo
    (16) declararConstante -> VAL . ID EQUAL valueCons
    (17) declararConstante -> VAL . ID EQUAL expression

    ID              shift and go to state 48


state 21

    (74) funcionesTupla -> tuplaSwap .

    $end            reduce using rule 74 (funcionesTupla -> tuplaSwap .)
    RBRACE          reduce using rule 74 (funcionesTupla -> tuplaSwap .)
    RETURN          reduce using rule 74 (funcionesTupla -> tuplaSwap .)


state 22

    (75) funcionesTupla -> tuplaToString .

    $end            reduce using rule 75 (funcionesTupla -> tuplaToString .)
    RBRACE          reduce using rule 75 (funcionesTupla -> tuplaToString .)
    RETURN          reduce using rule 75 (funcionesTupla -> tuplaToString .)


state 23

    (76) funcionesTupla -> tuplaProductIterator .

    $end            reduce using rule 76 (funcionesTupla -> tuplaProductIterator .)
    RBRACE          reduce using rule 76 (funcionesTupla -> tuplaProductIterator .)
    RETURN          reduce using rule 76 (funcionesTupla -> tuplaProductIterator .)


state 24

    (83) funcionesList -> listIsEmpty .

    $end            reduce using rule 83 (funcionesList -> listIsEmpty .)
    RBRACE          reduce using rule 83 (funcionesList -> listIsEmpty .)
    RETURN          reduce using rule 83 (funcionesList -> listIsEmpty .)


state 25

    (84) funcionesList -> listReverse .

    $end            reduce using rule 84 (funcionesList -> listReverse .)
    RBRACE          reduce using rule 84 (funcionesList -> listReverse .)
    RETURN          reduce using rule 84 (funcionesList -> listReverse .)


state 26

    (80) funcionesArray -> arrayHead .

    $end            reduce using rule 80 (funcionesArray -> arrayHead .)
    RBRACE          reduce using rule 80 (funcionesArray -> arrayHead .)
    RETURN          reduce using rule 80 (funcionesArray -> arrayHead .)


state 27

    (81) funcionesArray -> arrayTail .

    $end            reduce using rule 81 (funcionesArray -> arrayTail .)
    RBRACE          reduce using rule 81 (funcionesArray -> arrayTail .)
    RETURN          reduce using rule 81 (funcionesArray -> arrayTail .)


state 28

    (82) funcionesArray -> arrayLength .

    $end            reduce using rule 82 (funcionesArray -> arrayLength .)
    RBRACE          reduce using rule 82 (funcionesArray -> arrayLength .)
    RETURN          reduce using rule 82 (funcionesArray -> arrayLength .)


state 29

    (110) for -> FOR . LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 49


state 30

    (85) funcionesPropias -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 50


state 31

    (86) funcionesPropias -> PRINTLN . LPAREN string RPAREN
    (87) funcionesPropias -> PRINTLN . LPAREN booleano RPAREN
    (88) funcionesPropias -> PRINTLN . LPAREN ID RPAREN
    (89) funcionesPropias -> PRINTLN . LPAREN expression RPAREN

    LPAREN          shift and go to state 51


state 32

    (106) while -> WHILE . LPAREN whileclause RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 52


state 33

    (100) term -> factor .

    TIMES           reduce using rule 100 (term -> factor .)
    DIVIDE          reduce using rule 100 (term -> factor .)
    PLUS            reduce using rule 100 (term -> factor .)
    MINUS           reduce using rule 100 (term -> factor .)
    $end            reduce using rule 100 (term -> factor .)
    RPAREN          reduce using rule 100 (term -> factor .)
    RBRACE          reduce using rule 100 (term -> factor .)
    RETURN          reduce using rule 100 (term -> factor .)


state 34

    (101) if -> IF . LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 53


state 35

    (134) factor -> int .

    TIMES           reduce using rule 134 (factor -> int .)
    DIVIDE          reduce using rule 134 (factor -> int .)
    PLUS            reduce using rule 134 (factor -> int .)
    MINUS           reduce using rule 134 (factor -> int .)
    $end            reduce using rule 134 (factor -> int .)
    RPAREN          reduce using rule 134 (factor -> int .)
    RBRACE          reduce using rule 134 (factor -> int .)
    RETURN          reduce using rule 134 (factor -> int .)
    GT              reduce using rule 134 (factor -> int .)
    GE              reduce using rule 134 (factor -> int .)
    LT              reduce using rule 134 (factor -> int .)
    LE              reduce using rule 134 (factor -> int .)
    EQUAL2          reduce using rule 134 (factor -> int .)


state 36

    (135) factor -> double .

    TIMES           reduce using rule 135 (factor -> double .)
    DIVIDE          reduce using rule 135 (factor -> double .)
    PLUS            reduce using rule 135 (factor -> double .)
    MINUS           reduce using rule 135 (factor -> double .)
    $end            reduce using rule 135 (factor -> double .)
    RPAREN          reduce using rule 135 (factor -> double .)
    RBRACE          reduce using rule 135 (factor -> double .)
    RETURN          reduce using rule 135 (factor -> double .)
    GT              reduce using rule 135 (factor -> double .)
    GE              reduce using rule 135 (factor -> double .)
    LT              reduce using rule 135 (factor -> double .)
    LE              reduce using rule 135 (factor -> double .)
    EQUAL2          reduce using rule 135 (factor -> double .)


state 37

    (140) int -> INT_NUMBER .

    TIMES           reduce using rule 140 (int -> INT_NUMBER .)
    DIVIDE          reduce using rule 140 (int -> INT_NUMBER .)
    PLUS            reduce using rule 140 (int -> INT_NUMBER .)
    MINUS           reduce using rule 140 (int -> INT_NUMBER .)
    $end            reduce using rule 140 (int -> INT_NUMBER .)
    RPAREN          reduce using rule 140 (int -> INT_NUMBER .)
    RBRACE          reduce using rule 140 (int -> INT_NUMBER .)
    RETURN          reduce using rule 140 (int -> INT_NUMBER .)
    COMMA           reduce using rule 140 (int -> INT_NUMBER .)
    GT              reduce using rule 140 (int -> INT_NUMBER .)
    GE              reduce using rule 140 (int -> INT_NUMBER .)
    LT              reduce using rule 140 (int -> INT_NUMBER .)
    LE              reduce using rule 140 (int -> INT_NUMBER .)
    EQUAL2          reduce using rule 140 (int -> INT_NUMBER .)


state 38

    (139) double -> DOUBLE_NUMBER .

    TIMES           reduce using rule 139 (double -> DOUBLE_NUMBER .)
    DIVIDE          reduce using rule 139 (double -> DOUBLE_NUMBER .)
    PLUS            reduce using rule 139 (double -> DOUBLE_NUMBER .)
    MINUS           reduce using rule 139 (double -> DOUBLE_NUMBER .)
    $end            reduce using rule 139 (double -> DOUBLE_NUMBER .)
    RPAREN          reduce using rule 139 (double -> DOUBLE_NUMBER .)
    RBRACE          reduce using rule 139 (double -> DOUBLE_NUMBER .)
    RETURN          reduce using rule 139 (double -> DOUBLE_NUMBER .)
    COMMA           reduce using rule 139 (double -> DOUBLE_NUMBER .)
    GT              reduce using rule 139 (double -> DOUBLE_NUMBER .)
    GE              reduce using rule 139 (double -> DOUBLE_NUMBER .)
    LT              reduce using rule 139 (double -> DOUBLE_NUMBER .)
    LE              reduce using rule 139 (double -> DOUBLE_NUMBER .)
    EQUAL2          reduce using rule 139 (double -> DOUBLE_NUMBER .)


state 39

    (95) expression -> expression PLUS . term
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    term                           shift and go to state 54
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 40

    (96) expression -> expression MINUS . term
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    term                           shift and go to state 55
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 41

    (118) defFunciones -> DEF ID . LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (119) defFunciones -> DEF ID . LPAREN RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (120) defFunciones -> DEF ID . LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
    (121) defFunciones -> DEF ID . LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE

    LPAREN          shift and go to state 56


state 42

    (122) funciones -> ID LPAREN . RPAREN
    (123) funciones -> ID LPAREN . argumentos RPAREN
    (126) argumentos -> . int
    (127) argumentos -> . double
    (128) argumentos -> . booleano
    (129) argumentos -> . string
    (130) argumentos -> . int COMMA argumentos
    (131) argumentos -> . double COMMA argumentos
    (132) argumentos -> . booleano COMMA argumentos
    (133) argumentos -> . string COMMA argumentos
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    RPAREN          shift and go to state 57
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    argumentos                     shift and go to state 58
    int                            shift and go to state 59
    double                         shift and go to state 60
    booleano                       shift and go to state 61
    string                         shift and go to state 62

state 43

    (77) tuplaSwap -> ID DOT . SWAP
    (78) tuplaToString -> ID DOT . TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> ID DOT . PRODUCTITERATOR
    (94) listIsEmpty -> ID DOT . ISEMPTY
    (93) listReverse -> ID DOT . REVERSE
    (90) arrayHead -> ID DOT . HEAD
    (91) arrayTail -> ID DOT . TAIL
    (92) arrayLength -> ID DOT . LENGTH

    SWAP            shift and go to state 66
    TOSTRING        shift and go to state 67
    PRODUCTITERATOR shift and go to state 68
    ISEMPTY         shift and go to state 69
    REVERSE         shift and go to state 70
    HEAD            shift and go to state 71
    TAIL            shift and go to state 72
    LENGTH          shift and go to state 73


state 44

    (98) term -> term TIMES . factor
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    factor                         shift and go to state 74
    int                            shift and go to state 35
    double                         shift and go to state 36

state 45

    (99) term -> term DIVIDE . factor
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    factor                         shift and go to state 75
    int                            shift and go to state 35
    double                         shift and go to state 36

state 46

    (103) sentencia -> if ELSE . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 76


state 47

    (18) declararVariable -> VAR ID . COLON tipoValue
    (19) declararVariable -> VAR ID . COLON tipo
    (20) declararVariable -> VAR ID . EQUAL value
    (21) declararVariable -> VAR ID . EQUAL expression

    COLON           shift and go to state 77
    EQUAL           shift and go to state 78


state 48

    (14) declararConstante -> VAL ID . COLON tipoValueCons
    (15) declararConstante -> VAL ID . COLON tipo
    (16) declararConstante -> VAL ID . EQUAL valueCons
    (17) declararConstante -> VAL ID . EQUAL expression

    COLON           shift and go to state 79
    EQUAL           shift and go to state 80


state 49

    (110) for -> FOR LPAREN . ID LM ID RPAREN LBRACE cuerpo RBRACE

    ID              shift and go to state 81


state 50

    (85) funcionesPropias -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 82


state 51

    (86) funcionesPropias -> PRINTLN LPAREN . string RPAREN
    (87) funcionesPropias -> PRINTLN LPAREN . booleano RPAREN
    (88) funcionesPropias -> PRINTLN LPAREN . ID RPAREN
    (89) funcionesPropias -> PRINTLN LPAREN . expression RPAREN
    (138) string -> . STRING
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    ID              shift and go to state 85
    STRING          shift and go to state 65
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    string                         shift and go to state 83
    booleano                       shift and go to state 84
    expression                     shift and go to state 86
    term                           shift and go to state 17
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 52

    (106) while -> WHILE LPAREN . whileclause RPAREN LBRACE cuerpo RBRACE
    (107) whileclause -> . comp
    (108) whileclause -> . ID
    (109) whileclause -> . booleano
    (104) comp -> . factor comparacion factor
    (105) comp -> . comparacionesVar
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (134) factor -> . int
    (135) factor -> . double
    (111) comparacionesVar -> . ID DOT EQUALS LPAREN ID RPAREN
    (112) comparacionesVar -> . ID DOT EQ LPAREN ID RPAREN
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    ID              shift and go to state 89
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    whileclause                    shift and go to state 87
    comp                           shift and go to state 88
    booleano                       shift and go to state 90
    factor                         shift and go to state 91
    comparacionesVar               shift and go to state 92
    int                            shift and go to state 35
    double                         shift and go to state 36

state 53

    (101) if -> IF LPAREN . factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    factor                         shift and go to state 93
    int                            shift and go to state 35
    double                         shift and go to state 36

state 54

    (95) expression -> expression PLUS term .
    (98) term -> term . TIMES factor
    (99) term -> term . DIVIDE factor

    PLUS            reduce using rule 95 (expression -> expression PLUS term .)
    MINUS           reduce using rule 95 (expression -> expression PLUS term .)
    $end            reduce using rule 95 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 95 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 95 (expression -> expression PLUS term .)
    RETURN          reduce using rule 95 (expression -> expression PLUS term .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45


state 55

    (96) expression -> expression MINUS term .
    (98) term -> term . TIMES factor
    (99) term -> term . DIVIDE factor

    PLUS            reduce using rule 96 (expression -> expression MINUS term .)
    MINUS           reduce using rule 96 (expression -> expression MINUS term .)
    $end            reduce using rule 96 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 96 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 96 (expression -> expression MINUS term .)
    RETURN          reduce using rule 96 (expression -> expression MINUS term .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45


state 56

    (118) defFunciones -> DEF ID LPAREN . parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (119) defFunciones -> DEF ID LPAREN . RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (120) defFunciones -> DEF ID LPAREN . parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
    (121) defFunciones -> DEF ID LPAREN . RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
    (124) parametros -> . ID COLON tipo
    (125) parametros -> . ID COLON tipo COMMA parametros

    RPAREN          shift and go to state 96
    ID              shift and go to state 94

    parametros                     shift and go to state 95

state 57

    (122) funciones -> ID LPAREN RPAREN .

    $end            reduce using rule 122 (funciones -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 122 (funciones -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 122 (funciones -> ID LPAREN RPAREN .)


state 58

    (123) funciones -> ID LPAREN argumentos . RPAREN

    RPAREN          shift and go to state 97


state 59

    (126) argumentos -> int .
    (130) argumentos -> int . COMMA argumentos

    RPAREN          reduce using rule 126 (argumentos -> int .)
    COMMA           shift and go to state 98


state 60

    (127) argumentos -> double .
    (131) argumentos -> double . COMMA argumentos

    RPAREN          reduce using rule 127 (argumentos -> double .)
    COMMA           shift and go to state 99


state 61

    (128) argumentos -> booleano .
    (132) argumentos -> booleano . COMMA argumentos

    RPAREN          reduce using rule 128 (argumentos -> booleano .)
    COMMA           shift and go to state 100


state 62

    (129) argumentos -> string .
    (133) argumentos -> string . COMMA argumentos

    RPAREN          reduce using rule 129 (argumentos -> string .)
    COMMA           shift and go to state 101


state 63

    (136) booleano -> TRUE .

    COMMA           reduce using rule 136 (booleano -> TRUE .)
    RPAREN          reduce using rule 136 (booleano -> TRUE .)
    $end            reduce using rule 136 (booleano -> TRUE .)
    RBRACE          reduce using rule 136 (booleano -> TRUE .)
    RETURN          reduce using rule 136 (booleano -> TRUE .)


state 64

    (137) booleano -> FALSE .

    COMMA           reduce using rule 137 (booleano -> FALSE .)
    RPAREN          reduce using rule 137 (booleano -> FALSE .)
    $end            reduce using rule 137 (booleano -> FALSE .)
    RBRACE          reduce using rule 137 (booleano -> FALSE .)
    RETURN          reduce using rule 137 (booleano -> FALSE .)


state 65

    (138) string -> STRING .

    COMMA           reduce using rule 138 (string -> STRING .)
    RPAREN          reduce using rule 138 (string -> STRING .)
    $end            reduce using rule 138 (string -> STRING .)
    RBRACE          reduce using rule 138 (string -> STRING .)
    RETURN          reduce using rule 138 (string -> STRING .)


state 66

    (77) tuplaSwap -> ID DOT SWAP .

    $end            reduce using rule 77 (tuplaSwap -> ID DOT SWAP .)
    RBRACE          reduce using rule 77 (tuplaSwap -> ID DOT SWAP .)
    RETURN          reduce using rule 77 (tuplaSwap -> ID DOT SWAP .)


state 67

    (78) tuplaToString -> ID DOT TOSTRING . LPAREN RPAREN

    LPAREN          shift and go to state 102


state 68

    (79) tuplaProductIterator -> ID DOT PRODUCTITERATOR .

    $end            reduce using rule 79 (tuplaProductIterator -> ID DOT PRODUCTITERATOR .)
    RBRACE          reduce using rule 79 (tuplaProductIterator -> ID DOT PRODUCTITERATOR .)
    RETURN          reduce using rule 79 (tuplaProductIterator -> ID DOT PRODUCTITERATOR .)


state 69

    (94) listIsEmpty -> ID DOT ISEMPTY .

    $end            reduce using rule 94 (listIsEmpty -> ID DOT ISEMPTY .)
    RBRACE          reduce using rule 94 (listIsEmpty -> ID DOT ISEMPTY .)
    RETURN          reduce using rule 94 (listIsEmpty -> ID DOT ISEMPTY .)


state 70

    (93) listReverse -> ID DOT REVERSE .

    $end            reduce using rule 93 (listReverse -> ID DOT REVERSE .)
    RBRACE          reduce using rule 93 (listReverse -> ID DOT REVERSE .)
    RETURN          reduce using rule 93 (listReverse -> ID DOT REVERSE .)


state 71

    (90) arrayHead -> ID DOT HEAD .

    $end            reduce using rule 90 (arrayHead -> ID DOT HEAD .)
    RBRACE          reduce using rule 90 (arrayHead -> ID DOT HEAD .)
    RETURN          reduce using rule 90 (arrayHead -> ID DOT HEAD .)


state 72

    (91) arrayTail -> ID DOT TAIL .

    $end            reduce using rule 91 (arrayTail -> ID DOT TAIL .)
    RBRACE          reduce using rule 91 (arrayTail -> ID DOT TAIL .)
    RETURN          reduce using rule 91 (arrayTail -> ID DOT TAIL .)


state 73

    (92) arrayLength -> ID DOT LENGTH .

    $end            reduce using rule 92 (arrayLength -> ID DOT LENGTH .)
    RBRACE          reduce using rule 92 (arrayLength -> ID DOT LENGTH .)
    RETURN          reduce using rule 92 (arrayLength -> ID DOT LENGTH .)


state 74

    (98) term -> term TIMES factor .

    TIMES           reduce using rule 98 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 98 (term -> term TIMES factor .)
    PLUS            reduce using rule 98 (term -> term TIMES factor .)
    MINUS           reduce using rule 98 (term -> term TIMES factor .)
    $end            reduce using rule 98 (term -> term TIMES factor .)
    RPAREN          reduce using rule 98 (term -> term TIMES factor .)
    RBRACE          reduce using rule 98 (term -> term TIMES factor .)
    RETURN          reduce using rule 98 (term -> term TIMES factor .)


state 75

    (99) term -> term DIVIDE factor .

    TIMES           reduce using rule 99 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 99 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 99 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 99 (term -> term DIVIDE factor .)
    $end            reduce using rule 99 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 99 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 99 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 99 (term -> term DIVIDE factor .)


state 76

    (103) sentencia -> if ELSE LBRACE . cuerpo RBRACE
    (3) cuerpo -> . expression
    (4) cuerpo -> . sentencia
    (5) cuerpo -> . declararVariable
    (6) cuerpo -> . declararConstante
    (7) cuerpo -> . funcionesTupla
    (8) cuerpo -> . funcionesList
    (9) cuerpo -> . funcionesArray
    (10) cuerpo -> . for
    (11) cuerpo -> . funcionesPropias
    (12) cuerpo -> . while
    (13) cuerpo -> . funciones
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (102) sentencia -> . if
    (103) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (18) declararVariable -> . VAR ID COLON tipoValue
    (19) declararVariable -> . VAR ID COLON tipo
    (20) declararVariable -> . VAR ID EQUAL value
    (21) declararVariable -> . VAR ID EQUAL expression
    (14) declararConstante -> . VAL ID COLON tipoValueCons
    (15) declararConstante -> . VAL ID COLON tipo
    (16) declararConstante -> . VAL ID EQUAL valueCons
    (17) declararConstante -> . VAL ID EQUAL expression
    (74) funcionesTupla -> . tuplaSwap
    (75) funcionesTupla -> . tuplaToString
    (76) funcionesTupla -> . tuplaProductIterator
    (83) funcionesList -> . listIsEmpty
    (84) funcionesList -> . listReverse
    (80) funcionesArray -> . arrayHead
    (81) funcionesArray -> . arrayTail
    (82) funcionesArray -> . arrayLength
    (110) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (85) funcionesPropias -> . INPUT LPAREN RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (87) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (88) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (89) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (106) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (122) funciones -> . ID LPAREN RPAREN
    (123) funciones -> . ID LPAREN argumentos RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (101) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (77) tuplaSwap -> . ID DOT SWAP
    (78) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (94) listIsEmpty -> . ID DOT ISEMPTY
    (93) listReverse -> . ID DOT REVERSE
    (90) arrayHead -> . ID DOT HEAD
    (91) arrayTail -> . ID DOT TAIL
    (92) arrayLength -> . ID DOT LENGTH
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    FOR             shift and go to state 29
    INPUT           shift and go to state 30
    PRINTLN         shift and go to state 31
    WHILE           shift and go to state 32
    ID              shift and go to state 16
    IF              shift and go to state 34
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    if                             shift and go to state 18
    cuerpo                         shift and go to state 103
    expression                     shift and go to state 4
    sentencia                      shift and go to state 5
    declararVariable               shift and go to state 6
    declararConstante              shift and go to state 7
    funcionesTupla                 shift and go to state 8
    funcionesList                  shift and go to state 9
    funcionesArray                 shift and go to state 10
    for                            shift and go to state 11
    funcionesPropias               shift and go to state 12
    while                          shift and go to state 13
    funciones                      shift and go to state 14
    term                           shift and go to state 17
    tuplaSwap                      shift and go to state 21
    tuplaToString                  shift and go to state 22
    tuplaProductIterator           shift and go to state 23
    listIsEmpty                    shift and go to state 24
    listReverse                    shift and go to state 25
    arrayHead                      shift and go to state 26
    arrayTail                      shift and go to state 27
    arrayLength                    shift and go to state 28
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 77

    (18) declararVariable -> VAR ID COLON . tipoValue
    (19) declararVariable -> VAR ID COLON . tipo
    (57) tipoValue -> . STRING_TYPE EQUAL string
    (58) tipoValue -> . BOOL EQUAL booleano
    (59) tipoValue -> . INT EQUAL int
    (60) tipoValue -> . DOUBLE EQUAL double
    (61) tipoValue -> . ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (62) tipoValue -> . ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (63) tipoValue -> . ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (64) tipoValue -> . ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (65) tipoValue -> . LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (66) tipoValue -> . LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (67) tipoValue -> . LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (68) tipoValue -> . LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (53) tipo -> . INT
    (54) tipo -> . DOUBLE
    (55) tipo -> . BOOL
    (56) tipo -> . STRING_TYPE

    STRING_TYPE     shift and go to state 106
    BOOL            shift and go to state 107
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    ARRAY           shift and go to state 110
    LIST            shift and go to state 111

    tipoValue                      shift and go to state 104
    tipo                           shift and go to state 105

state 78

    (20) declararVariable -> VAR ID EQUAL . value
    (21) declararVariable -> VAR ID EQUAL . expression
    (22) value -> . string
    (23) value -> . booleano
    (24) value -> . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (25) value -> . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (26) value -> . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (27) value -> . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN
    (28) value -> . ARRAY LPAREN elementosInternos RPAREN
    (29) value -> . LIST LPAREN elementosInternos RPAREN
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (138) string -> . STRING
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    NEW             shift and go to state 116
    ARRAY           shift and go to state 117
    LIST            shift and go to state 118
    STRING          shift and go to state 65
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    value                          shift and go to state 112
    expression                     shift and go to state 113
    string                         shift and go to state 114
    booleano                       shift and go to state 115
    int                            shift and go to state 35
    term                           shift and go to state 17
    factor                         shift and go to state 33
    double                         shift and go to state 36

state 79

    (14) declararConstante -> VAL ID COLON . tipoValueCons
    (15) declararConstante -> VAL ID COLON . tipo
    (69) tipoValueCons -> . STRING_TYPE EQUAL string
    (70) tipoValueCons -> . BOOL EQUAL booleano
    (71) tipoValueCons -> . INT EQUAL int
    (72) tipoValueCons -> . DOUBLE EQUAL double
    (53) tipo -> . INT
    (54) tipo -> . DOUBLE
    (55) tipo -> . BOOL
    (56) tipo -> . STRING_TYPE

    STRING_TYPE     shift and go to state 121
    BOOL            shift and go to state 122
    INT             shift and go to state 123
    DOUBLE          shift and go to state 124

    tipoValueCons                  shift and go to state 119
    tipo                           shift and go to state 120

state 80

    (16) declararConstante -> VAL ID EQUAL . valueCons
    (17) declararConstante -> VAL ID EQUAL . expression
    (50) valueCons -> . string
    (51) valueCons -> . booleano
    (52) valueCons -> . tupla
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (138) string -> . STRING
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (73) tupla -> . LPAREN elementosInternos2 RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    STRING          shift and go to state 65
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 130
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    valueCons                      shift and go to state 125
    expression                     shift and go to state 126
    string                         shift and go to state 127
    booleano                       shift and go to state 128
    tupla                          shift and go to state 129
    term                           shift and go to state 17
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 81

    (110) for -> FOR LPAREN ID . LM ID RPAREN LBRACE cuerpo RBRACE

    LM              shift and go to state 131


state 82

    (85) funcionesPropias -> INPUT LPAREN RPAREN .

    $end            reduce using rule 85 (funcionesPropias -> INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 85 (funcionesPropias -> INPUT LPAREN RPAREN .)
    RETURN          reduce using rule 85 (funcionesPropias -> INPUT LPAREN RPAREN .)


state 83

    (86) funcionesPropias -> PRINTLN LPAREN string . RPAREN

    RPAREN          shift and go to state 132


state 84

    (87) funcionesPropias -> PRINTLN LPAREN booleano . RPAREN

    RPAREN          shift and go to state 133


state 85

    (88) funcionesPropias -> PRINTLN LPAREN ID . RPAREN

    RPAREN          shift and go to state 134


state 86

    (89) funcionesPropias -> PRINTLN LPAREN expression . RPAREN
    (95) expression -> expression . PLUS term
    (96) expression -> expression . MINUS term

    RPAREN          shift and go to state 135
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40


state 87

    (106) while -> WHILE LPAREN whileclause . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 136


state 88

    (107) whileclause -> comp .

    RPAREN          reduce using rule 107 (whileclause -> comp .)


state 89

    (108) whileclause -> ID .
    (111) comparacionesVar -> ID . DOT EQUALS LPAREN ID RPAREN
    (112) comparacionesVar -> ID . DOT EQ LPAREN ID RPAREN

    RPAREN          reduce using rule 108 (whileclause -> ID .)
    DOT             shift and go to state 137


state 90

    (109) whileclause -> booleano .

    RPAREN          reduce using rule 109 (whileclause -> booleano .)


state 91

    (104) comp -> factor . comparacion factor
    (113) comparacion -> . GT
    (114) comparacion -> . GE
    (115) comparacion -> . LT
    (116) comparacion -> . LE
    (117) comparacion -> . EQUAL2

    GT              shift and go to state 139
    GE              shift and go to state 140
    LT              shift and go to state 141
    LE              shift and go to state 142
    EQUAL2          shift and go to state 143

    comparacion                    shift and go to state 138

state 92

    (105) comp -> comparacionesVar .

    RPAREN          reduce using rule 105 (comp -> comparacionesVar .)


state 93

    (101) if -> IF LPAREN factor . comparacion factor RPAREN LBRACE cuerpo RBRACE
    (113) comparacion -> . GT
    (114) comparacion -> . GE
    (115) comparacion -> . LT
    (116) comparacion -> . LE
    (117) comparacion -> . EQUAL2

    GT              shift and go to state 139
    GE              shift and go to state 140
    LT              shift and go to state 141
    LE              shift and go to state 142
    EQUAL2          shift and go to state 143

    comparacion                    shift and go to state 144

state 94

    (124) parametros -> ID . COLON tipo
    (125) parametros -> ID . COLON tipo COMMA parametros

    COLON           shift and go to state 145


state 95

    (118) defFunciones -> DEF ID LPAREN parametros . RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (120) defFunciones -> DEF ID LPAREN parametros . RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE

    RPAREN          shift and go to state 146


state 96

    (119) defFunciones -> DEF ID LPAREN RPAREN . COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (121) defFunciones -> DEF ID LPAREN RPAREN . COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE

    COLON           shift and go to state 147


state 97

    (123) funciones -> ID LPAREN argumentos RPAREN .

    $end            reduce using rule 123 (funciones -> ID LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 123 (funciones -> ID LPAREN argumentos RPAREN .)
    RETURN          reduce using rule 123 (funciones -> ID LPAREN argumentos RPAREN .)


state 98

    (130) argumentos -> int COMMA . argumentos
    (126) argumentos -> . int
    (127) argumentos -> . double
    (128) argumentos -> . booleano
    (129) argumentos -> . string
    (130) argumentos -> . int COMMA argumentos
    (131) argumentos -> . double COMMA argumentos
    (132) argumentos -> . booleano COMMA argumentos
    (133) argumentos -> . string COMMA argumentos
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    int                            shift and go to state 59
    argumentos                     shift and go to state 148
    double                         shift and go to state 60
    booleano                       shift and go to state 61
    string                         shift and go to state 62

state 99

    (131) argumentos -> double COMMA . argumentos
    (126) argumentos -> . int
    (127) argumentos -> . double
    (128) argumentos -> . booleano
    (129) argumentos -> . string
    (130) argumentos -> . int COMMA argumentos
    (131) argumentos -> . double COMMA argumentos
    (132) argumentos -> . booleano COMMA argumentos
    (133) argumentos -> . string COMMA argumentos
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    double                         shift and go to state 60
    argumentos                     shift and go to state 149
    int                            shift and go to state 59
    booleano                       shift and go to state 61
    string                         shift and go to state 62

state 100

    (132) argumentos -> booleano COMMA . argumentos
    (126) argumentos -> . int
    (127) argumentos -> . double
    (128) argumentos -> . booleano
    (129) argumentos -> . string
    (130) argumentos -> . int COMMA argumentos
    (131) argumentos -> . double COMMA argumentos
    (132) argumentos -> . booleano COMMA argumentos
    (133) argumentos -> . string COMMA argumentos
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    booleano                       shift and go to state 61
    argumentos                     shift and go to state 150
    int                            shift and go to state 59
    double                         shift and go to state 60
    string                         shift and go to state 62

state 101

    (133) argumentos -> string COMMA . argumentos
    (126) argumentos -> . int
    (127) argumentos -> . double
    (128) argumentos -> . booleano
    (129) argumentos -> . string
    (130) argumentos -> . int COMMA argumentos
    (131) argumentos -> . double COMMA argumentos
    (132) argumentos -> . booleano COMMA argumentos
    (133) argumentos -> . string COMMA argumentos
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    string                         shift and go to state 62
    argumentos                     shift and go to state 151
    int                            shift and go to state 59
    double                         shift and go to state 60
    booleano                       shift and go to state 61

state 102

    (78) tuplaToString -> ID DOT TOSTRING LPAREN . RPAREN

    RPAREN          shift and go to state 152


state 103

    (103) sentencia -> if ELSE LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 153


state 104

    (18) declararVariable -> VAR ID COLON tipoValue .

    $end            reduce using rule 18 (declararVariable -> VAR ID COLON tipoValue .)
    RBRACE          reduce using rule 18 (declararVariable -> VAR ID COLON tipoValue .)
    RETURN          reduce using rule 18 (declararVariable -> VAR ID COLON tipoValue .)


state 105

    (19) declararVariable -> VAR ID COLON tipo .

    $end            reduce using rule 19 (declararVariable -> VAR ID COLON tipo .)
    RBRACE          reduce using rule 19 (declararVariable -> VAR ID COLON tipo .)
    RETURN          reduce using rule 19 (declararVariable -> VAR ID COLON tipo .)


state 106

    (57) tipoValue -> STRING_TYPE . EQUAL string
    (56) tipo -> STRING_TYPE .

    EQUAL           shift and go to state 154
    $end            reduce using rule 56 (tipo -> STRING_TYPE .)
    RBRACE          reduce using rule 56 (tipo -> STRING_TYPE .)
    RETURN          reduce using rule 56 (tipo -> STRING_TYPE .)


state 107

    (58) tipoValue -> BOOL . EQUAL booleano
    (55) tipo -> BOOL .

    EQUAL           shift and go to state 155
    $end            reduce using rule 55 (tipo -> BOOL .)
    RBRACE          reduce using rule 55 (tipo -> BOOL .)
    RETURN          reduce using rule 55 (tipo -> BOOL .)


state 108

    (59) tipoValue -> INT . EQUAL int
    (53) tipo -> INT .

    EQUAL           shift and go to state 156
    $end            reduce using rule 53 (tipo -> INT .)
    RBRACE          reduce using rule 53 (tipo -> INT .)
    RETURN          reduce using rule 53 (tipo -> INT .)


state 109

    (60) tipoValue -> DOUBLE . EQUAL double
    (54) tipo -> DOUBLE .

    EQUAL           shift and go to state 157
    $end            reduce using rule 54 (tipo -> DOUBLE .)
    RBRACE          reduce using rule 54 (tipo -> DOUBLE .)
    RETURN          reduce using rule 54 (tipo -> DOUBLE .)


state 110

    (61) tipoValue -> ARRAY . LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (62) tipoValue -> ARRAY . LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (63) tipoValue -> ARRAY . LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (64) tipoValue -> ARRAY . LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 158


state 111

    (65) tipoValue -> LIST . LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (66) tipoValue -> LIST . LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (67) tipoValue -> LIST . LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (68) tipoValue -> LIST . LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    LBRACK          shift and go to state 159


state 112

    (20) declararVariable -> VAR ID EQUAL value .

    $end            reduce using rule 20 (declararVariable -> VAR ID EQUAL value .)
    RBRACE          reduce using rule 20 (declararVariable -> VAR ID EQUAL value .)
    RETURN          reduce using rule 20 (declararVariable -> VAR ID EQUAL value .)


state 113

    (21) declararVariable -> VAR ID EQUAL expression .
    (95) expression -> expression . PLUS term
    (96) expression -> expression . MINUS term

    $end            reduce using rule 21 (declararVariable -> VAR ID EQUAL expression .)
    RBRACE          reduce using rule 21 (declararVariable -> VAR ID EQUAL expression .)
    RETURN          reduce using rule 21 (declararVariable -> VAR ID EQUAL expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40


state 114

    (22) value -> string .

    $end            reduce using rule 22 (value -> string .)
    RBRACE          reduce using rule 22 (value -> string .)
    RETURN          reduce using rule 22 (value -> string .)


state 115

    (23) value -> booleano .

    $end            reduce using rule 23 (value -> booleano .)
    RBRACE          reduce using rule 23 (value -> booleano .)
    RETURN          reduce using rule 23 (value -> booleano .)


state 116

    (24) value -> NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (25) value -> NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (26) value -> NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (27) value -> NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 160


state 117

    (28) value -> ARRAY . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 161


state 118

    (29) value -> LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 162


state 119

    (14) declararConstante -> VAL ID COLON tipoValueCons .

    $end            reduce using rule 14 (declararConstante -> VAL ID COLON tipoValueCons .)
    RBRACE          reduce using rule 14 (declararConstante -> VAL ID COLON tipoValueCons .)
    RETURN          reduce using rule 14 (declararConstante -> VAL ID COLON tipoValueCons .)


state 120

    (15) declararConstante -> VAL ID COLON tipo .

    $end            reduce using rule 15 (declararConstante -> VAL ID COLON tipo .)
    RBRACE          reduce using rule 15 (declararConstante -> VAL ID COLON tipo .)
    RETURN          reduce using rule 15 (declararConstante -> VAL ID COLON tipo .)


state 121

    (69) tipoValueCons -> STRING_TYPE . EQUAL string
    (56) tipo -> STRING_TYPE .

    EQUAL           shift and go to state 163
    $end            reduce using rule 56 (tipo -> STRING_TYPE .)
    RBRACE          reduce using rule 56 (tipo -> STRING_TYPE .)
    RETURN          reduce using rule 56 (tipo -> STRING_TYPE .)


state 122

    (70) tipoValueCons -> BOOL . EQUAL booleano
    (55) tipo -> BOOL .

    EQUAL           shift and go to state 164
    $end            reduce using rule 55 (tipo -> BOOL .)
    RBRACE          reduce using rule 55 (tipo -> BOOL .)
    RETURN          reduce using rule 55 (tipo -> BOOL .)


state 123

    (71) tipoValueCons -> INT . EQUAL int
    (53) tipo -> INT .

    EQUAL           shift and go to state 165
    $end            reduce using rule 53 (tipo -> INT .)
    RBRACE          reduce using rule 53 (tipo -> INT .)
    RETURN          reduce using rule 53 (tipo -> INT .)


state 124

    (72) tipoValueCons -> DOUBLE . EQUAL double
    (54) tipo -> DOUBLE .

    EQUAL           shift and go to state 166
    $end            reduce using rule 54 (tipo -> DOUBLE .)
    RBRACE          reduce using rule 54 (tipo -> DOUBLE .)
    RETURN          reduce using rule 54 (tipo -> DOUBLE .)


state 125

    (16) declararConstante -> VAL ID EQUAL valueCons .

    $end            reduce using rule 16 (declararConstante -> VAL ID EQUAL valueCons .)
    RBRACE          reduce using rule 16 (declararConstante -> VAL ID EQUAL valueCons .)
    RETURN          reduce using rule 16 (declararConstante -> VAL ID EQUAL valueCons .)


state 126

    (17) declararConstante -> VAL ID EQUAL expression .
    (95) expression -> expression . PLUS term
    (96) expression -> expression . MINUS term

    $end            reduce using rule 17 (declararConstante -> VAL ID EQUAL expression .)
    RBRACE          reduce using rule 17 (declararConstante -> VAL ID EQUAL expression .)
    RETURN          reduce using rule 17 (declararConstante -> VAL ID EQUAL expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40


state 127

    (50) valueCons -> string .

    $end            reduce using rule 50 (valueCons -> string .)
    RBRACE          reduce using rule 50 (valueCons -> string .)
    RETURN          reduce using rule 50 (valueCons -> string .)


state 128

    (51) valueCons -> booleano .

    $end            reduce using rule 51 (valueCons -> booleano .)
    RBRACE          reduce using rule 51 (valueCons -> booleano .)
    RETURN          reduce using rule 51 (valueCons -> booleano .)


state 129

    (52) valueCons -> tupla .

    $end            reduce using rule 52 (valueCons -> tupla .)
    RBRACE          reduce using rule 52 (valueCons -> tupla .)
    RETURN          reduce using rule 52 (valueCons -> tupla .)


state 130

    (73) tupla -> LPAREN . elementosInternos2 RPAREN
    (42) elementosInternos2 -> . int
    (43) elementosInternos2 -> . double
    (44) elementosInternos2 -> . booleano
    (45) elementosInternos2 -> . string
    (46) elementosInternos2 -> . int COMMA elementosInternos2
    (47) elementosInternos2 -> . double COMMA elementosInternos2
    (48) elementosInternos2 -> . booleano COMMA elementosInternos2
    (49) elementosInternos2 -> . string COMMA elementosInternos2
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    elementosInternos2             shift and go to state 167
    int                            shift and go to state 168
    double                         shift and go to state 169
    booleano                       shift and go to state 170
    string                         shift and go to state 171

state 131

    (110) for -> FOR LPAREN ID LM . ID RPAREN LBRACE cuerpo RBRACE

    ID              shift and go to state 172


state 132

    (86) funcionesPropias -> PRINTLN LPAREN string RPAREN .

    $end            reduce using rule 86 (funcionesPropias -> PRINTLN LPAREN string RPAREN .)
    RBRACE          reduce using rule 86 (funcionesPropias -> PRINTLN LPAREN string RPAREN .)
    RETURN          reduce using rule 86 (funcionesPropias -> PRINTLN LPAREN string RPAREN .)


state 133

    (87) funcionesPropias -> PRINTLN LPAREN booleano RPAREN .

    $end            reduce using rule 87 (funcionesPropias -> PRINTLN LPAREN booleano RPAREN .)
    RBRACE          reduce using rule 87 (funcionesPropias -> PRINTLN LPAREN booleano RPAREN .)
    RETURN          reduce using rule 87 (funcionesPropias -> PRINTLN LPAREN booleano RPAREN .)


state 134

    (88) funcionesPropias -> PRINTLN LPAREN ID RPAREN .

    $end            reduce using rule 88 (funcionesPropias -> PRINTLN LPAREN ID RPAREN .)
    RBRACE          reduce using rule 88 (funcionesPropias -> PRINTLN LPAREN ID RPAREN .)
    RETURN          reduce using rule 88 (funcionesPropias -> PRINTLN LPAREN ID RPAREN .)


state 135

    (89) funcionesPropias -> PRINTLN LPAREN expression RPAREN .

    $end            reduce using rule 89 (funcionesPropias -> PRINTLN LPAREN expression RPAREN .)
    RBRACE          reduce using rule 89 (funcionesPropias -> PRINTLN LPAREN expression RPAREN .)
    RETURN          reduce using rule 89 (funcionesPropias -> PRINTLN LPAREN expression RPAREN .)


state 136

    (106) while -> WHILE LPAREN whileclause RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 173


state 137

    (111) comparacionesVar -> ID DOT . EQUALS LPAREN ID RPAREN
    (112) comparacionesVar -> ID DOT . EQ LPAREN ID RPAREN

    EQUALS          shift and go to state 174
    EQ              shift and go to state 175


state 138

    (104) comp -> factor comparacion . factor
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    factor                         shift and go to state 176
    int                            shift and go to state 35
    double                         shift and go to state 36

state 139

    (113) comparacion -> GT .

    INT_NUMBER      reduce using rule 113 (comparacion -> GT .)
    DOUBLE_NUMBER   reduce using rule 113 (comparacion -> GT .)


state 140

    (114) comparacion -> GE .

    INT_NUMBER      reduce using rule 114 (comparacion -> GE .)
    DOUBLE_NUMBER   reduce using rule 114 (comparacion -> GE .)


state 141

    (115) comparacion -> LT .

    INT_NUMBER      reduce using rule 115 (comparacion -> LT .)
    DOUBLE_NUMBER   reduce using rule 115 (comparacion -> LT .)


state 142

    (116) comparacion -> LE .

    INT_NUMBER      reduce using rule 116 (comparacion -> LE .)
    DOUBLE_NUMBER   reduce using rule 116 (comparacion -> LE .)


state 143

    (117) comparacion -> EQUAL2 .

    INT_NUMBER      reduce using rule 117 (comparacion -> EQUAL2 .)
    DOUBLE_NUMBER   reduce using rule 117 (comparacion -> EQUAL2 .)


state 144

    (101) if -> IF LPAREN factor comparacion . factor RPAREN LBRACE cuerpo RBRACE
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    factor                         shift and go to state 177
    int                            shift and go to state 35
    double                         shift and go to state 36

state 145

    (124) parametros -> ID COLON . tipo
    (125) parametros -> ID COLON . tipo COMMA parametros
    (53) tipo -> . INT
    (54) tipo -> . DOUBLE
    (55) tipo -> . BOOL
    (56) tipo -> . STRING_TYPE

    INT             shift and go to state 179
    DOUBLE          shift and go to state 180
    BOOL            shift and go to state 181
    STRING_TYPE     shift and go to state 182

    tipo                           shift and go to state 178

state 146

    (118) defFunciones -> DEF ID LPAREN parametros RPAREN . COLON UNIT EQUAL LBRACE cuerpo RBRACE
    (120) defFunciones -> DEF ID LPAREN parametros RPAREN . COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE

    COLON           shift and go to state 183


state 147

    (119) defFunciones -> DEF ID LPAREN RPAREN COLON . UNIT EQUAL LBRACE cuerpo RBRACE
    (121) defFunciones -> DEF ID LPAREN RPAREN COLON . tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
    (53) tipo -> . INT
    (54) tipo -> . DOUBLE
    (55) tipo -> . BOOL
    (56) tipo -> . STRING_TYPE

    UNIT            shift and go to state 184
    INT             shift and go to state 179
    DOUBLE          shift and go to state 180
    BOOL            shift and go to state 181
    STRING_TYPE     shift and go to state 182

    tipo                           shift and go to state 185

state 148

    (130) argumentos -> int COMMA argumentos .

    RPAREN          reduce using rule 130 (argumentos -> int COMMA argumentos .)


state 149

    (131) argumentos -> double COMMA argumentos .

    RPAREN          reduce using rule 131 (argumentos -> double COMMA argumentos .)


state 150

    (132) argumentos -> booleano COMMA argumentos .

    RPAREN          reduce using rule 132 (argumentos -> booleano COMMA argumentos .)


state 151

    (133) argumentos -> string COMMA argumentos .

    RPAREN          reduce using rule 133 (argumentos -> string COMMA argumentos .)


state 152

    (78) tuplaToString -> ID DOT TOSTRING LPAREN RPAREN .

    $end            reduce using rule 78 (tuplaToString -> ID DOT TOSTRING LPAREN RPAREN .)
    RBRACE          reduce using rule 78 (tuplaToString -> ID DOT TOSTRING LPAREN RPAREN .)
    RETURN          reduce using rule 78 (tuplaToString -> ID DOT TOSTRING LPAREN RPAREN .)


state 153

    (103) sentencia -> if ELSE LBRACE cuerpo RBRACE .

    $end            reduce using rule 103 (sentencia -> if ELSE LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 103 (sentencia -> if ELSE LBRACE cuerpo RBRACE .)
    RETURN          reduce using rule 103 (sentencia -> if ELSE LBRACE cuerpo RBRACE .)


state 154

    (57) tipoValue -> STRING_TYPE EQUAL . string
    (138) string -> . STRING

    STRING          shift and go to state 65

    string                         shift and go to state 186

state 155

    (58) tipoValue -> BOOL EQUAL . booleano
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE

    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    booleano                       shift and go to state 187

state 156

    (59) tipoValue -> INT EQUAL . int
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 188

state 157

    (60) tipoValue -> DOUBLE EQUAL . double
    (139) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 38

    double                         shift and go to state 189

state 158

    (61) tipoValue -> ARRAY LBRACK . INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN
    (62) tipoValue -> ARRAY LBRACK . DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (63) tipoValue -> ARRAY LBRACK . BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN
    (64) tipoValue -> ARRAY LBRACK . STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    INT             shift and go to state 190
    DOUBLE          shift and go to state 191
    BOOL            shift and go to state 192
    STRING_TYPE     shift and go to state 193


state 159

    (65) tipoValue -> LIST LBRACK . INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (66) tipoValue -> LIST LBRACK . DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (67) tipoValue -> LIST LBRACK . BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN
    (68) tipoValue -> LIST LBRACK . STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    INT             shift and go to state 194
    DOUBLE          shift and go to state 195
    BOOL            shift and go to state 196
    STRING_TYPE     shift and go to state 197


state 160

    (24) value -> NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN
    (25) value -> NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN
    (26) value -> NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN
    (27) value -> NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 198


state 161

    (28) value -> ARRAY LPAREN . elementosInternos RPAREN
    (30) elementosInternos -> . elementosInternosInt
    (31) elementosInternos -> . elementosInternosDouble
    (32) elementosInternos -> . elementosInternosBool
    (33) elementosInternos -> . elementosInternosString
    (34) elementosInternosInt -> . int
    (35) elementosInternosInt -> . int COMMA elementosInternosInt
    (36) elementosInternosDouble -> . double
    (37) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (38) elementosInternosBool -> . booleano
    (39) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (40) elementosInternosString -> . string
    (41) elementosInternosString -> . string COMMA elementosInternosString
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    elementosInternos              shift and go to state 199
    elementosInternosInt           shift and go to state 200
    elementosInternosDouble        shift and go to state 201
    elementosInternosBool          shift and go to state 202
    elementosInternosString        shift and go to state 203
    int                            shift and go to state 204
    double                         shift and go to state 205
    booleano                       shift and go to state 206
    string                         shift and go to state 207

state 162

    (29) value -> LIST LPAREN . elementosInternos RPAREN
    (30) elementosInternos -> . elementosInternosInt
    (31) elementosInternos -> . elementosInternosDouble
    (32) elementosInternos -> . elementosInternosBool
    (33) elementosInternos -> . elementosInternosString
    (34) elementosInternosInt -> . int
    (35) elementosInternosInt -> . int COMMA elementosInternosInt
    (36) elementosInternosDouble -> . double
    (37) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (38) elementosInternosBool -> . booleano
    (39) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (40) elementosInternosString -> . string
    (41) elementosInternosString -> . string COMMA elementosInternosString
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    elementosInternos              shift and go to state 208
    elementosInternosInt           shift and go to state 200
    elementosInternosDouble        shift and go to state 201
    elementosInternosBool          shift and go to state 202
    elementosInternosString        shift and go to state 203
    int                            shift and go to state 204
    double                         shift and go to state 205
    booleano                       shift and go to state 206
    string                         shift and go to state 207

state 163

    (69) tipoValueCons -> STRING_TYPE EQUAL . string
    (138) string -> . STRING

    STRING          shift and go to state 65

    string                         shift and go to state 209

state 164

    (70) tipoValueCons -> BOOL EQUAL . booleano
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE

    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    booleano                       shift and go to state 210

state 165

    (71) tipoValueCons -> INT EQUAL . int
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 211

state 166

    (72) tipoValueCons -> DOUBLE EQUAL . double
    (139) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 38

    double                         shift and go to state 212

state 167

    (73) tupla -> LPAREN elementosInternos2 . RPAREN

    RPAREN          shift and go to state 213


state 168

    (42) elementosInternos2 -> int .
    (46) elementosInternos2 -> int . COMMA elementosInternos2

    RPAREN          reduce using rule 42 (elementosInternos2 -> int .)
    COMMA           shift and go to state 214


state 169

    (43) elementosInternos2 -> double .
    (47) elementosInternos2 -> double . COMMA elementosInternos2

    RPAREN          reduce using rule 43 (elementosInternos2 -> double .)
    COMMA           shift and go to state 215


state 170

    (44) elementosInternos2 -> booleano .
    (48) elementosInternos2 -> booleano . COMMA elementosInternos2

    RPAREN          reduce using rule 44 (elementosInternos2 -> booleano .)
    COMMA           shift and go to state 216


state 171

    (45) elementosInternos2 -> string .
    (49) elementosInternos2 -> string . COMMA elementosInternos2

    RPAREN          reduce using rule 45 (elementosInternos2 -> string .)
    COMMA           shift and go to state 217


state 172

    (110) for -> FOR LPAREN ID LM ID . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 218


state 173

    (106) while -> WHILE LPAREN whileclause RPAREN LBRACE . cuerpo RBRACE
    (3) cuerpo -> . expression
    (4) cuerpo -> . sentencia
    (5) cuerpo -> . declararVariable
    (6) cuerpo -> . declararConstante
    (7) cuerpo -> . funcionesTupla
    (8) cuerpo -> . funcionesList
    (9) cuerpo -> . funcionesArray
    (10) cuerpo -> . for
    (11) cuerpo -> . funcionesPropias
    (12) cuerpo -> . while
    (13) cuerpo -> . funciones
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (102) sentencia -> . if
    (103) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (18) declararVariable -> . VAR ID COLON tipoValue
    (19) declararVariable -> . VAR ID COLON tipo
    (20) declararVariable -> . VAR ID EQUAL value
    (21) declararVariable -> . VAR ID EQUAL expression
    (14) declararConstante -> . VAL ID COLON tipoValueCons
    (15) declararConstante -> . VAL ID COLON tipo
    (16) declararConstante -> . VAL ID EQUAL valueCons
    (17) declararConstante -> . VAL ID EQUAL expression
    (74) funcionesTupla -> . tuplaSwap
    (75) funcionesTupla -> . tuplaToString
    (76) funcionesTupla -> . tuplaProductIterator
    (83) funcionesList -> . listIsEmpty
    (84) funcionesList -> . listReverse
    (80) funcionesArray -> . arrayHead
    (81) funcionesArray -> . arrayTail
    (82) funcionesArray -> . arrayLength
    (110) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (85) funcionesPropias -> . INPUT LPAREN RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (87) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (88) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (89) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (106) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (122) funciones -> . ID LPAREN RPAREN
    (123) funciones -> . ID LPAREN argumentos RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (101) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (77) tuplaSwap -> . ID DOT SWAP
    (78) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (94) listIsEmpty -> . ID DOT ISEMPTY
    (93) listReverse -> . ID DOT REVERSE
    (90) arrayHead -> . ID DOT HEAD
    (91) arrayTail -> . ID DOT TAIL
    (92) arrayLength -> . ID DOT LENGTH
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    FOR             shift and go to state 29
    INPUT           shift and go to state 30
    PRINTLN         shift and go to state 31
    WHILE           shift and go to state 32
    ID              shift and go to state 16
    IF              shift and go to state 34
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    cuerpo                         shift and go to state 219
    expression                     shift and go to state 4
    sentencia                      shift and go to state 5
    declararVariable               shift and go to state 6
    declararConstante              shift and go to state 7
    funcionesTupla                 shift and go to state 8
    funcionesList                  shift and go to state 9
    funcionesArray                 shift and go to state 10
    for                            shift and go to state 11
    funcionesPropias               shift and go to state 12
    while                          shift and go to state 13
    funciones                      shift and go to state 14
    term                           shift and go to state 17
    if                             shift and go to state 18
    tuplaSwap                      shift and go to state 21
    tuplaToString                  shift and go to state 22
    tuplaProductIterator           shift and go to state 23
    listIsEmpty                    shift and go to state 24
    listReverse                    shift and go to state 25
    arrayHead                      shift and go to state 26
    arrayTail                      shift and go to state 27
    arrayLength                    shift and go to state 28
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 174

    (111) comparacionesVar -> ID DOT EQUALS . LPAREN ID RPAREN

    LPAREN          shift and go to state 220


state 175

    (112) comparacionesVar -> ID DOT EQ . LPAREN ID RPAREN

    LPAREN          shift and go to state 221


state 176

    (104) comp -> factor comparacion factor .

    RPAREN          reduce using rule 104 (comp -> factor comparacion factor .)


state 177

    (101) if -> IF LPAREN factor comparacion factor . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 222


state 178

    (124) parametros -> ID COLON tipo .
    (125) parametros -> ID COLON tipo . COMMA parametros

    RPAREN          reduce using rule 124 (parametros -> ID COLON tipo .)
    COMMA           shift and go to state 223


state 179

    (53) tipo -> INT .

    COMMA           reduce using rule 53 (tipo -> INT .)
    RPAREN          reduce using rule 53 (tipo -> INT .)
    EQUAL           reduce using rule 53 (tipo -> INT .)


state 180

    (54) tipo -> DOUBLE .

    COMMA           reduce using rule 54 (tipo -> DOUBLE .)
    RPAREN          reduce using rule 54 (tipo -> DOUBLE .)
    EQUAL           reduce using rule 54 (tipo -> DOUBLE .)


state 181

    (55) tipo -> BOOL .

    COMMA           reduce using rule 55 (tipo -> BOOL .)
    RPAREN          reduce using rule 55 (tipo -> BOOL .)
    EQUAL           reduce using rule 55 (tipo -> BOOL .)


state 182

    (56) tipo -> STRING_TYPE .

    COMMA           reduce using rule 56 (tipo -> STRING_TYPE .)
    RPAREN          reduce using rule 56 (tipo -> STRING_TYPE .)
    EQUAL           reduce using rule 56 (tipo -> STRING_TYPE .)


state 183

    (118) defFunciones -> DEF ID LPAREN parametros RPAREN COLON . UNIT EQUAL LBRACE cuerpo RBRACE
    (120) defFunciones -> DEF ID LPAREN parametros RPAREN COLON . tipo EQUAL LBRACE cuerpo RETURN ID RBRACE
    (53) tipo -> . INT
    (54) tipo -> . DOUBLE
    (55) tipo -> . BOOL
    (56) tipo -> . STRING_TYPE

    UNIT            shift and go to state 224
    INT             shift and go to state 179
    DOUBLE          shift and go to state 180
    BOOL            shift and go to state 181
    STRING_TYPE     shift and go to state 182

    tipo                           shift and go to state 225

state 184

    (119) defFunciones -> DEF ID LPAREN RPAREN COLON UNIT . EQUAL LBRACE cuerpo RBRACE

    EQUAL           shift and go to state 226


state 185

    (121) defFunciones -> DEF ID LPAREN RPAREN COLON tipo . EQUAL LBRACE cuerpo RETURN ID RBRACE

    EQUAL           shift and go to state 227


state 186

    (57) tipoValue -> STRING_TYPE EQUAL string .

    $end            reduce using rule 57 (tipoValue -> STRING_TYPE EQUAL string .)
    RBRACE          reduce using rule 57 (tipoValue -> STRING_TYPE EQUAL string .)
    RETURN          reduce using rule 57 (tipoValue -> STRING_TYPE EQUAL string .)


state 187

    (58) tipoValue -> BOOL EQUAL booleano .

    $end            reduce using rule 58 (tipoValue -> BOOL EQUAL booleano .)
    RBRACE          reduce using rule 58 (tipoValue -> BOOL EQUAL booleano .)
    RETURN          reduce using rule 58 (tipoValue -> BOOL EQUAL booleano .)


state 188

    (59) tipoValue -> INT EQUAL int .

    $end            reduce using rule 59 (tipoValue -> INT EQUAL int .)
    RBRACE          reduce using rule 59 (tipoValue -> INT EQUAL int .)
    RETURN          reduce using rule 59 (tipoValue -> INT EQUAL int .)


state 189

    (60) tipoValue -> DOUBLE EQUAL double .

    $end            reduce using rule 60 (tipoValue -> DOUBLE EQUAL double .)
    RBRACE          reduce using rule 60 (tipoValue -> DOUBLE EQUAL double .)
    RETURN          reduce using rule 60 (tipoValue -> DOUBLE EQUAL double .)


state 190

    (61) tipoValue -> ARRAY LBRACK INT . RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 228


state 191

    (62) tipoValue -> ARRAY LBRACK DOUBLE . RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 229


state 192

    (63) tipoValue -> ARRAY LBRACK BOOL . RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 230


state 193

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE . RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 231


state 194

    (65) tipoValue -> LIST LBRACK INT . RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    RBRACK          shift and go to state 232


state 195

    (66) tipoValue -> LIST LBRACK DOUBLE . RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    RBRACK          shift and go to state 233


state 196

    (67) tipoValue -> LIST LBRACK BOOL . RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    RBRACK          shift and go to state 234


state 197

    (68) tipoValue -> LIST LBRACK STRING_TYPE . RBRACK EQUAL LIST LPAREN elementosInternos RPAREN

    RBRACK          shift and go to state 235


state 198

    (24) value -> NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN
    (25) value -> NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN
    (26) value -> NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN
    (27) value -> NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN

    INT             shift and go to state 236
    DOUBLE          shift and go to state 237
    BOOL            shift and go to state 238
    STRING_TYPE     shift and go to state 239


state 199

    (28) value -> ARRAY LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 240


state 200

    (30) elementosInternos -> elementosInternosInt .

    RPAREN          reduce using rule 30 (elementosInternos -> elementosInternosInt .)


state 201

    (31) elementosInternos -> elementosInternosDouble .

    RPAREN          reduce using rule 31 (elementosInternos -> elementosInternosDouble .)


state 202

    (32) elementosInternos -> elementosInternosBool .

    RPAREN          reduce using rule 32 (elementosInternos -> elementosInternosBool .)


state 203

    (33) elementosInternos -> elementosInternosString .

    RPAREN          reduce using rule 33 (elementosInternos -> elementosInternosString .)


state 204

    (34) elementosInternosInt -> int .
    (35) elementosInternosInt -> int . COMMA elementosInternosInt

    RPAREN          reduce using rule 34 (elementosInternosInt -> int .)
    COMMA           shift and go to state 241


state 205

    (36) elementosInternosDouble -> double .
    (37) elementosInternosDouble -> double . COMMA elementosInternosDouble

    RPAREN          reduce using rule 36 (elementosInternosDouble -> double .)
    COMMA           shift and go to state 242


state 206

    (38) elementosInternosBool -> booleano .
    (39) elementosInternosBool -> booleano . COMMA elementosInternosBool

    RPAREN          reduce using rule 38 (elementosInternosBool -> booleano .)
    COMMA           shift and go to state 243


state 207

    (40) elementosInternosString -> string .
    (41) elementosInternosString -> string . COMMA elementosInternosString

    RPAREN          reduce using rule 40 (elementosInternosString -> string .)
    COMMA           shift and go to state 244


state 208

    (29) value -> LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 245


state 209

    (69) tipoValueCons -> STRING_TYPE EQUAL string .

    $end            reduce using rule 69 (tipoValueCons -> STRING_TYPE EQUAL string .)
    RBRACE          reduce using rule 69 (tipoValueCons -> STRING_TYPE EQUAL string .)
    RETURN          reduce using rule 69 (tipoValueCons -> STRING_TYPE EQUAL string .)


state 210

    (70) tipoValueCons -> BOOL EQUAL booleano .

    $end            reduce using rule 70 (tipoValueCons -> BOOL EQUAL booleano .)
    RBRACE          reduce using rule 70 (tipoValueCons -> BOOL EQUAL booleano .)
    RETURN          reduce using rule 70 (tipoValueCons -> BOOL EQUAL booleano .)


state 211

    (71) tipoValueCons -> INT EQUAL int .

    $end            reduce using rule 71 (tipoValueCons -> INT EQUAL int .)
    RBRACE          reduce using rule 71 (tipoValueCons -> INT EQUAL int .)
    RETURN          reduce using rule 71 (tipoValueCons -> INT EQUAL int .)


state 212

    (72) tipoValueCons -> DOUBLE EQUAL double .

    $end            reduce using rule 72 (tipoValueCons -> DOUBLE EQUAL double .)
    RBRACE          reduce using rule 72 (tipoValueCons -> DOUBLE EQUAL double .)
    RETURN          reduce using rule 72 (tipoValueCons -> DOUBLE EQUAL double .)


state 213

    (73) tupla -> LPAREN elementosInternos2 RPAREN .

    $end            reduce using rule 73 (tupla -> LPAREN elementosInternos2 RPAREN .)
    RBRACE          reduce using rule 73 (tupla -> LPAREN elementosInternos2 RPAREN .)
    RETURN          reduce using rule 73 (tupla -> LPAREN elementosInternos2 RPAREN .)


state 214

    (46) elementosInternos2 -> int COMMA . elementosInternos2
    (42) elementosInternos2 -> . int
    (43) elementosInternos2 -> . double
    (44) elementosInternos2 -> . booleano
    (45) elementosInternos2 -> . string
    (46) elementosInternos2 -> . int COMMA elementosInternos2
    (47) elementosInternos2 -> . double COMMA elementosInternos2
    (48) elementosInternos2 -> . booleano COMMA elementosInternos2
    (49) elementosInternos2 -> . string COMMA elementosInternos2
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    int                            shift and go to state 168
    elementosInternos2             shift and go to state 246
    double                         shift and go to state 169
    booleano                       shift and go to state 170
    string                         shift and go to state 171

state 215

    (47) elementosInternos2 -> double COMMA . elementosInternos2
    (42) elementosInternos2 -> . int
    (43) elementosInternos2 -> . double
    (44) elementosInternos2 -> . booleano
    (45) elementosInternos2 -> . string
    (46) elementosInternos2 -> . int COMMA elementosInternos2
    (47) elementosInternos2 -> . double COMMA elementosInternos2
    (48) elementosInternos2 -> . booleano COMMA elementosInternos2
    (49) elementosInternos2 -> . string COMMA elementosInternos2
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    double                         shift and go to state 169
    elementosInternos2             shift and go to state 247
    int                            shift and go to state 168
    booleano                       shift and go to state 170
    string                         shift and go to state 171

state 216

    (48) elementosInternos2 -> booleano COMMA . elementosInternos2
    (42) elementosInternos2 -> . int
    (43) elementosInternos2 -> . double
    (44) elementosInternos2 -> . booleano
    (45) elementosInternos2 -> . string
    (46) elementosInternos2 -> . int COMMA elementosInternos2
    (47) elementosInternos2 -> . double COMMA elementosInternos2
    (48) elementosInternos2 -> . booleano COMMA elementosInternos2
    (49) elementosInternos2 -> . string COMMA elementosInternos2
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    booleano                       shift and go to state 170
    elementosInternos2             shift and go to state 248
    int                            shift and go to state 168
    double                         shift and go to state 169
    string                         shift and go to state 171

state 217

    (49) elementosInternos2 -> string COMMA . elementosInternos2
    (42) elementosInternos2 -> . int
    (43) elementosInternos2 -> . double
    (44) elementosInternos2 -> . booleano
    (45) elementosInternos2 -> . string
    (46) elementosInternos2 -> . int COMMA elementosInternos2
    (47) elementosInternos2 -> . double COMMA elementosInternos2
    (48) elementosInternos2 -> . booleano COMMA elementosInternos2
    (49) elementosInternos2 -> . string COMMA elementosInternos2
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    string                         shift and go to state 171
    elementosInternos2             shift and go to state 249
    int                            shift and go to state 168
    double                         shift and go to state 169
    booleano                       shift and go to state 170

state 218

    (110) for -> FOR LPAREN ID LM ID RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 250


state 219

    (106) while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 251


state 220

    (111) comparacionesVar -> ID DOT EQUALS LPAREN . ID RPAREN

    ID              shift and go to state 252


state 221

    (112) comparacionesVar -> ID DOT EQ LPAREN . ID RPAREN

    ID              shift and go to state 253


state 222

    (101) if -> IF LPAREN factor comparacion factor RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 254


state 223

    (125) parametros -> ID COLON tipo COMMA . parametros
    (124) parametros -> . ID COLON tipo
    (125) parametros -> . ID COLON tipo COMMA parametros

    ID              shift and go to state 94

    parametros                     shift and go to state 255

state 224

    (118) defFunciones -> DEF ID LPAREN parametros RPAREN COLON UNIT . EQUAL LBRACE cuerpo RBRACE

    EQUAL           shift and go to state 256


state 225

    (120) defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo . EQUAL LBRACE cuerpo RETURN ID RBRACE

    EQUAL           shift and go to state 257


state 226

    (119) defFunciones -> DEF ID LPAREN RPAREN COLON UNIT EQUAL . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 258


state 227

    (121) defFunciones -> DEF ID LPAREN RPAREN COLON tipo EQUAL . LBRACE cuerpo RETURN ID RBRACE

    LBRACE          shift and go to state 259


state 228

    (61) tipoValue -> ARRAY LBRACK INT RBRACK . EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 260


state 229

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK . EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 261


state 230

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK . EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 262


state 231

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK . EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    EQUAL           shift and go to state 263


state 232

    (65) tipoValue -> LIST LBRACK INT RBRACK . EQUAL LIST LPAREN elementosInternos RPAREN

    EQUAL           shift and go to state 264


state 233

    (66) tipoValue -> LIST LBRACK DOUBLE RBRACK . EQUAL LIST LPAREN elementosInternos RPAREN

    EQUAL           shift and go to state 265


state 234

    (67) tipoValue -> LIST LBRACK BOOL RBRACK . EQUAL LIST LPAREN elementosInternos RPAREN

    EQUAL           shift and go to state 266


state 235

    (68) tipoValue -> LIST LBRACK STRING_TYPE RBRACK . EQUAL LIST LPAREN elementosInternos RPAREN

    EQUAL           shift and go to state 267


state 236

    (24) value -> NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 268


state 237

    (25) value -> NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 269


state 238

    (26) value -> NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 270


state 239

    (27) value -> NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 271


state 240

    (28) value -> ARRAY LPAREN elementosInternos RPAREN .

    $end            reduce using rule 28 (value -> ARRAY LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 28 (value -> ARRAY LPAREN elementosInternos RPAREN .)
    RETURN          reduce using rule 28 (value -> ARRAY LPAREN elementosInternos RPAREN .)


state 241

    (35) elementosInternosInt -> int COMMA . elementosInternosInt
    (34) elementosInternosInt -> . int
    (35) elementosInternosInt -> . int COMMA elementosInternosInt
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 204
    elementosInternosInt           shift and go to state 272

state 242

    (37) elementosInternosDouble -> double COMMA . elementosInternosDouble
    (36) elementosInternosDouble -> . double
    (37) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (139) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 38

    double                         shift and go to state 205
    elementosInternosDouble        shift and go to state 273

state 243

    (39) elementosInternosBool -> booleano COMMA . elementosInternosBool
    (38) elementosInternosBool -> . booleano
    (39) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE

    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    booleano                       shift and go to state 206
    elementosInternosBool          shift and go to state 274

state 244

    (41) elementosInternosString -> string COMMA . elementosInternosString
    (40) elementosInternosString -> . string
    (41) elementosInternosString -> . string COMMA elementosInternosString
    (138) string -> . STRING

    STRING          shift and go to state 65

    string                         shift and go to state 207
    elementosInternosString        shift and go to state 275

state 245

    (29) value -> LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 29 (value -> LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 29 (value -> LIST LPAREN elementosInternos RPAREN .)
    RETURN          reduce using rule 29 (value -> LIST LPAREN elementosInternos RPAREN .)


state 246

    (46) elementosInternos2 -> int COMMA elementosInternos2 .

    RPAREN          reduce using rule 46 (elementosInternos2 -> int COMMA elementosInternos2 .)


state 247

    (47) elementosInternos2 -> double COMMA elementosInternos2 .

    RPAREN          reduce using rule 47 (elementosInternos2 -> double COMMA elementosInternos2 .)


state 248

    (48) elementosInternos2 -> booleano COMMA elementosInternos2 .

    RPAREN          reduce using rule 48 (elementosInternos2 -> booleano COMMA elementosInternos2 .)


state 249

    (49) elementosInternos2 -> string COMMA elementosInternos2 .

    RPAREN          reduce using rule 49 (elementosInternos2 -> string COMMA elementosInternos2 .)


state 250

    (110) for -> FOR LPAREN ID LM ID RPAREN LBRACE . cuerpo RBRACE
    (3) cuerpo -> . expression
    (4) cuerpo -> . sentencia
    (5) cuerpo -> . declararVariable
    (6) cuerpo -> . declararConstante
    (7) cuerpo -> . funcionesTupla
    (8) cuerpo -> . funcionesList
    (9) cuerpo -> . funcionesArray
    (10) cuerpo -> . for
    (11) cuerpo -> . funcionesPropias
    (12) cuerpo -> . while
    (13) cuerpo -> . funciones
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (102) sentencia -> . if
    (103) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (18) declararVariable -> . VAR ID COLON tipoValue
    (19) declararVariable -> . VAR ID COLON tipo
    (20) declararVariable -> . VAR ID EQUAL value
    (21) declararVariable -> . VAR ID EQUAL expression
    (14) declararConstante -> . VAL ID COLON tipoValueCons
    (15) declararConstante -> . VAL ID COLON tipo
    (16) declararConstante -> . VAL ID EQUAL valueCons
    (17) declararConstante -> . VAL ID EQUAL expression
    (74) funcionesTupla -> . tuplaSwap
    (75) funcionesTupla -> . tuplaToString
    (76) funcionesTupla -> . tuplaProductIterator
    (83) funcionesList -> . listIsEmpty
    (84) funcionesList -> . listReverse
    (80) funcionesArray -> . arrayHead
    (81) funcionesArray -> . arrayTail
    (82) funcionesArray -> . arrayLength
    (110) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (85) funcionesPropias -> . INPUT LPAREN RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (87) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (88) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (89) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (106) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (122) funciones -> . ID LPAREN RPAREN
    (123) funciones -> . ID LPAREN argumentos RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (101) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (77) tuplaSwap -> . ID DOT SWAP
    (78) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (94) listIsEmpty -> . ID DOT ISEMPTY
    (93) listReverse -> . ID DOT REVERSE
    (90) arrayHead -> . ID DOT HEAD
    (91) arrayTail -> . ID DOT TAIL
    (92) arrayLength -> . ID DOT LENGTH
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    FOR             shift and go to state 29
    INPUT           shift and go to state 30
    PRINTLN         shift and go to state 31
    WHILE           shift and go to state 32
    ID              shift and go to state 16
    IF              shift and go to state 34
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    cuerpo                         shift and go to state 276
    expression                     shift and go to state 4
    sentencia                      shift and go to state 5
    declararVariable               shift and go to state 6
    declararConstante              shift and go to state 7
    funcionesTupla                 shift and go to state 8
    funcionesList                  shift and go to state 9
    funcionesArray                 shift and go to state 10
    for                            shift and go to state 11
    funcionesPropias               shift and go to state 12
    while                          shift and go to state 13
    funciones                      shift and go to state 14
    term                           shift and go to state 17
    if                             shift and go to state 18
    tuplaSwap                      shift and go to state 21
    tuplaToString                  shift and go to state 22
    tuplaProductIterator           shift and go to state 23
    listIsEmpty                    shift and go to state 24
    listReverse                    shift and go to state 25
    arrayHead                      shift and go to state 26
    arrayTail                      shift and go to state 27
    arrayLength                    shift and go to state 28
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 251

    (106) while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE .

    $end            reduce using rule 106 (while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 106 (while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE .)
    RETURN          reduce using rule 106 (while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE .)


state 252

    (111) comparacionesVar -> ID DOT EQUALS LPAREN ID . RPAREN

    RPAREN          shift and go to state 277


state 253

    (112) comparacionesVar -> ID DOT EQ LPAREN ID . RPAREN

    RPAREN          shift and go to state 278


state 254

    (101) if -> IF LPAREN factor comparacion factor RPAREN LBRACE . cuerpo RBRACE
    (3) cuerpo -> . expression
    (4) cuerpo -> . sentencia
    (5) cuerpo -> . declararVariable
    (6) cuerpo -> . declararConstante
    (7) cuerpo -> . funcionesTupla
    (8) cuerpo -> . funcionesList
    (9) cuerpo -> . funcionesArray
    (10) cuerpo -> . for
    (11) cuerpo -> . funcionesPropias
    (12) cuerpo -> . while
    (13) cuerpo -> . funciones
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (102) sentencia -> . if
    (103) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (18) declararVariable -> . VAR ID COLON tipoValue
    (19) declararVariable -> . VAR ID COLON tipo
    (20) declararVariable -> . VAR ID EQUAL value
    (21) declararVariable -> . VAR ID EQUAL expression
    (14) declararConstante -> . VAL ID COLON tipoValueCons
    (15) declararConstante -> . VAL ID COLON tipo
    (16) declararConstante -> . VAL ID EQUAL valueCons
    (17) declararConstante -> . VAL ID EQUAL expression
    (74) funcionesTupla -> . tuplaSwap
    (75) funcionesTupla -> . tuplaToString
    (76) funcionesTupla -> . tuplaProductIterator
    (83) funcionesList -> . listIsEmpty
    (84) funcionesList -> . listReverse
    (80) funcionesArray -> . arrayHead
    (81) funcionesArray -> . arrayTail
    (82) funcionesArray -> . arrayLength
    (110) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (85) funcionesPropias -> . INPUT LPAREN RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (87) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (88) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (89) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (106) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (122) funciones -> . ID LPAREN RPAREN
    (123) funciones -> . ID LPAREN argumentos RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (101) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (77) tuplaSwap -> . ID DOT SWAP
    (78) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (94) listIsEmpty -> . ID DOT ISEMPTY
    (93) listReverse -> . ID DOT REVERSE
    (90) arrayHead -> . ID DOT HEAD
    (91) arrayTail -> . ID DOT TAIL
    (92) arrayLength -> . ID DOT LENGTH
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    FOR             shift and go to state 29
    INPUT           shift and go to state 30
    PRINTLN         shift and go to state 31
    WHILE           shift and go to state 32
    ID              shift and go to state 16
    IF              shift and go to state 34
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    factor                         shift and go to state 33
    cuerpo                         shift and go to state 279
    expression                     shift and go to state 4
    sentencia                      shift and go to state 5
    declararVariable               shift and go to state 6
    declararConstante              shift and go to state 7
    funcionesTupla                 shift and go to state 8
    funcionesList                  shift and go to state 9
    funcionesArray                 shift and go to state 10
    for                            shift and go to state 11
    funcionesPropias               shift and go to state 12
    while                          shift and go to state 13
    funciones                      shift and go to state 14
    term                           shift and go to state 17
    if                             shift and go to state 18
    tuplaSwap                      shift and go to state 21
    tuplaToString                  shift and go to state 22
    tuplaProductIterator           shift and go to state 23
    listIsEmpty                    shift and go to state 24
    listReverse                    shift and go to state 25
    arrayHead                      shift and go to state 26
    arrayTail                      shift and go to state 27
    arrayLength                    shift and go to state 28
    int                            shift and go to state 35
    double                         shift and go to state 36

state 255

    (125) parametros -> ID COLON tipo COMMA parametros .

    RPAREN          reduce using rule 125 (parametros -> ID COLON tipo COMMA parametros .)


state 256

    (118) defFunciones -> DEF ID LPAREN parametros RPAREN COLON UNIT EQUAL . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 280


state 257

    (120) defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo EQUAL . LBRACE cuerpo RETURN ID RBRACE

    LBRACE          shift and go to state 281


state 258

    (119) defFunciones -> DEF ID LPAREN RPAREN COLON UNIT EQUAL LBRACE . cuerpo RBRACE
    (3) cuerpo -> . expression
    (4) cuerpo -> . sentencia
    (5) cuerpo -> . declararVariable
    (6) cuerpo -> . declararConstante
    (7) cuerpo -> . funcionesTupla
    (8) cuerpo -> . funcionesList
    (9) cuerpo -> . funcionesArray
    (10) cuerpo -> . for
    (11) cuerpo -> . funcionesPropias
    (12) cuerpo -> . while
    (13) cuerpo -> . funciones
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (102) sentencia -> . if
    (103) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (18) declararVariable -> . VAR ID COLON tipoValue
    (19) declararVariable -> . VAR ID COLON tipo
    (20) declararVariable -> . VAR ID EQUAL value
    (21) declararVariable -> . VAR ID EQUAL expression
    (14) declararConstante -> . VAL ID COLON tipoValueCons
    (15) declararConstante -> . VAL ID COLON tipo
    (16) declararConstante -> . VAL ID EQUAL valueCons
    (17) declararConstante -> . VAL ID EQUAL expression
    (74) funcionesTupla -> . tuplaSwap
    (75) funcionesTupla -> . tuplaToString
    (76) funcionesTupla -> . tuplaProductIterator
    (83) funcionesList -> . listIsEmpty
    (84) funcionesList -> . listReverse
    (80) funcionesArray -> . arrayHead
    (81) funcionesArray -> . arrayTail
    (82) funcionesArray -> . arrayLength
    (110) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (85) funcionesPropias -> . INPUT LPAREN RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (87) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (88) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (89) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (106) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (122) funciones -> . ID LPAREN RPAREN
    (123) funciones -> . ID LPAREN argumentos RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (101) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (77) tuplaSwap -> . ID DOT SWAP
    (78) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (94) listIsEmpty -> . ID DOT ISEMPTY
    (93) listReverse -> . ID DOT REVERSE
    (90) arrayHead -> . ID DOT HEAD
    (91) arrayTail -> . ID DOT TAIL
    (92) arrayLength -> . ID DOT LENGTH
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    FOR             shift and go to state 29
    INPUT           shift and go to state 30
    PRINTLN         shift and go to state 31
    WHILE           shift and go to state 32
    ID              shift and go to state 16
    IF              shift and go to state 34
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    cuerpo                         shift and go to state 282
    expression                     shift and go to state 4
    sentencia                      shift and go to state 5
    declararVariable               shift and go to state 6
    declararConstante              shift and go to state 7
    funcionesTupla                 shift and go to state 8
    funcionesList                  shift and go to state 9
    funcionesArray                 shift and go to state 10
    for                            shift and go to state 11
    funcionesPropias               shift and go to state 12
    while                          shift and go to state 13
    funciones                      shift and go to state 14
    term                           shift and go to state 17
    if                             shift and go to state 18
    tuplaSwap                      shift and go to state 21
    tuplaToString                  shift and go to state 22
    tuplaProductIterator           shift and go to state 23
    listIsEmpty                    shift and go to state 24
    listReverse                    shift and go to state 25
    arrayHead                      shift and go to state 26
    arrayTail                      shift and go to state 27
    arrayLength                    shift and go to state 28
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 259

    (121) defFunciones -> DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE . cuerpo RETURN ID RBRACE
    (3) cuerpo -> . expression
    (4) cuerpo -> . sentencia
    (5) cuerpo -> . declararVariable
    (6) cuerpo -> . declararConstante
    (7) cuerpo -> . funcionesTupla
    (8) cuerpo -> . funcionesList
    (9) cuerpo -> . funcionesArray
    (10) cuerpo -> . for
    (11) cuerpo -> . funcionesPropias
    (12) cuerpo -> . while
    (13) cuerpo -> . funciones
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (102) sentencia -> . if
    (103) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (18) declararVariable -> . VAR ID COLON tipoValue
    (19) declararVariable -> . VAR ID COLON tipo
    (20) declararVariable -> . VAR ID EQUAL value
    (21) declararVariable -> . VAR ID EQUAL expression
    (14) declararConstante -> . VAL ID COLON tipoValueCons
    (15) declararConstante -> . VAL ID COLON tipo
    (16) declararConstante -> . VAL ID EQUAL valueCons
    (17) declararConstante -> . VAL ID EQUAL expression
    (74) funcionesTupla -> . tuplaSwap
    (75) funcionesTupla -> . tuplaToString
    (76) funcionesTupla -> . tuplaProductIterator
    (83) funcionesList -> . listIsEmpty
    (84) funcionesList -> . listReverse
    (80) funcionesArray -> . arrayHead
    (81) funcionesArray -> . arrayTail
    (82) funcionesArray -> . arrayLength
    (110) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (85) funcionesPropias -> . INPUT LPAREN RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (87) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (88) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (89) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (106) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (122) funciones -> . ID LPAREN RPAREN
    (123) funciones -> . ID LPAREN argumentos RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (101) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (77) tuplaSwap -> . ID DOT SWAP
    (78) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (94) listIsEmpty -> . ID DOT ISEMPTY
    (93) listReverse -> . ID DOT REVERSE
    (90) arrayHead -> . ID DOT HEAD
    (91) arrayTail -> . ID DOT TAIL
    (92) arrayLength -> . ID DOT LENGTH
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    FOR             shift and go to state 29
    INPUT           shift and go to state 30
    PRINTLN         shift and go to state 31
    WHILE           shift and go to state 32
    ID              shift and go to state 16
    IF              shift and go to state 34
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    cuerpo                         shift and go to state 283
    expression                     shift and go to state 4
    sentencia                      shift and go to state 5
    declararVariable               shift and go to state 6
    declararConstante              shift and go to state 7
    funcionesTupla                 shift and go to state 8
    funcionesList                  shift and go to state 9
    funcionesArray                 shift and go to state 10
    for                            shift and go to state 11
    funcionesPropias               shift and go to state 12
    while                          shift and go to state 13
    funciones                      shift and go to state 14
    term                           shift and go to state 17
    if                             shift and go to state 18
    tuplaSwap                      shift and go to state 21
    tuplaToString                  shift and go to state 22
    tuplaProductIterator           shift and go to state 23
    listIsEmpty                    shift and go to state 24
    listReverse                    shift and go to state 25
    arrayHead                      shift and go to state 26
    arrayTail                      shift and go to state 27
    arrayLength                    shift and go to state 28
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 260

    (61) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL . NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    NEW             shift and go to state 284


state 261

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL . NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 285


state 262

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL . NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    NEW             shift and go to state 286


state 263

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL . NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    NEW             shift and go to state 287


state 264

    (65) tipoValue -> LIST LBRACK INT RBRACK EQUAL . LIST LPAREN elementosInternos RPAREN

    LIST            shift and go to state 288


state 265

    (66) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL . LIST LPAREN elementosInternos RPAREN

    LIST            shift and go to state 289


state 266

    (67) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL . LIST LPAREN elementosInternos RPAREN

    LIST            shift and go to state 290


state 267

    (68) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL . LIST LPAREN elementosInternos RPAREN

    LIST            shift and go to state 291


state 268

    (24) value -> NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 292


state 269

    (25) value -> NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 293


state 270

    (26) value -> NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 294


state 271

    (27) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 295


state 272

    (35) elementosInternosInt -> int COMMA elementosInternosInt .

    RPAREN          reduce using rule 35 (elementosInternosInt -> int COMMA elementosInternosInt .)


state 273

    (37) elementosInternosDouble -> double COMMA elementosInternosDouble .

    RPAREN          reduce using rule 37 (elementosInternosDouble -> double COMMA elementosInternosDouble .)


state 274

    (39) elementosInternosBool -> booleano COMMA elementosInternosBool .

    RPAREN          reduce using rule 39 (elementosInternosBool -> booleano COMMA elementosInternosBool .)


state 275

    (41) elementosInternosString -> string COMMA elementosInternosString .

    RPAREN          reduce using rule 41 (elementosInternosString -> string COMMA elementosInternosString .)


state 276

    (110) for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 296


state 277

    (111) comparacionesVar -> ID DOT EQUALS LPAREN ID RPAREN .

    RPAREN          reduce using rule 111 (comparacionesVar -> ID DOT EQUALS LPAREN ID RPAREN .)


state 278

    (112) comparacionesVar -> ID DOT EQ LPAREN ID RPAREN .

    RPAREN          reduce using rule 112 (comparacionesVar -> ID DOT EQ LPAREN ID RPAREN .)


state 279

    (101) if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 297


state 280

    (118) defFunciones -> DEF ID LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE . cuerpo RBRACE
    (3) cuerpo -> . expression
    (4) cuerpo -> . sentencia
    (5) cuerpo -> . declararVariable
    (6) cuerpo -> . declararConstante
    (7) cuerpo -> . funcionesTupla
    (8) cuerpo -> . funcionesList
    (9) cuerpo -> . funcionesArray
    (10) cuerpo -> . for
    (11) cuerpo -> . funcionesPropias
    (12) cuerpo -> . while
    (13) cuerpo -> . funciones
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (102) sentencia -> . if
    (103) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (18) declararVariable -> . VAR ID COLON tipoValue
    (19) declararVariable -> . VAR ID COLON tipo
    (20) declararVariable -> . VAR ID EQUAL value
    (21) declararVariable -> . VAR ID EQUAL expression
    (14) declararConstante -> . VAL ID COLON tipoValueCons
    (15) declararConstante -> . VAL ID COLON tipo
    (16) declararConstante -> . VAL ID EQUAL valueCons
    (17) declararConstante -> . VAL ID EQUAL expression
    (74) funcionesTupla -> . tuplaSwap
    (75) funcionesTupla -> . tuplaToString
    (76) funcionesTupla -> . tuplaProductIterator
    (83) funcionesList -> . listIsEmpty
    (84) funcionesList -> . listReverse
    (80) funcionesArray -> . arrayHead
    (81) funcionesArray -> . arrayTail
    (82) funcionesArray -> . arrayLength
    (110) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (85) funcionesPropias -> . INPUT LPAREN RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (87) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (88) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (89) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (106) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (122) funciones -> . ID LPAREN RPAREN
    (123) funciones -> . ID LPAREN argumentos RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (101) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (77) tuplaSwap -> . ID DOT SWAP
    (78) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (94) listIsEmpty -> . ID DOT ISEMPTY
    (93) listReverse -> . ID DOT REVERSE
    (90) arrayHead -> . ID DOT HEAD
    (91) arrayTail -> . ID DOT TAIL
    (92) arrayLength -> . ID DOT LENGTH
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    FOR             shift and go to state 29
    INPUT           shift and go to state 30
    PRINTLN         shift and go to state 31
    WHILE           shift and go to state 32
    ID              shift and go to state 16
    IF              shift and go to state 34
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    cuerpo                         shift and go to state 298
    expression                     shift and go to state 4
    sentencia                      shift and go to state 5
    declararVariable               shift and go to state 6
    declararConstante              shift and go to state 7
    funcionesTupla                 shift and go to state 8
    funcionesList                  shift and go to state 9
    funcionesArray                 shift and go to state 10
    for                            shift and go to state 11
    funcionesPropias               shift and go to state 12
    while                          shift and go to state 13
    funciones                      shift and go to state 14
    term                           shift and go to state 17
    if                             shift and go to state 18
    tuplaSwap                      shift and go to state 21
    tuplaToString                  shift and go to state 22
    tuplaProductIterator           shift and go to state 23
    listIsEmpty                    shift and go to state 24
    listReverse                    shift and go to state 25
    arrayHead                      shift and go to state 26
    arrayTail                      shift and go to state 27
    arrayLength                    shift and go to state 28
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 281

    (120) defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE . cuerpo RETURN ID RBRACE
    (3) cuerpo -> . expression
    (4) cuerpo -> . sentencia
    (5) cuerpo -> . declararVariable
    (6) cuerpo -> . declararConstante
    (7) cuerpo -> . funcionesTupla
    (8) cuerpo -> . funcionesList
    (9) cuerpo -> . funcionesArray
    (10) cuerpo -> . for
    (11) cuerpo -> . funcionesPropias
    (12) cuerpo -> . while
    (13) cuerpo -> . funciones
    (95) expression -> . expression PLUS term
    (96) expression -> . expression MINUS term
    (97) expression -> . term
    (102) sentencia -> . if
    (103) sentencia -> . if ELSE LBRACE cuerpo RBRACE
    (18) declararVariable -> . VAR ID COLON tipoValue
    (19) declararVariable -> . VAR ID COLON tipo
    (20) declararVariable -> . VAR ID EQUAL value
    (21) declararVariable -> . VAR ID EQUAL expression
    (14) declararConstante -> . VAL ID COLON tipoValueCons
    (15) declararConstante -> . VAL ID COLON tipo
    (16) declararConstante -> . VAL ID EQUAL valueCons
    (17) declararConstante -> . VAL ID EQUAL expression
    (74) funcionesTupla -> . tuplaSwap
    (75) funcionesTupla -> . tuplaToString
    (76) funcionesTupla -> . tuplaProductIterator
    (83) funcionesList -> . listIsEmpty
    (84) funcionesList -> . listReverse
    (80) funcionesArray -> . arrayHead
    (81) funcionesArray -> . arrayTail
    (82) funcionesArray -> . arrayLength
    (110) for -> . FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE
    (85) funcionesPropias -> . INPUT LPAREN RPAREN
    (86) funcionesPropias -> . PRINTLN LPAREN string RPAREN
    (87) funcionesPropias -> . PRINTLN LPAREN booleano RPAREN
    (88) funcionesPropias -> . PRINTLN LPAREN ID RPAREN
    (89) funcionesPropias -> . PRINTLN LPAREN expression RPAREN
    (106) while -> . WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE
    (122) funciones -> . ID LPAREN RPAREN
    (123) funciones -> . ID LPAREN argumentos RPAREN
    (98) term -> . term TIMES factor
    (99) term -> . term DIVIDE factor
    (100) term -> . factor
    (101) if -> . IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE
    (77) tuplaSwap -> . ID DOT SWAP
    (78) tuplaToString -> . ID DOT TOSTRING LPAREN RPAREN
    (79) tuplaProductIterator -> . ID DOT PRODUCTITERATOR
    (94) listIsEmpty -> . ID DOT ISEMPTY
    (93) listReverse -> . ID DOT REVERSE
    (90) arrayHead -> . ID DOT HEAD
    (91) arrayTail -> . ID DOT TAIL
    (92) arrayLength -> . ID DOT LENGTH
    (134) factor -> . int
    (135) factor -> . double
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER

    VAR             shift and go to state 19
    VAL             shift and go to state 20
    FOR             shift and go to state 29
    INPUT           shift and go to state 30
    PRINTLN         shift and go to state 31
    WHILE           shift and go to state 32
    ID              shift and go to state 16
    IF              shift and go to state 34
    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38

    cuerpo                         shift and go to state 299
    expression                     shift and go to state 4
    sentencia                      shift and go to state 5
    declararVariable               shift and go to state 6
    declararConstante              shift and go to state 7
    funcionesTupla                 shift and go to state 8
    funcionesList                  shift and go to state 9
    funcionesArray                 shift and go to state 10
    for                            shift and go to state 11
    funcionesPropias               shift and go to state 12
    while                          shift and go to state 13
    funciones                      shift and go to state 14
    term                           shift and go to state 17
    if                             shift and go to state 18
    tuplaSwap                      shift and go to state 21
    tuplaToString                  shift and go to state 22
    tuplaProductIterator           shift and go to state 23
    listIsEmpty                    shift and go to state 24
    listReverse                    shift and go to state 25
    arrayHead                      shift and go to state 26
    arrayTail                      shift and go to state 27
    arrayLength                    shift and go to state 28
    factor                         shift and go to state 33
    int                            shift and go to state 35
    double                         shift and go to state 36

state 282

    (119) defFunciones -> DEF ID LPAREN RPAREN COLON UNIT EQUAL LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 300


state 283

    (121) defFunciones -> DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo . RETURN ID RBRACE

    RETURN          shift and go to state 301


state 284

    (61) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW . ARRAY LBRACK INT RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 302


state 285

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW . ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 303


state 286

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW . ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 304


state 287

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW . ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 305


state 288

    (65) tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 306


state 289

    (66) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 307


state 290

    (67) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 308


state 291

    (68) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST . LPAREN elementosInternos RPAREN

    LPAREN          shift and go to state 309


state 292

    (24) value -> NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 310

state 293

    (25) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 311

state 294

    (26) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 312

state 295

    (27) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 313

state 296

    (110) for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE .

    $end            reduce using rule 110 (for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 110 (for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE .)
    RETURN          reduce using rule 110 (for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE .)


state 297

    (101) if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 101 (if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 101 (if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 101 (if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE .)
    RETURN          reduce using rule 101 (if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE .)


state 298

    (118) defFunciones -> DEF ID LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 314


state 299

    (120) defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo . RETURN ID RBRACE

    RETURN          shift and go to state 315


state 300

    (119) defFunciones -> DEF ID LPAREN RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE .

    $end            reduce using rule 119 (defFunciones -> DEF ID LPAREN RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE .)


state 301

    (121) defFunciones -> DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN . ID RBRACE

    ID              shift and go to state 316


state 302

    (61) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY . LBRACK INT RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 317


state 303

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY . LBRACK DOUBLE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 318


state 304

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY . LBRACK BOOL RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 319


state 305

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY . LBRACK STRING_TYPE RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 320


state 306

    (65) tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN . elementosInternos RPAREN
    (30) elementosInternos -> . elementosInternosInt
    (31) elementosInternos -> . elementosInternosDouble
    (32) elementosInternos -> . elementosInternosBool
    (33) elementosInternos -> . elementosInternosString
    (34) elementosInternosInt -> . int
    (35) elementosInternosInt -> . int COMMA elementosInternosInt
    (36) elementosInternosDouble -> . double
    (37) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (38) elementosInternosBool -> . booleano
    (39) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (40) elementosInternosString -> . string
    (41) elementosInternosString -> . string COMMA elementosInternosString
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    elementosInternos              shift and go to state 321
    elementosInternosInt           shift and go to state 200
    elementosInternosDouble        shift and go to state 201
    elementosInternosBool          shift and go to state 202
    elementosInternosString        shift and go to state 203
    int                            shift and go to state 204
    double                         shift and go to state 205
    booleano                       shift and go to state 206
    string                         shift and go to state 207

state 307

    (66) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN . elementosInternos RPAREN
    (30) elementosInternos -> . elementosInternosInt
    (31) elementosInternos -> . elementosInternosDouble
    (32) elementosInternos -> . elementosInternosBool
    (33) elementosInternos -> . elementosInternosString
    (34) elementosInternosInt -> . int
    (35) elementosInternosInt -> . int COMMA elementosInternosInt
    (36) elementosInternosDouble -> . double
    (37) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (38) elementosInternosBool -> . booleano
    (39) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (40) elementosInternosString -> . string
    (41) elementosInternosString -> . string COMMA elementosInternosString
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    elementosInternos              shift and go to state 322
    elementosInternosInt           shift and go to state 200
    elementosInternosDouble        shift and go to state 201
    elementosInternosBool          shift and go to state 202
    elementosInternosString        shift and go to state 203
    int                            shift and go to state 204
    double                         shift and go to state 205
    booleano                       shift and go to state 206
    string                         shift and go to state 207

state 308

    (67) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN . elementosInternos RPAREN
    (30) elementosInternos -> . elementosInternosInt
    (31) elementosInternos -> . elementosInternosDouble
    (32) elementosInternos -> . elementosInternosBool
    (33) elementosInternos -> . elementosInternosString
    (34) elementosInternosInt -> . int
    (35) elementosInternosInt -> . int COMMA elementosInternosInt
    (36) elementosInternosDouble -> . double
    (37) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (38) elementosInternosBool -> . booleano
    (39) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (40) elementosInternosString -> . string
    (41) elementosInternosString -> . string COMMA elementosInternosString
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    elementosInternos              shift and go to state 323
    elementosInternosInt           shift and go to state 200
    elementosInternosDouble        shift and go to state 201
    elementosInternosBool          shift and go to state 202
    elementosInternosString        shift and go to state 203
    int                            shift and go to state 204
    double                         shift and go to state 205
    booleano                       shift and go to state 206
    string                         shift and go to state 207

state 309

    (68) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN . elementosInternos RPAREN
    (30) elementosInternos -> . elementosInternosInt
    (31) elementosInternos -> . elementosInternosDouble
    (32) elementosInternos -> . elementosInternosBool
    (33) elementosInternos -> . elementosInternosString
    (34) elementosInternosInt -> . int
    (35) elementosInternosInt -> . int COMMA elementosInternosInt
    (36) elementosInternosDouble -> . double
    (37) elementosInternosDouble -> . double COMMA elementosInternosDouble
    (38) elementosInternosBool -> . booleano
    (39) elementosInternosBool -> . booleano COMMA elementosInternosBool
    (40) elementosInternosString -> . string
    (41) elementosInternosString -> . string COMMA elementosInternosString
    (140) int -> . INT_NUMBER
    (139) double -> . DOUBLE_NUMBER
    (136) booleano -> . TRUE
    (137) booleano -> . FALSE
    (138) string -> . STRING

    INT_NUMBER      shift and go to state 37
    DOUBLE_NUMBER   shift and go to state 38
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    STRING          shift and go to state 65

    elementosInternos              shift and go to state 324
    elementosInternosInt           shift and go to state 200
    elementosInternosDouble        shift and go to state 201
    elementosInternosBool          shift and go to state 202
    elementosInternosString        shift and go to state 203
    int                            shift and go to state 204
    double                         shift and go to state 205
    booleano                       shift and go to state 206
    string                         shift and go to state 207

state 310

    (24) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 325


state 311

    (25) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 326


state 312

    (26) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 327


state 313

    (27) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 328


state 314

    (118) defFunciones -> DEF ID LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE .

    $end            reduce using rule 118 (defFunciones -> DEF ID LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE .)


state 315

    (120) defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN . ID RBRACE

    ID              shift and go to state 329


state 316

    (121) defFunciones -> DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID . RBRACE

    RBRACE          shift and go to state 330


state 317

    (61) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK . INT RBRACK LPAREN int RPAREN

    INT             shift and go to state 331


state 318

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK . DOUBLE RBRACK LPAREN int RPAREN

    DOUBLE          shift and go to state 332


state 319

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK . BOOL RBRACK LPAREN int RPAREN

    BOOL            shift and go to state 333


state 320

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK . STRING_TYPE RBRACK LPAREN int RPAREN

    STRING_TYPE     shift and go to state 334


state 321

    (65) tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 335


state 322

    (66) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 336


state 323

    (67) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 337


state 324

    (68) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos . RPAREN

    RPAREN          shift and go to state 338


state 325

    (24) value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 24 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 24 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RETURN          reduce using rule 24 (value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 326

    (25) value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 25 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 25 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RETURN          reduce using rule 25 (value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 327

    (26) value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 26 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 26 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RETURN          reduce using rule 26 (value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 328

    (27) value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 27 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 27 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RETURN          reduce using rule 27 (value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)


state 329

    (120) defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID . RBRACE

    RBRACE          shift and go to state 339


state 330

    (121) defFunciones -> DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE .

    $end            reduce using rule 121 (defFunciones -> DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE .)


state 331

    (61) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 340


state 332

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 341


state 333

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 342


state 334

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 343


state 335

    (65) tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 65 (tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 65 (tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RETURN          reduce using rule 65 (tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)


state 336

    (66) tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 66 (tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 66 (tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RETURN          reduce using rule 66 (tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)


state 337

    (67) tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 67 (tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 67 (tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RETURN          reduce using rule 67 (tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)


state 338

    (68) tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .

    $end            reduce using rule 68 (tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RBRACE          reduce using rule 68 (tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)
    RETURN          reduce using rule 68 (tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN .)


state 339

    (120) defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE .

    $end            reduce using rule 120 (defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE .)


state 340

    (61) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 344


state 341

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 345


state 342

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 346


state 343

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 347


state 344

    (61) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN . int RPAREN
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 348

state 345

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN . int RPAREN
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 349

state 346

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN . int RPAREN
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 350

state 347

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN . int RPAREN
    (140) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 37

    int                            shift and go to state 351

state 348

    (61) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 352


state 349

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 353


state 350

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 354


state 351

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 355


state 352

    (61) tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .

    $end            reduce using rule 61 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 61 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)
    RETURN          reduce using rule 61 (tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN .)


state 353

    (62) tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 62 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 62 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)
    RETURN          reduce using rule 62 (tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN .)


state 354

    (63) tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .

    $end            reduce using rule 63 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 63 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)
    RETURN          reduce using rule 63 (tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN .)


state 355

    (64) tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .

    $end            reduce using rule 64 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 64 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)
    RETURN          reduce using rule 64 (tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    COMMA
    DECREMENT
    DEF
    DOT
    ELSE
    EQ
    EQUALS
    FOR
    HEAD
    INCREMENT
    ISEMPTY
    LENGTH
    LIST
    MOD
    OBJECT
    PRINTLN
    PRODUCTITERATOR
    RETURN
    REVERSE
    SEMICOLON
    SWAP
    TAIL
    THIS
    TOSTRING
    VAL
    WHILE
    unit

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> expression
Rule 2     cuerpo -> sentencia
Rule 3     cuerpo -> declararVariable
Rule 4     declararVariable -> VAR ID COLON tipoValue
Rule 5     declararVariable -> VAR ID COLON tipo
Rule 6     declararVariable -> VAR ID EQUAL value
Rule 7     declararVariable -> VAR ID EQUAL expression
Rule 8     value -> string
Rule 9     value -> booleano
Rule 10    tipo -> INT
Rule 11    tipo -> DOUBLE
Rule 12    tipo -> BOOL
Rule 13    tipo -> STRING_TYPE
Rule 14    value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN
Rule 15    tipoValue -> STRING_TYPE EQUAL string
Rule 16    tipoValue -> BOOL EQUAL booleano
Rule 17    tipoValue -> INT EQUAL int
Rule 18    tipoValue -> DOUBLE EQUAL double
Rule 19    expression -> expression PLUS term
Rule 20    expression -> expression MINUS term
Rule 21    expression -> term
Rule 22    term -> term TIMES factor
Rule 23    term -> term DIVIDE factor
Rule 24    term -> factor
Rule 25    sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE
Rule 26    comparacion -> GT
Rule 27    comparacion -> GE
Rule 28    comparacion -> LT
Rule 29    comparacion -> LE
Rule 30    factor -> INT_NUMBER
Rule 31    factor -> DOUBLE_NUMBER
Rule 32    booleano -> TRUE
Rule 33    booleano -> FALSE
Rule 34    string -> STRING
Rule 35    double -> DOUBLE_NUMBER
Rule 36    int -> INT_NUMBER

Terminals, with rules where they appear

ARRAY                : 14
BOOL                 : 12 16
CLASS                : 
COLON                : 4 5
COMMA                : 
DECREMENT            : 
DEF                  : 
DIVIDE               : 23
DOT                  : 
DOUBLE               : 11 18
DOUBLE_NUMBER        : 31 35
ELSE                 : 
EQ                   : 
EQUAL                : 6 7 15 16 17 18
EQUALS               : 
FALSE                : 33
FOR                  : 
GE                   : 27
GT                   : 26
HEAD                 : 
ID                   : 4 5 6 7
IF                   : 25
INCREMENT            : 
INT                  : 10 17
INT_NUMBER           : 30 36
ISEMPTY              : 
LBRACE               : 25
LBRACK               : 14
LE                   : 29
LENGTH               : 
LIST                 : 
LPAREN               : 14
LT                   : 28
MINUS                : 20
MOD                  : 
NEW                  : 14
OBJECT               : 
PLUS                 : 19
PRINTLN              : 
PRODUCTITERATOR      : 
RBRACE               : 25
RBRACK               : 14
RETURN               : 
REVERSE              : 
RPAREN               : 14
SEMICOLON            : 
STRING               : 34
STRING_TYPE          : 13 15
SWAP                 : 
TAIL                 : 
THIS                 : 
TIMES                : 22
TOSTRING             : 
TRUE                 : 32
VAL                  : 
VAR                  : 4 5 6 7
WHILE                : 
error                : 
unit                 : 

Nonterminals, with rules where they appear

booleano             : 9 16
comparacion          : 25
cuerpo               : 25 0
declararVariable     : 3
double               : 18
expression           : 1 7 19 20
factor               : 22 23 24 25 25
int                  : 14 17
sentencia            : 2
string               : 8 15
term                 : 19 20 21 22 23
tipo                 : 5 14
tipoValue            : 4
value                : 6

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (25) sentencia -> . IF factor comparacion factor LBRACE cuerpo RBRACE
    (4) declararVariable -> . VAR ID COLON tipoValue
    (5) declararVariable -> . VAR ID COLON tipo
    (6) declararVariable -> . VAR ID EQUAL value
    (7) declararVariable -> . VAR ID EQUAL expression
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (30) factor -> . INT_NUMBER
    (31) factor -> . DOUBLE_NUMBER

    IF              shift and go to state 6
    VAR             shift and go to state 8
    INT_NUMBER      shift and go to state 9
    DOUBLE_NUMBER   shift and go to state 10

    cuerpo                         shift and go to state 1
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    $end            reduce using rule 1 (cuerpo -> expression .)
    RBRACE          reduce using rule 1 (cuerpo -> expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 3

    (2) cuerpo -> sentencia .

    $end            reduce using rule 2 (cuerpo -> sentencia .)
    RBRACE          reduce using rule 2 (cuerpo -> sentencia .)


state 4

    (3) cuerpo -> declararVariable .

    $end            reduce using rule 3 (cuerpo -> declararVariable .)
    RBRACE          reduce using rule 3 (cuerpo -> declararVariable .)


state 5

    (21) expression -> term .
    (22) term -> term . TIMES factor
    (23) term -> term . DIVIDE factor

    PLUS            reduce using rule 21 (expression -> term .)
    MINUS           reduce using rule 21 (expression -> term .)
    $end            reduce using rule 21 (expression -> term .)
    RBRACE          reduce using rule 21 (expression -> term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 6

    (25) sentencia -> IF . factor comparacion factor LBRACE cuerpo RBRACE
    (30) factor -> . INT_NUMBER
    (31) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 9
    DOUBLE_NUMBER   shift and go to state 10

    factor                         shift and go to state 15

state 7

    (24) term -> factor .

    TIMES           reduce using rule 24 (term -> factor .)
    DIVIDE          reduce using rule 24 (term -> factor .)
    PLUS            reduce using rule 24 (term -> factor .)
    MINUS           reduce using rule 24 (term -> factor .)
    $end            reduce using rule 24 (term -> factor .)
    RBRACE          reduce using rule 24 (term -> factor .)


state 8

    (4) declararVariable -> VAR . ID COLON tipoValue
    (5) declararVariable -> VAR . ID COLON tipo
    (6) declararVariable -> VAR . ID EQUAL value
    (7) declararVariable -> VAR . ID EQUAL expression

    ID              shift and go to state 16


state 9

    (30) factor -> INT_NUMBER .

    TIMES           reduce using rule 30 (factor -> INT_NUMBER .)
    DIVIDE          reduce using rule 30 (factor -> INT_NUMBER .)
    PLUS            reduce using rule 30 (factor -> INT_NUMBER .)
    MINUS           reduce using rule 30 (factor -> INT_NUMBER .)
    $end            reduce using rule 30 (factor -> INT_NUMBER .)
    GT              reduce using rule 30 (factor -> INT_NUMBER .)
    GE              reduce using rule 30 (factor -> INT_NUMBER .)
    LT              reduce using rule 30 (factor -> INT_NUMBER .)
    LE              reduce using rule 30 (factor -> INT_NUMBER .)
    RBRACE          reduce using rule 30 (factor -> INT_NUMBER .)
    LBRACE          reduce using rule 30 (factor -> INT_NUMBER .)


state 10

    (31) factor -> DOUBLE_NUMBER .

    TIMES           reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    DIVIDE          reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    PLUS            reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    MINUS           reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    $end            reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    GT              reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    GE              reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    LT              reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    LE              reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    RBRACE          reduce using rule 31 (factor -> DOUBLE_NUMBER .)
    LBRACE          reduce using rule 31 (factor -> DOUBLE_NUMBER .)


state 11

    (19) expression -> expression PLUS . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (30) factor -> . INT_NUMBER
    (31) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 9
    DOUBLE_NUMBER   shift and go to state 10

    term                           shift and go to state 17
    factor                         shift and go to state 7

state 12

    (20) expression -> expression MINUS . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (30) factor -> . INT_NUMBER
    (31) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 9
    DOUBLE_NUMBER   shift and go to state 10

    term                           shift and go to state 18
    factor                         shift and go to state 7

state 13

    (22) term -> term TIMES . factor
    (30) factor -> . INT_NUMBER
    (31) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 9
    DOUBLE_NUMBER   shift and go to state 10

    factor                         shift and go to state 19

state 14

    (23) term -> term DIVIDE . factor
    (30) factor -> . INT_NUMBER
    (31) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 9
    DOUBLE_NUMBER   shift and go to state 10

    factor                         shift and go to state 20

state 15

    (25) sentencia -> IF factor . comparacion factor LBRACE cuerpo RBRACE
    (26) comparacion -> . GT
    (27) comparacion -> . GE
    (28) comparacion -> . LT
    (29) comparacion -> . LE

    GT              shift and go to state 22
    GE              shift and go to state 23
    LT              shift and go to state 24
    LE              shift and go to state 25

    comparacion                    shift and go to state 21

state 16

    (4) declararVariable -> VAR ID . COLON tipoValue
    (5) declararVariable -> VAR ID . COLON tipo
    (6) declararVariable -> VAR ID . EQUAL value
    (7) declararVariable -> VAR ID . EQUAL expression

    COLON           shift and go to state 26
    EQUAL           shift and go to state 27


state 17

    (19) expression -> expression PLUS term .
    (22) term -> term . TIMES factor
    (23) term -> term . DIVIDE factor

    PLUS            reduce using rule 19 (expression -> expression PLUS term .)
    MINUS           reduce using rule 19 (expression -> expression PLUS term .)
    $end            reduce using rule 19 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 19 (expression -> expression PLUS term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 18

    (20) expression -> expression MINUS term .
    (22) term -> term . TIMES factor
    (23) term -> term . DIVIDE factor

    PLUS            reduce using rule 20 (expression -> expression MINUS term .)
    MINUS           reduce using rule 20 (expression -> expression MINUS term .)
    $end            reduce using rule 20 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 20 (expression -> expression MINUS term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 19

    (22) term -> term TIMES factor .

    TIMES           reduce using rule 22 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 22 (term -> term TIMES factor .)
    PLUS            reduce using rule 22 (term -> term TIMES factor .)
    MINUS           reduce using rule 22 (term -> term TIMES factor .)
    $end            reduce using rule 22 (term -> term TIMES factor .)
    RBRACE          reduce using rule 22 (term -> term TIMES factor .)


state 20

    (23) term -> term DIVIDE factor .

    TIMES           reduce using rule 23 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 23 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 23 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 23 (term -> term DIVIDE factor .)
    $end            reduce using rule 23 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 23 (term -> term DIVIDE factor .)


state 21

    (25) sentencia -> IF factor comparacion . factor LBRACE cuerpo RBRACE
    (30) factor -> . INT_NUMBER
    (31) factor -> . DOUBLE_NUMBER

    INT_NUMBER      shift and go to state 9
    DOUBLE_NUMBER   shift and go to state 10

    factor                         shift and go to state 28

state 22

    (26) comparacion -> GT .

    INT_NUMBER      reduce using rule 26 (comparacion -> GT .)
    DOUBLE_NUMBER   reduce using rule 26 (comparacion -> GT .)


state 23

    (27) comparacion -> GE .

    INT_NUMBER      reduce using rule 27 (comparacion -> GE .)
    DOUBLE_NUMBER   reduce using rule 27 (comparacion -> GE .)


state 24

    (28) comparacion -> LT .

    INT_NUMBER      reduce using rule 28 (comparacion -> LT .)
    DOUBLE_NUMBER   reduce using rule 28 (comparacion -> LT .)


state 25

    (29) comparacion -> LE .

    INT_NUMBER      reduce using rule 29 (comparacion -> LE .)
    DOUBLE_NUMBER   reduce using rule 29 (comparacion -> LE .)


state 26

    (4) declararVariable -> VAR ID COLON . tipoValue
    (5) declararVariable -> VAR ID COLON . tipo
    (15) tipoValue -> . STRING_TYPE EQUAL string
    (16) tipoValue -> . BOOL EQUAL booleano
    (17) tipoValue -> . INT EQUAL int
    (18) tipoValue -> . DOUBLE EQUAL double
    (10) tipo -> . INT
    (11) tipo -> . DOUBLE
    (12) tipo -> . BOOL
    (13) tipo -> . STRING_TYPE

    STRING_TYPE     shift and go to state 31
    BOOL            shift and go to state 32
    INT             shift and go to state 33
    DOUBLE          shift and go to state 34

    tipoValue                      shift and go to state 29
    tipo                           shift and go to state 30

state 27

    (6) declararVariable -> VAR ID EQUAL . value
    (7) declararVariable -> VAR ID EQUAL . expression
    (8) value -> . string
    (9) value -> . booleano
    (14) value -> . NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (34) string -> . STRING
    (32) booleano -> . TRUE
    (33) booleano -> . FALSE
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (30) factor -> . INT_NUMBER
    (31) factor -> . DOUBLE_NUMBER

    NEW             shift and go to state 39
    STRING          shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    INT_NUMBER      shift and go to state 9
    DOUBLE_NUMBER   shift and go to state 10

    value                          shift and go to state 35
    expression                     shift and go to state 36
    string                         shift and go to state 37
    booleano                       shift and go to state 38
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 28

    (25) sentencia -> IF factor comparacion factor . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 43


state 29

    (4) declararVariable -> VAR ID COLON tipoValue .

    $end            reduce using rule 4 (declararVariable -> VAR ID COLON tipoValue .)
    RBRACE          reduce using rule 4 (declararVariable -> VAR ID COLON tipoValue .)


state 30

    (5) declararVariable -> VAR ID COLON tipo .

    $end            reduce using rule 5 (declararVariable -> VAR ID COLON tipo .)
    RBRACE          reduce using rule 5 (declararVariable -> VAR ID COLON tipo .)


state 31

    (15) tipoValue -> STRING_TYPE . EQUAL string
    (13) tipo -> STRING_TYPE .

    EQUAL           shift and go to state 44
    $end            reduce using rule 13 (tipo -> STRING_TYPE .)
    RBRACE          reduce using rule 13 (tipo -> STRING_TYPE .)


state 32

    (16) tipoValue -> BOOL . EQUAL booleano
    (12) tipo -> BOOL .

    EQUAL           shift and go to state 45
    $end            reduce using rule 12 (tipo -> BOOL .)
    RBRACE          reduce using rule 12 (tipo -> BOOL .)


state 33

    (17) tipoValue -> INT . EQUAL int
    (10) tipo -> INT .

    EQUAL           shift and go to state 46
    $end            reduce using rule 10 (tipo -> INT .)
    RBRACE          reduce using rule 10 (tipo -> INT .)


state 34

    (18) tipoValue -> DOUBLE . EQUAL double
    (11) tipo -> DOUBLE .

    EQUAL           shift and go to state 47
    $end            reduce using rule 11 (tipo -> DOUBLE .)
    RBRACE          reduce using rule 11 (tipo -> DOUBLE .)


state 35

    (6) declararVariable -> VAR ID EQUAL value .

    $end            reduce using rule 6 (declararVariable -> VAR ID EQUAL value .)
    RBRACE          reduce using rule 6 (declararVariable -> VAR ID EQUAL value .)


state 36

    (7) declararVariable -> VAR ID EQUAL expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    $end            reduce using rule 7 (declararVariable -> VAR ID EQUAL expression .)
    RBRACE          reduce using rule 7 (declararVariable -> VAR ID EQUAL expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 37

    (8) value -> string .

    $end            reduce using rule 8 (value -> string .)
    RBRACE          reduce using rule 8 (value -> string .)


state 38

    (9) value -> booleano .

    $end            reduce using rule 9 (value -> booleano .)
    RBRACE          reduce using rule 9 (value -> booleano .)


state 39

    (14) value -> NEW . ARRAY LBRACK tipo RBRACK LPAREN int RPAREN

    ARRAY           shift and go to state 48


state 40

    (34) string -> STRING .

    $end            reduce using rule 34 (string -> STRING .)
    RBRACE          reduce using rule 34 (string -> STRING .)


state 41

    (32) booleano -> TRUE .

    $end            reduce using rule 32 (booleano -> TRUE .)
    RBRACE          reduce using rule 32 (booleano -> TRUE .)


state 42

    (33) booleano -> FALSE .

    $end            reduce using rule 33 (booleano -> FALSE .)
    RBRACE          reduce using rule 33 (booleano -> FALSE .)


state 43

    (25) sentencia -> IF factor comparacion factor LBRACE . cuerpo RBRACE
    (1) cuerpo -> . expression
    (2) cuerpo -> . sentencia
    (3) cuerpo -> . declararVariable
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (25) sentencia -> . IF factor comparacion factor LBRACE cuerpo RBRACE
    (4) declararVariable -> . VAR ID COLON tipoValue
    (5) declararVariable -> . VAR ID COLON tipo
    (6) declararVariable -> . VAR ID EQUAL value
    (7) declararVariable -> . VAR ID EQUAL expression
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (30) factor -> . INT_NUMBER
    (31) factor -> . DOUBLE_NUMBER

    IF              shift and go to state 6
    VAR             shift and go to state 8
    INT_NUMBER      shift and go to state 9
    DOUBLE_NUMBER   shift and go to state 10

    factor                         shift and go to state 7
    cuerpo                         shift and go to state 49
    expression                     shift and go to state 2
    sentencia                      shift and go to state 3
    declararVariable               shift and go to state 4
    term                           shift and go to state 5

state 44

    (15) tipoValue -> STRING_TYPE EQUAL . string
    (34) string -> . STRING

    STRING          shift and go to state 40

    string                         shift and go to state 50

state 45

    (16) tipoValue -> BOOL EQUAL . booleano
    (32) booleano -> . TRUE
    (33) booleano -> . FALSE

    TRUE            shift and go to state 41
    FALSE           shift and go to state 42

    booleano                       shift and go to state 51

state 46

    (17) tipoValue -> INT EQUAL . int
    (36) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 53

    int                            shift and go to state 52

state 47

    (18) tipoValue -> DOUBLE EQUAL . double
    (35) double -> . DOUBLE_NUMBER

    DOUBLE_NUMBER   shift and go to state 55

    double                         shift and go to state 54

state 48

    (14) value -> NEW ARRAY . LBRACK tipo RBRACK LPAREN int RPAREN

    LBRACK          shift and go to state 56


state 49

    (25) sentencia -> IF factor comparacion factor LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 57


state 50

    (15) tipoValue -> STRING_TYPE EQUAL string .

    $end            reduce using rule 15 (tipoValue -> STRING_TYPE EQUAL string .)
    RBRACE          reduce using rule 15 (tipoValue -> STRING_TYPE EQUAL string .)


state 51

    (16) tipoValue -> BOOL EQUAL booleano .

    $end            reduce using rule 16 (tipoValue -> BOOL EQUAL booleano .)
    RBRACE          reduce using rule 16 (tipoValue -> BOOL EQUAL booleano .)


state 52

    (17) tipoValue -> INT EQUAL int .

    $end            reduce using rule 17 (tipoValue -> INT EQUAL int .)
    RBRACE          reduce using rule 17 (tipoValue -> INT EQUAL int .)


state 53

    (36) int -> INT_NUMBER .

    $end            reduce using rule 36 (int -> INT_NUMBER .)
    RBRACE          reduce using rule 36 (int -> INT_NUMBER .)
    RPAREN          reduce using rule 36 (int -> INT_NUMBER .)


state 54

    (18) tipoValue -> DOUBLE EQUAL double .

    $end            reduce using rule 18 (tipoValue -> DOUBLE EQUAL double .)
    RBRACE          reduce using rule 18 (tipoValue -> DOUBLE EQUAL double .)


state 55

    (35) double -> DOUBLE_NUMBER .

    $end            reduce using rule 35 (double -> DOUBLE_NUMBER .)
    RBRACE          reduce using rule 35 (double -> DOUBLE_NUMBER .)


state 56

    (14) value -> NEW ARRAY LBRACK . tipo RBRACK LPAREN int RPAREN
    (10) tipo -> . INT
    (11) tipo -> . DOUBLE
    (12) tipo -> . BOOL
    (13) tipo -> . STRING_TYPE

    INT             shift and go to state 59
    DOUBLE          shift and go to state 60
    BOOL            shift and go to state 61
    STRING_TYPE     shift and go to state 62

    tipo                           shift and go to state 58

state 57

    (25) sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE .

    $end            reduce using rule 25 (sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 25 (sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE .)


state 58

    (14) value -> NEW ARRAY LBRACK tipo . RBRACK LPAREN int RPAREN

    RBRACK          shift and go to state 63


state 59

    (10) tipo -> INT .

    RBRACK          reduce using rule 10 (tipo -> INT .)


state 60

    (11) tipo -> DOUBLE .

    RBRACK          reduce using rule 11 (tipo -> DOUBLE .)


state 61

    (12) tipo -> BOOL .

    RBRACK          reduce using rule 12 (tipo -> BOOL .)


state 62

    (13) tipo -> STRING_TYPE .

    RBRACK          reduce using rule 13 (tipo -> STRING_TYPE .)


state 63

    (14) value -> NEW ARRAY LBRACK tipo RBRACK . LPAREN int RPAREN

    LPAREN          shift and go to state 64


state 64

    (14) value -> NEW ARRAY LBRACK tipo RBRACK LPAREN . int RPAREN
    (36) int -> . INT_NUMBER

    INT_NUMBER      shift and go to state 53

    int                            shift and go to state 65

state 65

    (14) value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int . RPAREN

    RPAREN          shift and go to state 66


state 66

    (14) value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN .

    $end            reduce using rule 14 (value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN .)
    RBRACE          reduce using rule 14 (value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN .)



# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | funcionesTupla\n             | funcionesArraydeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPAREN\n            | LIST LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEvalue : NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN\n        tipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n                | LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK STRING_TYPE RBRACK EQUAL STRING_TYPE LPAREN elementosInternos RPAREN\n                \n                tipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRINGtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengtharrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : INT_NUMBERfactor : DOUBLE_NUMBERbooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,64,],[8,8,]),'VAR':([0,64,],[10,10,]),'ID':([0,10,64,],[11,25,11,]),'INT_NUMBER':([0,8,20,21,22,23,31,32,33,34,35,36,38,64,67,72,73,115,145,146,147,148,149,154,155,156,157,188,189,190,191,],[18,18,18,18,18,18,18,-82,-83,-84,-85,-86,18,18,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'DOUBLE_NUMBER':([0,8,20,21,22,23,31,32,33,34,35,36,38,64,68,72,73,116,154,155,156,157,],[19,19,19,19,19,19,19,-82,-83,-84,-85,-86,19,19,80,80,80,80,80,80,80,80,]),'$end':([1,2,3,4,5,6,7,9,12,13,14,15,16,17,18,19,27,28,29,30,39,40,41,42,43,44,46,47,48,49,50,51,54,55,56,57,61,62,63,75,76,77,78,79,80,100,114,119,171,172,173,174,175,180,181,182,183,196,197,198,199,],[0,-1,-2,-3,-4,-5,-77,-80,-63,-64,-65,-69,-70,-71,-87,-88,-75,-76,-78,-79,-66,-67,-68,-72,-73,-74,-6,-7,-44,-43,-41,-42,-8,-9,-10,-11,-91,-89,-90,-46,-47,-48,-93,-49,-92,-81,-16,-17,-12,-13,-14,-15,-45,-54,-55,-56,-57,-50,-51,-52,-53,]),'RBRACE':([2,3,4,5,6,7,9,12,13,14,15,16,17,18,19,27,28,29,30,39,40,41,42,43,44,46,47,48,49,50,51,54,55,56,57,61,62,63,74,75,76,77,78,79,80,100,114,119,171,172,173,174,175,180,181,182,183,196,197,198,199,],[-1,-2,-3,-4,-5,-77,-80,-63,-64,-65,-69,-70,-71,-87,-88,-75,-76,-78,-79,-66,-67,-68,-72,-73,-74,-6,-7,-44,-43,-41,-42,-8,-9,-10,-11,-91,-89,-90,100,-46,-47,-48,-93,-49,-92,-81,-16,-17,-12,-13,-14,-15,-45,-54,-55,-56,-57,-50,-51,-52,-53,]),'PLUS':([2,7,9,18,19,27,28,29,30,55,],[20,-77,-80,-87,-88,-75,-76,-78,-79,20,]),'MINUS':([2,7,9,18,19,27,28,29,30,55,],[21,-77,-80,-87,-88,-75,-76,-78,-79,21,]),'TIMES':([7,9,18,19,27,28,29,30,],[22,-80,-87,-88,22,22,-78,-79,]),'DIVIDE':([7,9,18,19,27,28,29,30,],[23,-80,-87,-88,23,23,-78,-79,]),'DOT':([11,],[26,]),'GT':([18,19,24,],[-87,-88,32,]),'GE':([18,19,24,],[-87,-88,33,]),'LT':([18,19,24,],[-87,-88,34,]),'LE':([18,19,24,],[-87,-88,35,]),'EQUAL2':([18,19,24,],[-87,-88,36,]),'LBRACE':([18,19,45,],[-87,-88,64,]),'COLON':([25,],[37,]),'EQUAL':([25,48,49,50,51,101,102,103,104,105,106,107,108,],[38,65,66,67,68,120,121,122,123,124,125,126,127,]),'SWAP':([26,],[39,]),'TOSTRING':([26,],[40,]),'PRODUCTITERATOR':([26,],[41,]),'HEAD':([26,],[42,]),'TAIL':([26,],[43,]),'LENGTH':([26,],[44,]),'STRING_TYPE':([37,69,70,89,127,166,],[48,84,88,112,144,179,]),'BOOL':([37,69,70,89,165,],[49,83,87,111,178,]),'INT':([37,69,70,89,163,],[50,81,85,109,176,]),'DOUBLE':([37,69,70,89,164,],[51,82,86,110,177,]),'ARRAY':([37,38,58,137,138,139,140,],[52,59,71,150,151,152,153,]),'LIST':([37,38,124,125,126,],[53,60,141,142,143,]),'NEW':([38,120,121,122,123,],[58,137,138,139,140,]),'STRING':([38,65,72,73,118,154,155,156,157,],[61,61,61,61,61,61,61,61,61,]),'TRUE':([38,66,72,73,117,154,155,156,157,],[62,62,62,62,62,62,62,62,62,]),'FALSE':([38,66,72,73,117,154,155,156,157,],[63,63,63,63,63,63,63,63,63,]),'LBRACK':([52,53,71,150,151,152,153,],[69,70,89,163,164,165,166,]),'LPAREN':([59,60,128,129,130,131,132,141,142,143,144,184,185,186,187,],[72,73,145,146,147,148,149,154,155,156,157,188,189,190,191,]),'COMMA':([61,62,63,78,80,95,96,97,98,],[-91,-89,-90,-93,-92,115,116,117,118,]),'RPAREN':([61,62,63,78,80,90,91,92,93,94,95,96,97,98,99,133,134,135,136,158,159,160,161,162,167,168,169,170,192,193,194,195,],[-91,-89,-90,-93,-92,114,-18,-19,-20,-21,-22,-24,-26,-28,119,-23,-25,-27,-29,171,172,173,174,175,180,181,182,183,196,197,198,199,]),'RBRACK':([81,82,83,84,85,86,87,88,109,110,111,112,113,176,177,178,179,],[101,102,103,104,105,106,107,108,128,129,130,131,132,184,185,186,187,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,64,],[1,74,]),'expression':([0,38,64,],[2,55,2,]),'sentencia':([0,64,],[3,3,]),'declararVariable':([0,64,],[4,4,]),'funcionesTupla':([0,64,],[5,5,]),'funcionesArray':([0,64,],[6,6,]),'term':([0,20,21,38,64,],[7,27,28,7,7,]),'factor':([0,8,20,21,22,23,31,38,64,],[9,24,9,9,29,30,45,9,9,]),'tuplaSwap':([0,64,],[12,12,]),'tuplaToString':([0,64,],[13,13,]),'tuplaProductIterator':([0,64,],[14,14,]),'arrayHead':([0,64,],[15,15,]),'arrayTail':([0,64,],[16,16,]),'arrayLength':([0,64,],[17,17,]),'comparacion':([24,],[31,]),'tipoValue':([37,],[46,]),'tipo':([37,89,],[47,113,]),'value':([38,],[54,]),'string':([38,65,72,73,118,154,155,156,157,],[56,75,98,98,98,98,98,98,98,]),'booleano':([38,66,72,73,117,154,155,156,157,],[57,76,97,97,97,97,97,97,97,]),'int':([67,72,73,115,145,146,147,148,149,154,155,156,157,188,189,190,191,],[77,95,95,95,158,159,160,161,162,95,95,95,95,192,193,194,195,]),'double':([68,72,73,116,154,155,156,157,],[79,96,96,96,96,96,96,96,]),'elementosInternos':([72,73,154,155,156,157,],[90,99,167,168,169,170,]),'elementosInternosInt':([72,73,115,154,155,156,157,],[91,91,133,91,91,91,91,]),'elementosInternosDouble':([72,73,116,154,155,156,157,],[92,92,134,92,92,92,92,]),'elementosInternosBool':([72,73,117,154,155,156,157,],[93,93,135,93,93,93,93,]),'elementosInternosString':([72,73,118,154,155,156,157,],[94,94,136,94,94,94,94,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',17),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',18),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',19),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',20),
  ('value -> string','value',1,'p_value','scalaSintactico.py',23),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',24),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',25),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',26),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',27),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',28),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',29),
  ('value -> LIST LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',30),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',34),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',35),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',36),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',37),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',40),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',41),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',44),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',45),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',48),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',49),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',52),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',53),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',56),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',57),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',58),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',59),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',60),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',61),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',62),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',63),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',66),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',67),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',68),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',71),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',72),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',73),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',74),
  ('value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN','value',8,'p_newarray','scalaSintactico.py',81),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',85),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',86),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',87),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',88),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',89),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',90),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',91),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',92),
  ('tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',93),
  ('tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',94),
  ('tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',95),
  ('tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL STRING_TYPE LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',96),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',101),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',102),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',103),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',104),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',108),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',111),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',112),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',113),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',116),
  ('tuplaToString -> ID DOT TOSTRING','tuplaToString',3,'p_tuplaToString','scalaSintactico.py',119),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',122),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',125),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',126),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',127),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',130),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',133),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',136),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',139),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',143),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',147),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',151),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',155),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',159),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',163),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',167),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',168),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',169),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',170),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',171),
  ('factor -> INT_NUMBER','factor',1,'p_factor_int','scalaSintactico.py',174),
  ('factor -> DOUBLE_NUMBER','factor',1,'p_factor_double','scalaSintactico.py',177),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',180),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',181),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',184),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',187),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',190),
]

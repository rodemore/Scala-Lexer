
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INPUT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LM LPAREN LT MINUS MOD NEW OBJECT OR PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstante\n             | funcionesTupla\n             | funcionesArray\n             | for\n             | funcionesPropias\n             | whiledeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPAREN\n            | LIST LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n                | LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRING LPAREN RPARENtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengthfuncionesPropias : INPUT LPAREN RPAREN\n            | PRINTLN LPAREN string RPAREN\n            | PRINTLN LPAREN booleano RPAREN\n            | PRINTLN LPAREN ID RPAREN\n            | PRINTLN LPAREN expression RPARENarrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEcomp : factor comparacion factorwhile : WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACEwhileclause : comp\n                | ID\n                | booleanofor : FOR LPAREN  RPAREN LBRACE  LBRACE  RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : intfactor : doublebooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,113,134,],[12,12,12,]),'VAR':([0,113,134,],[14,14,14,]),'VAL':([0,113,134,],[16,16,16,]),'FOR':([0,113,134,],[23,23,23,]),'INPUT':([0,113,134,],[24,24,24,]),'PRINTLN':([0,113,134,],[25,25,25,]),'WHILE':([0,113,134,],[26,26,26,]),'ID':([0,14,16,41,42,113,134,],[15,36,38,67,74,15,15,]),'INT_NUMBER':([0,12,31,32,33,34,41,42,47,48,49,50,51,52,54,62,105,112,113,116,121,122,126,134,165,166,167,168,185,219,220,221,222,227,228,229,230,259,260,261,262,],[29,29,29,29,29,29,29,29,29,-100,-101,-102,-103,-104,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'DOUBLE_NUMBER':([0,12,31,32,33,34,41,42,47,48,49,50,51,52,54,62,105,112,113,117,121,122,127,134,165,166,167,168,186,227,228,229,230,],[30,30,30,30,30,30,30,30,30,-100,-101,-102,-103,-104,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,13,17,18,19,20,21,22,27,28,29,30,43,44,45,46,55,57,58,59,60,64,69,70,71,78,79,80,81,82,83,86,87,88,89,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,123,137,138,139,140,160,161,162,163,164,169,171,184,189,194,243,244,245,246,251,252,253,254,267,268,269,270,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-89,-92,-70,-71,-72,-76,-77,-78,-105,-106,-111,-110,-87,-88,-90,-91,-73,-75,-84,-85,-86,-79,-109,-107,-108,-14,-15,-52,-51,-49,-50,-16,-17,-18,-19,-10,-11,-52,-51,-49,-50,-12,-13,-46,-47,-48,-80,-81,-82,-83,-74,-53,-54,-55,-56,-65,-66,-67,-68,-69,-99,-93,-24,-25,-95,-20,-21,-22,-23,-61,-62,-63,-64,-57,-58,-59,-60,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,13,17,18,19,20,21,22,27,28,29,30,43,44,45,46,55,57,58,59,60,64,69,70,71,78,79,80,81,82,83,86,87,88,89,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,123,133,136,137,138,139,140,160,161,162,163,164,169,170,171,184,189,194,243,244,245,246,251,252,253,254,267,268,269,270,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-89,-92,-70,-71,-72,-76,-77,-78,-105,-106,-111,-110,-87,-88,-90,-91,-73,-75,-84,-85,-86,-79,-109,-107,-108,-14,-15,-52,-51,-49,-50,-16,-17,-18,-19,-10,-11,-52,-51,-49,-50,-12,-13,-46,-47,-48,-80,-81,-82,-83,-74,169,171,-53,-54,-55,-56,-65,-66,-67,-68,-69,-99,194,-93,-24,-25,-95,-20,-21,-22,-23,-61,-62,-63,-64,-57,-58,-59,-60,]),'PLUS':([2,11,13,27,28,29,30,43,44,45,46,68,87,101,],[31,-89,-92,-105,-106,-111,-110,-87,-88,-90,-91,31,31,31,]),'MINUS':([2,11,13,27,28,29,30,43,44,45,46,68,87,101,],[32,-89,-92,-105,-106,-111,-110,-87,-88,-90,-91,32,32,32,]),'RPAREN':([11,13,27,28,29,30,39,40,43,44,45,46,65,66,67,68,69,70,71,72,73,74,75,93,128,129,130,131,132,135,150,151,152,153,154,155,156,157,158,159,190,191,192,193,207,208,209,210,231,232,233,234,239,240,241,242,263,264,265,266,],[-89,-92,-105,-106,-111,-110,63,64,-87,-88,-90,-91,107,108,109,110,-109,-107,-108,111,-96,-97,-98,123,164,-38,-39,-40,-41,-94,184,-26,-27,-28,-29,-30,-32,-34,-36,189,-42,-43,-44,-45,-31,-33,-35,-37,243,244,245,246,251,252,253,254,267,268,269,270,]),'TIMES':([11,13,27,28,29,30,43,44,45,46,],[33,-92,-105,-106,-111,-110,33,33,-90,-91,]),'DIVIDE':([11,13,27,28,29,30,43,44,45,46,],[34,-92,-105,-106,-111,-110,34,34,-90,-91,]),'DOT':([15,],[37,]),'LPAREN':([23,24,25,26,56,62,91,92,203,204,205,206,215,216,217,218,255,256,257,258,],[39,40,41,42,93,105,121,122,219,220,221,222,227,228,229,230,259,260,261,262,]),'GT':([27,28,29,30,35,76,],[-105,-106,-111,-110,48,48,]),'GE':([27,28,29,30,35,76,],[-105,-106,-111,-110,49,49,]),'LT':([27,28,29,30,35,76,],[-105,-106,-111,-110,50,50,]),'LE':([27,28,29,30,35,76,],[-105,-106,-111,-110,51,51,]),'EQUAL2':([27,28,29,30,35,76,],[-105,-106,-111,-110,52,52,]),'LBRACE':([27,28,29,30,63,77,106,111,],[-105,-106,-111,-110,106,113,133,134,]),'COMMA':([29,30,69,70,71,129,130,131,132,155,156,157,158,],[-111,-110,-109,-107,-108,165,166,167,168,185,186,187,188,]),'COLON':([36,38,],[53,61,]),'EQUAL':([36,38,80,81,82,83,96,97,98,99,172,173,174,175,176,177,178,179,],[54,62,114,115,116,117,124,125,126,127,195,196,197,198,199,200,201,202,]),'SWAP':([37,],[55,]),'TOSTRING':([37,],[56,]),'PRODUCTITERATOR':([37,],[57,]),'HEAD':([37,],[58,]),'TAIL':([37,],[59,]),'LENGTH':([37,],[60,]),'STRING':([41,54,62,105,114,121,122,124,165,166,167,168,188,227,228,229,230,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'TRUE':([41,42,54,62,105,115,121,122,125,165,166,167,168,187,227,228,229,230,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'FALSE':([41,42,54,62,105,115,121,122,125,165,166,167,168,187,227,228,229,230,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'STRING_TYPE':([53,61,118,119,149,238,],[80,96,144,148,183,250,]),'BOOL':([53,61,118,119,149,237,],[81,97,143,147,182,249,]),'INT':([53,61,118,119,149,235,],[82,98,141,145,180,247,]),'DOUBLE':([53,61,118,119,149,236,],[83,99,142,146,181,248,]),'ARRAY':([53,54,90,211,212,213,214,],[84,91,120,223,224,225,226,]),'LIST':([53,54,199,200,201,202,],[85,92,215,216,217,218,]),'NEW':([54,195,196,197,198,],[90,211,212,213,214,]),'LBRACK':([84,85,120,223,224,225,226,],[118,119,149,235,236,237,238,]),'RBRACK':([141,142,143,144,145,146,147,148,180,181,182,183,247,248,249,250,],[172,173,174,175,176,177,178,179,203,204,205,206,255,256,257,258,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,113,134,],[1,136,170,]),'expression':([0,41,54,62,113,134,],[2,68,87,101,2,2,]),'sentencia':([0,113,134,],[3,3,3,]),'declararVariable':([0,113,134,],[4,4,4,]),'declararConstante':([0,113,134,],[5,5,5,]),'funcionesTupla':([0,113,134,],[6,6,6,]),'funcionesArray':([0,113,134,],[7,7,7,]),'for':([0,113,134,],[8,8,8,]),'funcionesPropias':([0,113,134,],[9,9,9,]),'while':([0,113,134,],[10,10,10,]),'term':([0,31,32,41,54,62,113,134,],[11,43,44,11,11,11,11,11,]),'factor':([0,12,31,32,33,34,41,42,47,54,62,112,113,134,],[13,35,13,13,45,46,13,76,77,13,13,135,13,13,]),'tuplaSwap':([0,113,134,],[17,17,17,]),'tuplaToString':([0,113,134,],[18,18,18,]),'tuplaProductIterator':([0,113,134,],[19,19,19,]),'arrayHead':([0,113,134,],[20,20,20,]),'arrayTail':([0,113,134,],[21,21,21,]),'arrayLength':([0,113,134,],[22,22,22,]),'int':([0,12,31,32,33,34,41,42,47,54,62,105,112,113,116,121,122,126,134,165,166,167,168,185,219,220,221,222,227,228,229,230,259,260,261,262,],[27,27,27,27,27,27,27,27,27,27,27,129,27,27,139,155,155,162,27,129,129,129,129,155,231,232,233,234,155,155,155,155,263,264,265,266,]),'double':([0,12,31,32,33,34,41,42,47,54,62,105,112,113,117,121,122,127,134,165,166,167,168,186,227,228,229,230,],[28,28,28,28,28,28,28,28,28,28,28,130,28,28,140,156,156,163,28,130,130,130,130,156,156,156,156,156,]),'comparacion':([35,76,],[47,112,]),'string':([41,54,62,105,114,121,122,124,165,166,167,168,188,227,228,229,230,],[65,88,102,132,137,158,158,160,132,132,132,132,158,158,158,158,158,]),'booleano':([41,42,54,62,105,115,121,122,125,165,166,167,168,187,227,228,229,230,],[66,75,89,103,131,138,157,157,161,131,131,131,131,157,157,157,157,157,]),'whileclause':([42,],[72,]),'comp':([42,],[73,]),'tipoValue':([53,],[78,]),'tipo':([53,61,],[79,95,]),'value':([54,],[86,]),'tipoValueCons':([61,],[94,]),'valueCons':([62,],[100,]),'tupla':([62,],[104,]),'elementosInternos2':([105,165,166,167,168,],[128,190,191,192,193,]),'elementosInternos':([121,122,227,228,229,230,],[150,159,239,240,241,242,]),'elementosInternosInt':([121,122,185,227,228,229,230,],[151,151,207,151,151,151,151,]),'elementosInternosDouble':([121,122,186,227,228,229,230,],[152,152,208,152,152,152,152,]),'elementosInternosBool':([121,122,187,227,228,229,230,],[153,153,209,153,153,153,153,]),'elementosInternosString':([121,122,188,227,228,229,230,],[154,154,210,154,154,154,154,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',8),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> declararConstante','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('cuerpo -> for','cuerpo',1,'p_cuerpo','scalaSintactico.py',14),
  ('cuerpo -> funcionesPropias','cuerpo',1,'p_cuerpo','scalaSintactico.py',15),
  ('cuerpo -> while','cuerpo',1,'p_cuerpo','scalaSintactico.py',16),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',20),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',21),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',22),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',23),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',26),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',27),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',28),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',29),
  ('value -> string','value',1,'p_value','scalaSintactico.py',32),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',33),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',34),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',35),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',36),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',37),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',38),
  ('value -> LIST LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',39),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',42),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',43),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',44),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',45),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',48),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',49),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',52),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',53),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',56),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',57),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',60),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',61),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',64),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',65),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',66),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',67),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',68),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',69),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',70),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',71),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',74),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',75),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',76),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',79),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',80),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',81),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',82),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',86),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',87),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',88),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',89),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',90),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',91),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',92),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',93),
  ('tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',94),
  ('tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',95),
  ('tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',96),
  ('tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',97),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',100),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',101),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',102),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',103),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',106),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',109),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',110),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',111),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',114),
  ('tuplaToString -> ID DOT TOSTRING LPAREN RPAREN','tuplaToString',5,'p_tuplaToString','scalaSintactico.py',117),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',120),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',123),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',124),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',125),
  ('funcionesPropias -> INPUT LPAREN RPAREN','funcionesPropias',3,'p_funcionesPropias','scalaSintactico.py',128),
  ('funcionesPropias -> PRINTLN LPAREN string RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',129),
  ('funcionesPropias -> PRINTLN LPAREN booleano RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',130),
  ('funcionesPropias -> PRINTLN LPAREN ID RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',131),
  ('funcionesPropias -> PRINTLN LPAREN expression RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',132),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',137),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',140),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',143),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',146),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',150),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',154),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',158),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',162),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',166),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',170),
  ('comp -> factor comparacion factor','comp',3,'p_comp','scalaSintactico.py',173),
  ('while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE','while',7,'p_while','scalaSintactico.py',181),
  ('whileclause -> comp','whileclause',1,'p_whileclause','scalaSintactico.py',184),
  ('whileclause -> ID','whileclause',1,'p_whileclause','scalaSintactico.py',185),
  ('whileclause -> booleano','whileclause',1,'p_whileclause','scalaSintactico.py',186),
  ('for -> FOR LPAREN RPAREN LBRACE LBRACE RBRACE','for',6,'p_for','scalaSintactico.py',189),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',192),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',193),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',194),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',195),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',196),
  ('factor -> int','factor',1,'p_factor_int','scalaSintactico.py',199),
  ('factor -> double','factor',1,'p_factor_double','scalaSintactico.py',202),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',205),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',206),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',209),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',212),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',215),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INPUT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LM LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstante\n             | funcionesTupla\n             | funcionesArray\n             | for\n             | funcionesPropiasdeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPAREN\n            | LIST LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n                | LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK STRING_TYPE RBRACK EQUAL STRING_TYPE LPAREN elementosInternos RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRING LPAREN RPARENtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengthfuncionesPropias : INPUT LPAREN RPAREN\n            | PRINTLN LPAREN string RPAREN\n            | PRINTLN LPAREN booleano RPAREN\n            | PRINTLN LPAREN ID RPAREN\n            | PRINTLN LPAREN expression RPARENarrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEfor : FOR LPAREN  RPAREN LBRACE  LBRACE  RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : intfactor : doublebooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,103,],[11,11,]),'VAR':([0,103,],[13,13,]),'VAL':([0,103,],[15,15,]),'FOR':([0,103,],[22,22,]),'INPUT':([0,103,],[23,23,]),'PRINTLN':([0,103,],[24,24,]),'ID':([0,13,15,39,103,],[14,34,36,64,14,]),'INT_NUMBER':([0,11,29,30,31,32,39,44,45,46,47,48,49,51,59,97,103,106,111,112,116,153,154,155,156,172,205,206,207,208,213,214,215,216,245,246,247,248,],[27,27,27,27,27,27,27,27,-94,-95,-96,-97,-98,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'DOUBLE_NUMBER':([0,11,29,30,31,32,39,44,45,46,47,48,49,51,59,97,103,107,111,112,117,153,154,155,156,173,213,214,215,216,],[28,28,28,28,28,28,28,28,-94,-95,-96,-97,-98,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'$end':([1,2,3,4,5,6,7,8,9,10,12,16,17,18,19,20,21,25,26,27,28,40,41,42,43,52,54,55,56,57,61,66,67,68,70,71,72,73,74,75,78,79,80,81,86,87,88,89,90,91,92,93,94,95,96,99,100,101,102,113,125,126,127,128,148,149,150,151,152,157,158,171,176,229,230,231,232,237,238,239,240,253,254,255,256,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-88,-91,-69,-70,-71,-75,-76,-77,-99,-100,-105,-104,-86,-87,-89,-90,-72,-74,-83,-84,-85,-78,-103,-101,-102,-13,-14,-51,-50,-48,-49,-15,-16,-17,-18,-9,-10,-51,-50,-48,-49,-11,-12,-45,-46,-47,-79,-80,-81,-82,-73,-52,-53,-54,-55,-64,-65,-66,-67,-68,-93,-92,-23,-24,-19,-20,-21,-22,-60,-61,-62,-63,-56,-57,-58,-59,]),'RBRACE':([2,3,4,5,6,7,8,9,10,12,16,17,18,19,20,21,25,26,27,28,40,41,42,43,52,54,55,56,57,61,66,67,68,70,71,72,73,74,75,78,79,80,81,86,87,88,89,90,91,92,93,94,95,96,99,100,101,102,113,123,124,125,126,127,128,148,149,150,151,152,157,158,171,176,229,230,231,232,237,238,239,240,253,254,255,256,],[-1,-2,-3,-4,-5,-6,-7,-8,-88,-91,-69,-70,-71,-75,-76,-77,-99,-100,-105,-104,-86,-87,-89,-90,-72,-74,-83,-84,-85,-78,-103,-101,-102,-13,-14,-51,-50,-48,-49,-15,-16,-17,-18,-9,-10,-51,-50,-48,-49,-11,-12,-45,-46,-47,-79,-80,-81,-82,-73,157,158,-52,-53,-54,-55,-64,-65,-66,-67,-68,-93,-92,-23,-24,-19,-20,-21,-22,-60,-61,-62,-63,-56,-57,-58,-59,]),'PLUS':([2,10,12,25,26,27,28,40,41,42,43,65,79,93,],[29,-88,-91,-99,-100,-105,-104,-86,-87,-89,-90,29,29,29,]),'MINUS':([2,10,12,25,26,27,28,40,41,42,43,65,79,93,],[30,-88,-91,-99,-100,-105,-104,-86,-87,-89,-90,30,30,30,]),'RPAREN':([10,12,25,26,27,28,37,38,40,41,42,43,62,63,64,65,66,67,68,85,118,119,120,121,122,138,139,140,141,142,143,144,145,146,147,177,178,179,180,193,194,195,196,217,218,219,220,225,226,227,228,249,250,251,252,],[-88,-91,-99,-100,-105,-104,60,61,-86,-87,-89,-90,99,100,101,102,-103,-101,-102,113,152,-37,-38,-39,-40,171,-25,-26,-27,-28,-29,-31,-33,-35,176,-41,-42,-43,-44,-30,-32,-34,-36,229,230,231,232,237,238,239,240,253,254,255,256,]),'TIMES':([10,12,25,26,27,28,40,41,42,43,],[31,-91,-99,-100,-105,-104,31,31,-89,-90,]),'DIVIDE':([10,12,25,26,27,28,40,41,42,43,],[32,-91,-99,-100,-105,-104,32,32,-89,-90,]),'DOT':([14,],[35,]),'LPAREN':([22,23,24,53,59,83,84,189,190,191,192,201,202,203,204,241,242,243,244,],[37,38,39,85,97,111,112,205,206,207,208,213,214,215,216,245,246,247,248,]),'GT':([25,26,27,28,33,],[-99,-100,-105,-104,45,]),'GE':([25,26,27,28,33,],[-99,-100,-105,-104,46,]),'LT':([25,26,27,28,33,],[-99,-100,-105,-104,47,]),'LE':([25,26,27,28,33,],[-99,-100,-105,-104,48,]),'EQUAL2':([25,26,27,28,33,],[-99,-100,-105,-104,49,]),'LBRACE':([25,26,27,28,60,69,98,],[-99,-100,-105,-104,98,103,123,]),'COMMA':([27,28,66,67,68,119,120,121,122,143,144,145,146,],[-105,-104,-103,-101,-102,153,154,155,156,172,173,174,175,]),'COLON':([34,36,],[50,58,]),'EQUAL':([34,36,72,73,74,75,88,89,90,91,159,160,161,162,163,164,165,166,],[51,59,104,105,106,107,114,115,116,117,181,182,183,184,185,186,187,188,]),'SWAP':([35,],[52,]),'TOSTRING':([35,],[53,]),'PRODUCTITERATOR':([35,],[54,]),'HEAD':([35,],[55,]),'TAIL':([35,],[56,]),'LENGTH':([35,],[57,]),'STRING':([39,51,59,97,104,111,112,114,153,154,155,156,175,213,214,215,216,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'TRUE':([39,51,59,97,105,111,112,115,153,154,155,156,174,213,214,215,216,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'FALSE':([39,51,59,97,105,111,112,115,153,154,155,156,174,213,214,215,216,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'STRING_TYPE':([50,58,108,109,137,188,224,],[72,88,132,136,170,204,236,]),'BOOL':([50,58,108,109,137,223,],[73,89,131,135,169,235,]),'INT':([50,58,108,109,137,221,],[74,90,129,133,167,233,]),'DOUBLE':([50,58,108,109,137,222,],[75,91,130,134,168,234,]),'ARRAY':([50,51,82,197,198,199,200,],[76,83,110,209,210,211,212,]),'LIST':([50,51,185,186,187,],[77,84,201,202,203,]),'NEW':([51,181,182,183,184,],[82,197,198,199,200,]),'LBRACK':([76,77,110,209,210,211,212,],[108,109,137,221,222,223,224,]),'RBRACK':([129,130,131,132,133,134,135,136,167,168,169,170,233,234,235,236,],[159,160,161,162,163,164,165,166,189,190,191,192,241,242,243,244,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,103,],[1,124,]),'expression':([0,39,51,59,103,],[2,65,79,93,2,]),'sentencia':([0,103,],[3,3,]),'declararVariable':([0,103,],[4,4,]),'declararConstante':([0,103,],[5,5,]),'funcionesTupla':([0,103,],[6,6,]),'funcionesArray':([0,103,],[7,7,]),'for':([0,103,],[8,8,]),'funcionesPropias':([0,103,],[9,9,]),'term':([0,29,30,39,51,59,103,],[10,40,41,10,10,10,10,]),'factor':([0,11,29,30,31,32,39,44,51,59,103,],[12,33,12,12,42,43,12,69,12,12,12,]),'tuplaSwap':([0,103,],[16,16,]),'tuplaToString':([0,103,],[17,17,]),'tuplaProductIterator':([0,103,],[18,18,]),'arrayHead':([0,103,],[19,19,]),'arrayTail':([0,103,],[20,20,]),'arrayLength':([0,103,],[21,21,]),'int':([0,11,29,30,31,32,39,44,51,59,97,103,106,111,112,116,153,154,155,156,172,205,206,207,208,213,214,215,216,245,246,247,248,],[25,25,25,25,25,25,25,25,25,25,119,25,127,143,143,150,119,119,119,119,143,217,218,219,220,143,143,143,143,249,250,251,252,]),'double':([0,11,29,30,31,32,39,44,51,59,97,103,107,111,112,117,153,154,155,156,173,213,214,215,216,],[26,26,26,26,26,26,26,26,26,26,120,26,128,144,144,151,120,120,120,120,144,144,144,144,144,]),'comparacion':([33,],[44,]),'string':([39,51,59,97,104,111,112,114,153,154,155,156,175,213,214,215,216,],[62,80,94,122,125,146,146,148,122,122,122,122,146,146,146,146,146,]),'booleano':([39,51,59,97,105,111,112,115,153,154,155,156,174,213,214,215,216,],[63,81,95,121,126,145,145,149,121,121,121,121,145,145,145,145,145,]),'tipoValue':([50,],[70,]),'tipo':([50,58,],[71,87,]),'value':([51,],[78,]),'tipoValueCons':([58,],[86,]),'valueCons':([59,],[92,]),'tupla':([59,],[96,]),'elementosInternos2':([97,153,154,155,156,],[118,177,178,179,180,]),'elementosInternos':([111,112,213,214,215,216,],[138,147,225,226,227,228,]),'elementosInternosInt':([111,112,172,213,214,215,216,],[139,139,193,139,139,139,139,]),'elementosInternosDouble':([111,112,173,213,214,215,216,],[140,140,194,140,140,140,140,]),'elementosInternosBool':([111,112,174,213,214,215,216,],[141,141,195,141,141,141,141,]),'elementosInternosString':([111,112,175,213,214,215,216,],[142,142,196,142,142,142,142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',8),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> declararConstante','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('cuerpo -> for','cuerpo',1,'p_cuerpo','scalaSintactico.py',14),
  ('cuerpo -> funcionesPropias','cuerpo',1,'p_cuerpo','scalaSintactico.py',15),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',18),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',19),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',20),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',21),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',24),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',25),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',26),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',27),
  ('value -> string','value',1,'p_value','scalaSintactico.py',30),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',31),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',32),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',33),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',34),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',35),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',36),
  ('value -> LIST LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',37),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',40),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',41),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',42),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',43),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',46),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',47),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',50),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',51),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',54),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',55),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',58),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',59),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',62),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',63),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',64),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',65),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',66),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',67),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',68),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',69),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',72),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',73),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',74),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',77),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',78),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',79),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',80),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',84),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',85),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',86),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',87),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',88),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',89),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',90),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',91),
  ('tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',92),
  ('tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',93),
  ('tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',94),
  ('tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL STRING_TYPE LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',95),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',98),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',99),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',100),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',101),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',104),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',107),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',108),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',109),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',112),
  ('tuplaToString -> ID DOT TOSTRING LPAREN RPAREN','tuplaToString',5,'p_tuplaToString','scalaSintactico.py',115),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',118),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',121),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',122),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',123),
  ('funcionesPropias -> INPUT LPAREN RPAREN','funcionesPropias',3,'p_funcionesPropias','scalaSintactico.py',126),
  ('funcionesPropias -> PRINTLN LPAREN string RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',127),
  ('funcionesPropias -> PRINTLN LPAREN booleano RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',128),
  ('funcionesPropias -> PRINTLN LPAREN ID RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',129),
  ('funcionesPropias -> PRINTLN LPAREN expression RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',130),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',133),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',136),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',139),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',142),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',146),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',150),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',154),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',158),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',162),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',166),
  ('for -> FOR LPAREN RPAREN LBRACE LBRACE RBRACE','for',6,'p_for','scalaSintactico.py',169),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',172),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',173),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',174),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',175),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',176),
  ('factor -> int','factor',1,'p_factor_int','scalaSintactico.py',179),
  ('factor -> double','factor',1,'p_factor_double','scalaSintactico.py',182),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',185),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',186),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',189),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',192),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',195),
]

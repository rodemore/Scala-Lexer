
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | funcionesTupladeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expression\n                        | VAR ID COLON LIST LPAREN tipo RPARENvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPARENexpressionlist : LIST LPAREN elementosInternos RPAREN\n                    | LIST LPAREN elementosInternos\n\n            elementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEvalue : NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN\n        tipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRINGtuplaProductIterator : ID DOT PRODUCTITERATORexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : INT_NUMBERfactor : DOUBLE_NUMBERbooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,56,],[7,7,]),'VAR':([0,56,],[9,9,]),'ID':([0,9,56,],[10,21,10,]),'INT_NUMBER':([0,7,16,17,18,19,27,28,29,30,31,32,34,56,60,64,103,124,125,126,127,128,155,156,157,158,],[14,14,14,14,14,14,14,-73,-74,-75,-76,-77,14,14,74,74,74,74,74,74,74,74,74,74,74,74,]),'DOUBLE_NUMBER':([0,7,16,17,18,19,27,28,29,30,31,32,34,56,61,64,104,],[15,15,15,15,15,15,15,-73,-74,-75,-76,-77,15,15,76,76,76,]),'$end':([1,2,3,4,5,6,8,11,12,13,14,15,23,24,25,26,35,36,37,39,40,42,43,44,45,47,48,49,50,53,54,55,71,72,73,74,75,76,91,92,102,142,143,144,145,146,163,164,165,166,],[0,-1,-2,-3,-4,-68,-71,-60,-61,-62,-78,-79,-66,-67,-69,-70,-63,-64,-65,-5,-6,-45,-44,-42,-43,-7,-8,-10,-11,-82,-80,-81,-47,-48,-49,-84,-50,-83,-72,-9,-16,-12,-13,-14,-15,-46,-51,-52,-53,-54,]),'RBRACE':([2,3,4,5,6,8,11,12,13,14,15,23,24,25,26,35,36,37,39,40,42,43,44,45,47,48,49,50,53,54,55,65,71,72,73,74,75,76,91,92,102,142,143,144,145,146,163,164,165,166,],[-1,-2,-3,-4,-68,-71,-60,-61,-62,-78,-79,-66,-67,-69,-70,-63,-64,-65,-5,-6,-45,-44,-42,-43,-7,-8,-10,-11,-82,-80,-81,91,-47,-48,-49,-84,-50,-83,-72,-9,-16,-12,-13,-14,-15,-46,-51,-52,-53,-54,]),'PLUS':([2,6,8,14,15,23,24,25,26,48,],[16,-68,-71,-78,-79,-66,-67,-69,-70,16,]),'MINUS':([2,6,8,14,15,23,24,25,26,48,],[17,-68,-71,-78,-79,-66,-67,-69,-70,17,]),'TIMES':([6,8,14,15,23,24,25,26,],[18,-71,-78,-79,18,18,-69,-70,]),'DIVIDE':([6,8,14,15,23,24,25,26,],[19,-71,-78,-79,19,19,-69,-70,]),'DOT':([10,],[22,]),'GT':([14,15,20,],[-78,-79,28,]),'GE':([14,15,20,],[-78,-79,29,]),'LT':([14,15,20,],[-78,-79,30,]),'LE':([14,15,20,],[-78,-79,31,]),'EQUAL2':([14,15,20,],[-78,-79,32,]),'LBRACE':([14,15,38,],[-78,-79,56,]),'COLON':([21,],[33,]),'EQUAL':([21,42,43,44,45,93,94,95,96,],[34,58,59,60,61,107,108,109,110,]),'SWAP':([22,],[35,]),'TOSTRING':([22,],[36,]),'PRODUCTITERATOR':([22,],[37,]),'LIST':([33,],[41,]),'STRING_TYPE':([33,57,62,81,141,],[42,70,80,100,150,]),'BOOL':([33,57,62,81,140,],[43,69,79,99,149,]),'INT':([33,57,62,81,138,],[44,67,77,97,147,]),'DOUBLE':([33,57,62,81,139,],[45,68,78,98,148,]),'ARRAY':([33,34,51,120,121,122,123,],[46,52,63,129,130,131,132,]),'NEW':([34,107,108,109,110,],[51,120,121,122,123,]),'STRING':([34,58,64,106,],[53,53,53,53,]),'TRUE':([34,59,64,105,],[54,54,54,54,]),'FALSE':([34,59,64,105,],[55,55,55,55,]),'LPAREN':([41,52,111,112,113,114,115,151,152,153,154,],[57,64,124,125,126,127,128,155,156,157,158,]),'LBRACK':([46,63,129,130,131,132,],[62,81,138,139,140,141,]),'COMMA':([53,54,55,74,76,87,88,89,90,],[-82,-80,-81,-84,-83,103,104,105,106,]),'RPAREN':([53,54,55,66,67,68,69,70,74,76,82,83,84,85,86,87,88,89,90,116,117,118,119,133,134,135,136,137,159,160,161,162,],[-82,-80,-81,92,-42,-43,-44,-45,-84,-83,102,-19,-20,-21,-22,-23,-25,-27,-29,-24,-26,-28,-30,142,143,144,145,146,163,164,165,166,]),'RBRACK':([77,78,79,80,97,98,99,100,101,147,148,149,150,],[93,94,95,96,111,112,113,114,115,151,152,153,154,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,56,],[1,65,]),'expression':([0,34,56,],[2,48,2,]),'sentencia':([0,56,],[3,3,]),'declararVariable':([0,56,],[4,4,]),'funcionesTupla':([0,56,],[5,5,]),'term':([0,16,17,34,56,],[6,23,24,6,6,]),'factor':([0,7,16,17,18,19,27,34,56,],[8,20,8,8,25,26,38,8,8,]),'tuplaSwap':([0,56,],[11,11,]),'tuplaToString':([0,56,],[12,12,]),'tuplaProductIterator':([0,56,],[13,13,]),'comparacion':([20,],[27,]),'tipoValue':([33,],[39,]),'tipo':([33,57,81,],[40,66,101,]),'value':([34,],[47,]),'string':([34,58,64,106,],[49,71,90,90,]),'booleano':([34,59,64,105,],[50,72,89,89,]),'int':([60,64,103,124,125,126,127,128,155,156,157,158,],[73,87,87,133,134,135,136,137,159,160,161,162,]),'double':([61,64,104,],[75,88,88,]),'elementosInternos':([64,],[82,]),'elementosInternosInt':([64,103,],[83,116,]),'elementosInternosDouble':([64,104,],[84,117,]),'elementosInternosBool':([64,105,],[85,118,]),'elementosInternosString':([64,106,],[86,119,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',17),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',18),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',19),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',20),
  ('declararVariable -> VAR ID COLON LIST LPAREN tipo RPAREN','declararVariable',7,'p_declararVariable','scalaSintactico.py',21),
  ('value -> string','value',1,'p_value','scalaSintactico.py',24),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',25),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',26),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',27),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',28),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',29),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',30),
  ('expressionlist -> LIST LPAREN elementosInternos RPAREN','expressionlist',4,'p_expressionlist','scalaSintactico.py',33),
  ('expressionlist -> LIST LPAREN elementosInternos','expressionlist',3,'p_expressionlist','scalaSintactico.py',34),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',39),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',40),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',41),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',42),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',45),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',46),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',49),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',50),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',53),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',54),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',57),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',58),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',61),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',62),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',63),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',64),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',65),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',66),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',67),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',68),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',71),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',72),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',73),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',76),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',77),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',78),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',79),
  ('value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN','value',8,'p_newarray','scalaSintactico.py',86),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',90),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',91),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',92),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',93),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',94),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',95),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',96),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',97),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',100),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',101),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',102),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',103),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',107),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',110),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',111),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',112),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',115),
  ('tuplaToString -> ID DOT TOSTRING','tuplaToString',3,'p_tuplaToString','scalaSintactico.py',118),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',121),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',124),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',128),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',132),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',136),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',140),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',144),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',148),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',152),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',153),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',154),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',155),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',156),
  ('factor -> INT_NUMBER','factor',1,'p_factor_int','scalaSintactico.py',159),
  ('factor -> DOUBLE_NUMBER','factor',1,'p_factor_double','scalaSintactico.py',162),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',165),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',166),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',169),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',172),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',175),
]

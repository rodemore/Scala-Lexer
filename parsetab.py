
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INPUT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstante\n             | funcionesTupla\n             | funcionesArray\n             | funcionesPropiasdeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRINGtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengthfuncionesPropias : INPUT LPAREN RPAREN\n            | PRINTLN LPAREN string RPAREN\n            | PRINTLN LPAREN int RPAREN\n            | PRINTLN LPAREN booleano RPAREN\n            | PRINTLN LPAREN double RPAREN\n            | PRINTLN LPAREN ID RPAREN\n            | PRINTLN LPAREN expression RPARENarrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : intfactor : doublebooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,99,],[10,10,]),'VAR':([0,99,],[12,12,]),'VAL':([0,99,],[14,14,]),'INPUT':([0,99,],[21,21,]),'PRINTLN':([0,99,],[22,22,]),'ID':([0,12,14,36,99,],[13,32,34,62,13,]),'INT_NUMBER':([0,10,27,28,29,30,36,41,42,43,44,45,46,48,56,92,99,102,106,109,140,141,142,143,154,178,179,180,181,206,207,208,209,],[25,25,25,25,25,25,25,25,-89,-90,-91,-92,-93,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'DOUBLE_NUMBER':([0,10,27,28,29,30,36,41,42,43,44,45,46,48,56,92,99,103,106,110,140,141,142,143,155,],[26,26,26,26,26,26,26,26,-89,-90,-91,-92,-93,26,26,26,26,26,26,26,26,26,26,26,26,]),'$end':([1,2,3,4,5,6,7,8,9,11,15,16,17,18,19,20,23,24,25,26,37,38,39,40,49,50,51,52,53,54,57,64,65,66,68,69,70,71,72,73,75,76,77,78,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,117,118,119,120,135,136,137,138,139,144,153,194,195,196,197,214,215,216,217,],[0,-1,-2,-3,-4,-5,-6,-7,-84,-87,-63,-64,-65,-69,-70,-71,-94,-95,-100,-99,-82,-83,-85,-86,-66,-67,-68,-79,-80,-81,-72,-98,-96,-97,-12,-13,-49,-48,-46,-47,-14,-15,-16,-17,-8,-9,-49,-48,-46,-47,-10,-11,-43,-44,-45,-73,-74,-75,-76,-77,-78,-50,-51,-52,-53,-58,-59,-60,-61,-62,-88,-22,-18,-19,-20,-21,-54,-55,-56,-57,]),'RBRACE':([2,3,4,5,6,7,8,9,11,15,16,17,18,19,20,23,24,25,26,37,38,39,40,49,50,51,52,53,54,57,64,65,66,68,69,70,71,72,73,75,76,77,78,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,116,117,118,119,120,135,136,137,138,139,144,153,194,195,196,197,214,215,216,217,],[-1,-2,-3,-4,-5,-6,-7,-84,-87,-63,-64,-65,-69,-70,-71,-94,-95,-100,-99,-82,-83,-85,-86,-66,-67,-68,-79,-80,-81,-72,-98,-96,-97,-12,-13,-49,-48,-46,-47,-14,-15,-16,-17,-8,-9,-49,-48,-46,-47,-10,-11,-43,-44,-45,-73,-74,-75,-76,-77,-78,144,-50,-51,-52,-53,-58,-59,-60,-61,-62,-88,-22,-18,-19,-20,-21,-54,-55,-56,-57,]),'PLUS':([2,9,11,23,24,25,26,37,38,39,40,59,61,63,76,88,],[27,-84,-87,-94,-95,-100,-99,-82,-83,-85,-86,-94,-95,27,27,27,]),'MINUS':([2,9,11,23,24,25,26,37,38,39,40,59,61,63,76,88,],[28,-84,-87,-94,-95,-100,-99,-82,-83,-85,-86,-94,-95,28,28,28,]),'RPAREN':([9,11,23,24,25,26,35,37,38,39,40,58,59,60,61,62,63,64,65,66,111,112,113,114,115,126,127,128,129,130,131,132,133,134,158,159,160,161,170,171,172,173,186,187,188,189,210,211,212,213,],[-84,-87,-94,-95,-100,-99,57,-82,-83,-85,-86,93,94,95,96,97,98,-98,-96,-97,139,-35,-36,-37,-38,153,-23,-24,-25,-26,-27,-29,-31,-33,-39,-40,-41,-42,-28,-30,-32,-34,194,195,196,197,214,215,216,217,]),'TIMES':([9,11,23,24,25,26,37,38,39,40,59,61,],[29,-87,-94,-95,-100,-99,29,29,-85,-86,-94,-95,]),'DIVIDE':([9,11,23,24,25,26,37,38,39,40,59,61,],[30,-87,-94,-95,-100,-99,30,30,-85,-86,-94,-95,]),'DOT':([13,],[33,]),'LPAREN':([21,22,56,80,166,167,168,169,202,203,204,205,],[35,36,92,106,178,179,180,181,206,207,208,209,]),'GT':([23,24,25,26,31,],[-94,-95,-100,-99,42,]),'GE':([23,24,25,26,31,],[-94,-95,-100,-99,43,]),'LT':([23,24,25,26,31,],[-94,-95,-100,-99,44,]),'LE':([23,24,25,26,31,],[-94,-95,-100,-99,45,]),'EQUAL2':([23,24,25,26,31,],[-94,-95,-100,-99,46,]),'LBRACE':([23,24,25,26,67,],[-94,-95,-100,-99,99,]),'COMMA':([25,26,64,65,66,112,113,114,115,131,132,133,134,],[-100,-99,-98,-96,-97,140,141,142,143,154,155,156,157,]),'COLON':([32,34,],[47,55,]),'EQUAL':([32,34,70,71,72,73,83,84,85,86,145,146,147,148,],[48,56,100,101,102,103,107,108,109,110,162,163,164,165,]),'SWAP':([33,],[49,]),'TOSTRING':([33,],[50,]),'PRODUCTITERATOR':([33,],[51,]),'HEAD':([33,],[52,]),'TAIL':([33,],[53,]),'LENGTH':([33,],[54,]),'STRING':([36,48,56,92,100,106,107,140,141,142,143,157,],[64,64,64,64,64,64,64,64,64,64,64,64,]),'TRUE':([36,48,56,92,101,106,108,140,141,142,143,156,],[65,65,65,65,65,65,65,65,65,65,65,65,]),'FALSE':([36,48,56,92,101,106,108,140,141,142,143,156,],[66,66,66,66,66,66,66,66,66,66,66,66,]),'STRING_TYPE':([47,55,104,125,193,],[70,83,124,152,201,]),'BOOL':([47,55,104,125,192,],[71,84,123,151,200,]),'INT':([47,55,104,125,190,],[72,85,121,149,198,]),'DOUBLE':([47,55,104,125,191,],[73,86,122,150,199,]),'ARRAY':([47,48,79,174,175,176,177,],[74,80,105,182,183,184,185,]),'NEW':([48,162,163,164,165,],[79,174,175,176,177,]),'LBRACK':([74,105,182,183,184,185,],[104,125,190,191,192,193,]),'RBRACK':([121,122,123,124,149,150,151,152,198,199,200,201,],[145,146,147,148,166,167,168,169,202,203,204,205,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,99,],[1,116,]),'expression':([0,36,48,56,99,],[2,63,76,88,2,]),'sentencia':([0,99,],[3,3,]),'declararVariable':([0,99,],[4,4,]),'declararConstante':([0,99,],[5,5,]),'funcionesTupla':([0,99,],[6,6,]),'funcionesArray':([0,99,],[7,7,]),'funcionesPropias':([0,99,],[8,8,]),'term':([0,27,28,36,48,56,99,],[9,37,38,9,9,9,9,]),'factor':([0,10,27,28,29,30,36,41,48,56,99,],[11,31,11,11,39,40,11,67,11,11,11,]),'tuplaSwap':([0,99,],[15,15,]),'tuplaToString':([0,99,],[16,16,]),'tuplaProductIterator':([0,99,],[17,17,]),'arrayHead':([0,99,],[18,18,]),'arrayTail':([0,99,],[19,19,]),'arrayLength':([0,99,],[20,20,]),'int':([0,10,27,28,29,30,36,41,48,56,92,99,102,106,109,140,141,142,143,154,178,179,180,181,206,207,208,209,],[23,23,23,23,23,23,59,23,23,23,112,23,119,131,137,112,112,112,112,131,186,187,188,189,210,211,212,213,]),'double':([0,10,27,28,29,30,36,41,48,56,92,99,103,106,110,140,141,142,143,155,],[24,24,24,24,24,24,61,24,24,24,113,24,120,132,138,113,113,113,113,132,]),'comparacion':([31,],[41,]),'string':([36,48,56,92,100,106,107,140,141,142,143,157,],[58,77,89,115,117,134,135,115,115,115,115,134,]),'booleano':([36,48,56,92,101,106,108,140,141,142,143,156,],[60,78,90,114,118,133,136,114,114,114,114,133,]),'tipoValue':([47,],[68,]),'tipo':([47,55,],[69,82,]),'value':([48,],[75,]),'tipoValueCons':([55,],[81,]),'valueCons':([56,],[87,]),'tupla':([56,],[91,]),'elementosInternos2':([92,140,141,142,143,],[111,158,159,160,161,]),'elementosInternos':([106,],[126,]),'elementosInternosInt':([106,154,],[127,170,]),'elementosInternosDouble':([106,155,],[128,171,]),'elementosInternosBool':([106,156,],[129,172,]),'elementosInternosString':([106,157,],[130,173,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',8),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> declararConstante','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('cuerpo -> funcionesPropias','cuerpo',1,'p_cuerpo','scalaSintactico.py',14),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',17),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',18),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',19),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',20),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',23),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',24),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',25),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',26),
  ('value -> string','value',1,'p_value','scalaSintactico.py',29),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',30),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',31),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',32),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',33),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',34),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',35),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',38),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',39),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',40),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',41),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',44),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',45),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',48),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',49),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',52),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',53),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',56),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',57),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',60),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',61),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',62),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',63),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',64),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',65),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',66),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',67),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',70),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',71),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',72),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',75),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',76),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',77),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',78),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',81),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',82),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',83),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',84),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',85),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',86),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',87),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',88),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',91),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',92),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',93),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',94),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',97),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',100),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',101),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',102),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',105),
  ('tuplaToString -> ID DOT TOSTRING','tuplaToString',3,'p_tuplaToString','scalaSintactico.py',108),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',111),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',114),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',115),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',116),
  ('funcionesPropias -> INPUT LPAREN RPAREN','funcionesPropias',3,'p_funcionesPropias','scalaSintactico.py',119),
  ('funcionesPropias -> PRINTLN LPAREN string RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',120),
  ('funcionesPropias -> PRINTLN LPAREN int RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',121),
  ('funcionesPropias -> PRINTLN LPAREN booleano RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',122),
  ('funcionesPropias -> PRINTLN LPAREN double RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',123),
  ('funcionesPropias -> PRINTLN LPAREN ID RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',124),
  ('funcionesPropias -> PRINTLN LPAREN expression RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',125),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',128),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',131),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',134),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',137),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',141),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',145),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',149),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',153),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',157),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',161),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',165),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',166),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',167),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',168),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',169),
  ('factor -> int','factor',1,'p_factor_int','scalaSintactico.py',172),
  ('factor -> double','factor',1,'p_factor_double','scalaSintactico.py',175),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',178),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',179),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',182),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',185),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',188),
]

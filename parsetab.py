
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia expression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LEfactor : INT_NUMBERbooleano : TRUE\n                | FALSE'
    
_lr_action_items = {'IF':([0,23,],[5,5,]),'INT_NUMBER':([0,5,8,9,10,11,17,18,19,20,21,23,],[7,7,7,7,7,7,7,-10,-11,-12,-13,7,]),'$end':([1,2,3,4,6,7,13,14,15,16,25,],[0,-1,-2,-5,-8,-14,-3,-4,-6,-7,-9,]),'RBRACE':([2,3,4,6,7,13,14,15,16,24,25,],[-1,-2,-5,-8,-14,-3,-4,-6,-7,25,-9,]),'PLUS':([2,4,6,7,13,14,15,16,],[8,-5,-8,-14,-3,-4,-6,-7,]),'MINUS':([2,4,6,7,13,14,15,16,],[9,-5,-8,-14,-3,-4,-6,-7,]),'TIMES':([4,6,7,13,14,15,16,],[10,-8,-14,10,10,-6,-7,]),'DIVIDE':([4,6,7,13,14,15,16,],[11,-8,-14,11,11,-6,-7,]),'GT':([7,12,],[-14,18,]),'GE':([7,12,],[-14,19,]),'LT':([7,12,],[-14,20,]),'LE':([7,12,],[-14,21,]),'LBRACE':([7,22,],[-14,23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,23,],[1,24,]),'expression':([0,23,],[2,2,]),'sentencia':([0,23,],[3,3,]),'term':([0,8,9,23,],[4,13,14,4,]),'factor':([0,5,8,9,10,11,17,23,],[6,12,6,6,15,16,22,6,]),'comparacion':([12,],[17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',8),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',12),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',17),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',21),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',25),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',29),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',33),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',37),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',41),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',42),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',43),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',44),
  ('factor -> INT_NUMBER','factor',1,'p_factor_int','scalaSintactico.py',47),
  ('booleano -> TRUE','booleano',1,'p_booleano_expr','scalaSintactico.py',51),
  ('booleano -> FALSE','booleano',1,'p_booleano_expr','scalaSintactico.py',52),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | funcionesArraydeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringtipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPARENfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengtharrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LEfactor : INT_NUMBERfactor : DOUBLE_NUMBERbooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,54,],[7,7,]),'VAR':([0,54,],[9,9,]),'ID':([0,9,54,],[10,21,10,]),'INT_NUMBER':([0,7,16,17,18,19,27,28,29,30,31,33,54,57,61,93,113,114,115,116,141,142,143,144,],[14,14,14,14,14,14,14,-53,-54,-55,-56,14,14,66,66,66,66,66,66,66,66,66,66,66,]),'DOUBLE_NUMBER':([0,7,16,17,18,19,27,28,29,30,31,33,54,58,61,94,],[15,15,15,15,15,15,15,-53,-54,-55,-56,15,15,68,68,68,]),'$end':([1,2,3,4,5,6,8,11,12,13,14,15,23,24,25,26,34,35,36,38,39,40,41,42,43,45,46,47,48,51,52,53,63,64,65,66,67,68,83,92,129,130,131,132,149,150,151,152,],[0,-1,-2,-3,-4,-48,-51,-40,-41,-42,-57,-58,-46,-47,-49,-50,-43,-44,-45,-5,-6,-31,-30,-28,-29,-7,-8,-9,-10,-61,-59,-60,-32,-33,-34,-63,-35,-62,-52,-15,-11,-12,-13,-14,-36,-37,-38,-39,]),'RBRACE':([2,3,4,5,6,8,11,12,13,14,15,23,24,25,26,34,35,36,38,39,40,41,42,43,45,46,47,48,51,52,53,62,63,64,65,66,67,68,83,92,129,130,131,132,149,150,151,152,],[-1,-2,-3,-4,-48,-51,-40,-41,-42,-57,-58,-46,-47,-49,-50,-43,-44,-45,-5,-6,-31,-30,-28,-29,-7,-8,-9,-10,-61,-59,-60,83,-32,-33,-34,-63,-35,-62,-52,-15,-11,-12,-13,-14,-36,-37,-38,-39,]),'PLUS':([2,6,8,14,15,23,24,25,26,46,],[16,-48,-51,-57,-58,-46,-47,-49,-50,16,]),'MINUS':([2,6,8,14,15,23,24,25,26,46,],[17,-48,-51,-57,-58,-46,-47,-49,-50,17,]),'TIMES':([6,8,14,15,23,24,25,26,],[18,-51,-57,-58,18,18,-49,-50,]),'DIVIDE':([6,8,14,15,23,24,25,26,],[19,-51,-57,-58,19,19,-49,-50,]),'DOT':([10,],[22,]),'GT':([14,15,20,],[-57,-58,28,]),'GE':([14,15,20,],[-57,-58,29,]),'LT':([14,15,20,],[-57,-58,30,]),'LE':([14,15,20,],[-57,-58,31,]),'LBRACE':([14,15,37,],[-57,-58,54,]),'COLON':([21,],[32,]),'EQUAL':([21,40,41,42,43,84,85,86,87,],[33,55,56,57,58,97,98,99,100,]),'HEAD':([22,],[34,]),'TAIL':([22,],[35,]),'LENGTH':([22,],[36,]),'STRING_TYPE':([32,59,73,128,],[40,72,91,136,]),'BOOL':([32,59,73,127,],[41,71,90,135,]),'INT':([32,59,73,125,],[42,69,88,133,]),'DOUBLE':([32,59,73,126,],[43,70,89,134,]),'ARRAY':([32,33,49,109,110,111,112,],[44,50,60,117,118,119,120,]),'NEW':([33,97,98,99,100,],[49,109,110,111,112,]),'STRING':([33,55,61,96,],[51,51,51,51,]),'TRUE':([33,56,61,95,],[52,52,52,52,]),'FALSE':([33,56,61,95,],[53,53,53,53,]),'LBRACK':([44,60,117,118,119,120,],[59,73,125,126,127,128,]),'LPAREN':([50,101,102,103,104,137,138,139,140,],[61,113,114,115,116,141,142,143,144,]),'COMMA':([51,52,53,66,68,79,80,81,82,],[-61,-59,-60,-63,-62,93,94,95,96,]),'RPAREN':([51,52,53,66,68,74,75,76,77,78,79,80,81,82,105,106,107,108,121,122,123,124,145,146,147,148,],[-61,-59,-60,-63,-62,92,-16,-17,-18,-19,-20,-22,-24,-26,-21,-23,-25,-27,129,130,131,132,149,150,151,152,]),'RBRACK':([69,70,71,72,88,89,90,91,133,134,135,136,],[84,85,86,87,101,102,103,104,137,138,139,140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,54,],[1,62,]),'expression':([0,33,54,],[2,46,2,]),'sentencia':([0,54,],[3,3,]),'declararVariable':([0,54,],[4,4,]),'funcionesArray':([0,54,],[5,5,]),'term':([0,16,17,33,54,],[6,23,24,6,6,]),'factor':([0,7,16,17,18,19,27,33,54,],[8,20,8,8,25,26,37,8,8,]),'arrayHead':([0,54,],[11,11,]),'arrayTail':([0,54,],[12,12,]),'arrayLength':([0,54,],[13,13,]),'comparacion':([20,],[27,]),'tipoValue':([32,],[38,]),'tipo':([32,],[39,]),'value':([33,],[45,]),'string':([33,55,61,96,],[47,63,82,82,]),'booleano':([33,56,61,95,],[48,64,81,81,]),'int':([57,61,93,113,114,115,116,141,142,143,144,],[65,79,79,121,122,123,124,145,146,147,148,]),'double':([58,61,94,],[67,80,80,]),'elementosInternos':([61,],[74,]),'elementosInternosInt':([61,93,],[75,105,]),'elementosInternosDouble':([61,94,],[76,106,]),'elementosInternosBool':([61,95,],[77,107,]),'elementosInternosString':([61,96,],[78,108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',8),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',14),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',15),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',16),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',17),
  ('value -> string','value',1,'p_value','scalaSintactico.py',20),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',21),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',22),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',23),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',24),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',25),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',26),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',29),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',30),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',31),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',32),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',35),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',36),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',39),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',40),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',43),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',44),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',47),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',48),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',51),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',52),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',53),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',54),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',57),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',58),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',59),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',60),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',61),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',62),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',63),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',64),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',67),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',68),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',69),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',72),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',75),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',78),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',81),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',85),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',89),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',93),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',97),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',101),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',105),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',109),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',110),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',111),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',112),
  ('factor -> INT_NUMBER','factor',1,'p_factor_int','scalaSintactico.py',115),
  ('factor -> DOUBLE_NUMBER','factor',1,'p_factor_double','scalaSintactico.py',118),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',121),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',122),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',125),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',128),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',131),
]

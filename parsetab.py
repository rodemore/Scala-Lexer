
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstantedeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : INT_NUMBERfactor : DOUBLE_NUMBERbooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,63,],[7,7,]),'VAR':([0,63,],[9,9,]),'VAL':([0,63,],[10,10,]),'INT_NUMBER':([0,7,13,14,15,16,24,25,26,27,28,29,31,33,62,63,66,70,73,106,107,108,109,120,144,145,146,147,172,173,174,175,],[11,11,11,11,11,11,11,-67,-68,-69,-70,-71,11,11,80,11,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'DOUBLE_NUMBER':([0,7,13,14,15,16,24,25,26,27,28,29,31,33,62,63,67,70,74,106,107,108,109,121,],[12,12,12,12,12,12,12,-67,-68,-69,-70,-71,12,12,81,12,81,81,81,81,81,81,81,81,]),'$end':([1,2,3,4,5,6,8,11,12,20,21,22,23,35,36,37,38,39,40,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,80,81,83,84,85,86,101,102,103,104,105,110,119,160,161,162,163,180,181,182,183,],[0,-1,-2,-3,-4,-62,-65,-72,-73,-60,-61,-63,-64,-9,-10,-46,-45,-43,-44,-11,-12,-13,-14,-76,-74,-75,-5,-6,-46,-45,-43,-44,-7,-8,-40,-41,-42,-78,-77,-47,-48,-49,-50,-55,-56,-57,-58,-59,-66,-19,-15,-16,-17,-18,-51,-52,-53,-54,]),'RBRACE':([2,3,4,5,6,8,11,12,20,21,22,23,35,36,37,38,39,40,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,80,81,82,83,84,85,86,101,102,103,104,105,110,119,160,161,162,163,180,181,182,183,],[-1,-2,-3,-4,-62,-65,-72,-73,-60,-61,-63,-64,-9,-10,-46,-45,-43,-44,-11,-12,-13,-14,-76,-74,-75,-5,-6,-46,-45,-43,-44,-7,-8,-40,-41,-42,-78,-77,110,-47,-48,-49,-50,-55,-56,-57,-58,-59,-66,-19,-15,-16,-17,-18,-51,-52,-53,-54,]),'PLUS':([2,6,8,11,12,20,21,22,23,43,58,],[13,-62,-65,-72,-73,-60,-61,-63,-64,13,13,]),'MINUS':([2,6,8,11,12,20,21,22,23,43,58,],[14,-62,-65,-72,-73,-60,-61,-63,-64,14,14,]),'TIMES':([6,8,11,12,20,21,22,23,],[15,-65,-72,-73,15,15,-63,-64,]),'DIVIDE':([6,8,11,12,20,21,22,23,],[16,-65,-72,-73,16,16,-63,-64,]),'ID':([9,10,],[18,19,]),'GT':([11,12,17,],[-72,-73,25,]),'GE':([11,12,17,],[-72,-73,26,]),'LT':([11,12,17,],[-72,-73,27,]),'LE':([11,12,17,],[-72,-73,28,]),'EQUAL2':([11,12,17,],[-72,-73,29,]),'LBRACE':([11,12,34,],[-72,-73,63,]),'COLON':([18,19,],[30,32,]),'EQUAL':([18,19,37,38,39,40,53,54,55,56,111,112,113,114,],[31,33,64,65,66,67,71,72,73,74,128,129,130,131,]),'STRING_TYPE':([30,32,68,91,159,],[37,53,90,118,167,]),'BOOL':([30,32,68,91,158,],[38,54,89,117,166,]),'INT':([30,32,68,91,156,],[39,55,87,115,164,]),'DOUBLE':([30,32,68,91,157,],[40,56,88,116,165,]),'ARRAY':([30,31,46,140,141,142,143,],[41,47,69,148,149,150,151,]),'NEW':([31,128,129,130,131,],[46,140,141,142,143,]),'STRING':([31,33,62,64,70,71,106,107,108,109,123,],[48,48,48,48,48,48,48,48,48,48,48,]),'TRUE':([31,33,62,65,70,72,106,107,108,109,122,],[49,49,49,49,49,49,49,49,49,49,49,]),'FALSE':([31,33,62,65,70,72,106,107,108,109,122,],[50,50,50,50,50,50,50,50,50,50,50,]),'LPAREN':([33,47,132,133,134,135,168,169,170,171,],[62,70,144,145,146,147,172,173,174,175,]),'LBRACK':([41,69,148,149,150,151,],[68,91,156,157,158,159,]),'COMMA':([48,49,50,76,77,78,79,80,81,97,98,99,100,],[-76,-74,-75,106,107,108,109,-78,-77,120,121,122,123,]),'RPAREN':([48,49,50,75,76,77,78,79,80,81,92,93,94,95,96,97,98,99,100,124,125,126,127,136,137,138,139,152,153,154,155,176,177,178,179,],[-76,-74,-75,105,-32,-33,-34,-35,-78,-77,119,-20,-21,-22,-23,-24,-26,-28,-30,-36,-37,-38,-39,-25,-27,-29,-31,160,161,162,163,180,181,182,183,]),'RBRACK':([87,88,89,90,115,116,117,118,164,165,166,167,],[111,112,113,114,132,133,134,135,168,169,170,171,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,63,],[1,82,]),'expression':([0,31,33,63,],[2,43,58,2,]),'sentencia':([0,63,],[3,3,]),'declararVariable':([0,63,],[4,4,]),'declararConstante':([0,63,],[5,5,]),'term':([0,13,14,31,33,63,],[6,20,21,6,6,6,]),'factor':([0,7,13,14,15,16,24,31,33,63,],[8,17,8,8,22,23,34,8,8,8,]),'comparacion':([17,],[24,]),'tipoValue':([30,],[35,]),'tipo':([30,32,],[36,52,]),'value':([31,],[42,]),'string':([31,33,62,64,70,71,106,107,108,109,123,],[44,59,79,83,100,101,79,79,79,79,100,]),'booleano':([31,33,62,65,70,72,106,107,108,109,122,],[45,60,78,84,99,102,78,78,78,78,99,]),'tipoValueCons':([32,],[51,]),'valueCons':([33,],[57,]),'tupla':([33,],[61,]),'elementosInternos2':([62,106,107,108,109,],[75,124,125,126,127,]),'int':([62,66,70,73,106,107,108,109,120,144,145,146,147,172,173,174,175,],[76,85,97,103,76,76,76,76,97,152,153,154,155,176,177,178,179,]),'double':([62,67,70,74,106,107,108,109,121,],[77,86,98,104,77,77,77,77,98,]),'elementosInternos':([70,],[92,]),'elementosInternosInt':([70,120,],[93,136,]),'elementosInternosDouble':([70,121,],[94,137,]),'elementosInternosBool':([70,122,],[95,138,]),'elementosInternosString':([70,123,],[96,139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> declararConstante','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',15),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',16),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',17),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',18),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',21),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',22),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',23),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',24),
  ('value -> string','value',1,'p_value','scalaSintactico.py',27),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',28),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',29),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',30),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',31),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',32),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',33),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',36),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',37),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',38),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',39),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',42),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',43),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',46),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',47),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',50),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',51),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',54),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',55),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',58),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',59),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',60),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',61),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',62),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',63),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',64),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',65),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',68),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',69),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',70),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',73),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',74),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',75),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',76),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',79),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',80),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',81),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',82),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',83),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',84),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',85),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',86),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',89),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',90),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',91),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',92),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',95),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',99),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',103),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',107),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',111),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',115),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',119),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',123),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',127),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',128),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',129),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',130),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',131),
  ('factor -> INT_NUMBER','factor',1,'p_factor_int','scalaSintactico.py',134),
  ('factor -> DOUBLE_NUMBER','factor',1,'p_factor_double','scalaSintactico.py',137),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',140),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',141),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',144),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',147),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',150),
]

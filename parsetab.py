
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INPUT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LM LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstante\n             | funcionesTupla\n             | funcionesArray\n             | for\n             | funcionesPropias\n             | whiledeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPAREN\n            | LIST LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n                | LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRING LPAREN RPARENtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengthfuncionesPropias : INPUT LPAREN RPAREN\n            | PRINTLN LPAREN string RPAREN\n            | PRINTLN LPAREN booleano RPAREN\n            | PRINTLN LPAREN ID RPAREN\n            | PRINTLN LPAREN expression RPARENarrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEwhile : WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACEwhileclause : factor comparacion factor\n                | IDfor : FOR LPAREN  RPAREN LBRACE  LBRACE  RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : intfactor : doublebooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,111,132,],[12,12,12,]),'VAR':([0,111,132,],[14,14,14,]),'VAL':([0,111,132,],[16,16,16,]),'FOR':([0,111,132,],[23,23,23,]),'INPUT':([0,111,132,],[24,24,24,]),'PRINTLN':([0,111,132,],[25,25,25,]),'WHILE':([0,111,132,],[26,26,26,]),'ID':([0,14,16,41,42,111,132,],[15,36,38,67,74,15,15,]),'INT_NUMBER':([0,12,31,32,33,34,41,42,47,48,49,50,51,52,54,62,103,110,111,114,119,120,124,132,163,164,165,166,183,217,218,219,220,225,226,227,228,257,258,259,260,],[29,29,29,29,29,29,29,29,29,-98,-99,-100,-101,-102,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'DOUBLE_NUMBER':([0,12,31,32,33,34,41,42,47,48,49,50,51,52,54,62,103,110,111,115,119,120,125,132,163,164,165,166,184,225,226,227,228,],[30,30,30,30,30,30,30,30,30,-98,-99,-100,-101,-102,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,13,17,18,19,20,21,22,27,28,29,30,43,44,45,46,55,57,58,59,60,64,69,70,71,76,77,78,79,80,81,84,85,86,87,92,93,94,95,96,97,98,99,100,101,102,105,106,107,108,121,135,136,137,138,158,159,160,161,162,167,169,182,187,192,241,242,243,244,249,250,251,252,265,266,267,268,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-89,-92,-70,-71,-72,-76,-77,-78,-103,-104,-109,-108,-87,-88,-90,-91,-73,-75,-84,-85,-86,-79,-107,-105,-106,-14,-15,-52,-51,-49,-50,-16,-17,-18,-19,-10,-11,-52,-51,-49,-50,-12,-13,-46,-47,-48,-80,-81,-82,-83,-74,-53,-54,-55,-56,-65,-66,-67,-68,-69,-97,-93,-24,-25,-94,-20,-21,-22,-23,-61,-62,-63,-64,-57,-58,-59,-60,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,13,17,18,19,20,21,22,27,28,29,30,43,44,45,46,55,57,58,59,60,64,69,70,71,76,77,78,79,80,81,84,85,86,87,92,93,94,95,96,97,98,99,100,101,102,105,106,107,108,121,131,134,135,136,137,138,158,159,160,161,162,167,168,169,182,187,192,241,242,243,244,249,250,251,252,265,266,267,268,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-89,-92,-70,-71,-72,-76,-77,-78,-103,-104,-109,-108,-87,-88,-90,-91,-73,-75,-84,-85,-86,-79,-107,-105,-106,-14,-15,-52,-51,-49,-50,-16,-17,-18,-19,-10,-11,-52,-51,-49,-50,-12,-13,-46,-47,-48,-80,-81,-82,-83,-74,167,169,-53,-54,-55,-56,-65,-66,-67,-68,-69,-97,192,-93,-24,-25,-94,-20,-21,-22,-23,-61,-62,-63,-64,-57,-58,-59,-60,]),'PLUS':([2,11,13,27,28,29,30,43,44,45,46,68,85,99,],[31,-89,-92,-103,-104,-109,-108,-87,-88,-90,-91,31,31,31,]),'MINUS':([2,11,13,27,28,29,30,43,44,45,46,68,85,99,],[32,-89,-92,-103,-104,-109,-108,-87,-88,-90,-91,32,32,32,]),'RPAREN':([11,13,27,28,29,30,39,40,43,44,45,46,65,66,67,68,69,70,71,72,74,91,126,127,128,129,130,133,148,149,150,151,152,153,154,155,156,157,188,189,190,191,205,206,207,208,229,230,231,232,237,238,239,240,261,262,263,264,],[-89,-92,-103,-104,-109,-108,63,64,-87,-88,-90,-91,105,106,107,108,-107,-105,-106,109,-96,121,162,-38,-39,-40,-41,-95,182,-26,-27,-28,-29,-30,-32,-34,-36,187,-42,-43,-44,-45,-31,-33,-35,-37,241,242,243,244,249,250,251,252,265,266,267,268,]),'TIMES':([11,13,27,28,29,30,43,44,45,46,],[33,-92,-103,-104,-109,-108,33,33,-90,-91,]),'DIVIDE':([11,13,27,28,29,30,43,44,45,46,],[34,-92,-103,-104,-109,-108,34,34,-90,-91,]),'DOT':([15,],[37,]),'LPAREN':([23,24,25,26,56,62,89,90,201,202,203,204,213,214,215,216,253,254,255,256,],[39,40,41,42,91,103,119,120,217,218,219,220,225,226,227,228,257,258,259,260,]),'GT':([27,28,29,30,35,73,],[-103,-104,-109,-108,48,48,]),'GE':([27,28,29,30,35,73,],[-103,-104,-109,-108,49,49,]),'LT':([27,28,29,30,35,73,],[-103,-104,-109,-108,50,50,]),'LE':([27,28,29,30,35,73,],[-103,-104,-109,-108,51,51,]),'EQUAL2':([27,28,29,30,35,73,],[-103,-104,-109,-108,52,52,]),'LBRACE':([27,28,29,30,63,75,104,109,],[-103,-104,-109,-108,104,111,131,132,]),'COMMA':([29,30,69,70,71,127,128,129,130,153,154,155,156,],[-109,-108,-107,-105,-106,163,164,165,166,183,184,185,186,]),'COLON':([36,38,],[53,61,]),'EQUAL':([36,38,78,79,80,81,94,95,96,97,170,171,172,173,174,175,176,177,],[54,62,112,113,114,115,122,123,124,125,193,194,195,196,197,198,199,200,]),'SWAP':([37,],[55,]),'TOSTRING':([37,],[56,]),'PRODUCTITERATOR':([37,],[57,]),'HEAD':([37,],[58,]),'TAIL':([37,],[59,]),'LENGTH':([37,],[60,]),'STRING':([41,54,62,103,112,119,120,122,163,164,165,166,186,225,226,227,228,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'TRUE':([41,54,62,103,113,119,120,123,163,164,165,166,185,225,226,227,228,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'FALSE':([41,54,62,103,113,119,120,123,163,164,165,166,185,225,226,227,228,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'STRING_TYPE':([53,61,116,117,147,236,],[78,94,142,146,181,248,]),'BOOL':([53,61,116,117,147,235,],[79,95,141,145,180,247,]),'INT':([53,61,116,117,147,233,],[80,96,139,143,178,245,]),'DOUBLE':([53,61,116,117,147,234,],[81,97,140,144,179,246,]),'ARRAY':([53,54,88,209,210,211,212,],[82,89,118,221,222,223,224,]),'LIST':([53,54,197,198,199,200,],[83,90,213,214,215,216,]),'NEW':([54,193,194,195,196,],[88,209,210,211,212,]),'LBRACK':([82,83,118,221,222,223,224,],[116,117,147,233,234,235,236,]),'RBRACK':([139,140,141,142,143,144,145,146,178,179,180,181,245,246,247,248,],[170,171,172,173,174,175,176,177,201,202,203,204,253,254,255,256,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,111,132,],[1,134,168,]),'expression':([0,41,54,62,111,132,],[2,68,85,99,2,2,]),'sentencia':([0,111,132,],[3,3,3,]),'declararVariable':([0,111,132,],[4,4,4,]),'declararConstante':([0,111,132,],[5,5,5,]),'funcionesTupla':([0,111,132,],[6,6,6,]),'funcionesArray':([0,111,132,],[7,7,7,]),'for':([0,111,132,],[8,8,8,]),'funcionesPropias':([0,111,132,],[9,9,9,]),'while':([0,111,132,],[10,10,10,]),'term':([0,31,32,41,54,62,111,132,],[11,43,44,11,11,11,11,11,]),'factor':([0,12,31,32,33,34,41,42,47,54,62,110,111,132,],[13,35,13,13,45,46,13,73,75,13,13,133,13,13,]),'tuplaSwap':([0,111,132,],[17,17,17,]),'tuplaToString':([0,111,132,],[18,18,18,]),'tuplaProductIterator':([0,111,132,],[19,19,19,]),'arrayHead':([0,111,132,],[20,20,20,]),'arrayTail':([0,111,132,],[21,21,21,]),'arrayLength':([0,111,132,],[22,22,22,]),'int':([0,12,31,32,33,34,41,42,47,54,62,103,110,111,114,119,120,124,132,163,164,165,166,183,217,218,219,220,225,226,227,228,257,258,259,260,],[27,27,27,27,27,27,27,27,27,27,27,127,27,27,137,153,153,160,27,127,127,127,127,153,229,230,231,232,153,153,153,153,261,262,263,264,]),'double':([0,12,31,32,33,34,41,42,47,54,62,103,110,111,115,119,120,125,132,163,164,165,166,184,225,226,227,228,],[28,28,28,28,28,28,28,28,28,28,28,128,28,28,138,154,154,161,28,128,128,128,128,154,154,154,154,154,]),'comparacion':([35,73,],[47,110,]),'string':([41,54,62,103,112,119,120,122,163,164,165,166,186,225,226,227,228,],[65,86,100,130,135,156,156,158,130,130,130,130,156,156,156,156,156,]),'booleano':([41,54,62,103,113,119,120,123,163,164,165,166,185,225,226,227,228,],[66,87,101,129,136,155,155,159,129,129,129,129,155,155,155,155,155,]),'whileclause':([42,],[72,]),'tipoValue':([53,],[76,]),'tipo':([53,61,],[77,93,]),'value':([54,],[84,]),'tipoValueCons':([61,],[92,]),'valueCons':([62,],[98,]),'tupla':([62,],[102,]),'elementosInternos2':([103,163,164,165,166,],[126,188,189,190,191,]),'elementosInternos':([119,120,225,226,227,228,],[148,157,237,238,239,240,]),'elementosInternosInt':([119,120,183,225,226,227,228,],[149,149,205,149,149,149,149,]),'elementosInternosDouble':([119,120,184,225,226,227,228,],[150,150,206,150,150,150,150,]),'elementosInternosBool':([119,120,185,225,226,227,228,],[151,151,207,151,151,151,151,]),'elementosInternosString':([119,120,186,225,226,227,228,],[152,152,208,152,152,152,152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',8),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> declararConstante','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('cuerpo -> for','cuerpo',1,'p_cuerpo','scalaSintactico.py',14),
  ('cuerpo -> funcionesPropias','cuerpo',1,'p_cuerpo','scalaSintactico.py',15),
  ('cuerpo -> while','cuerpo',1,'p_cuerpo','scalaSintactico.py',16),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',20),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',21),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',22),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',23),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',26),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',27),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',28),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',29),
  ('value -> string','value',1,'p_value','scalaSintactico.py',32),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',33),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',34),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',35),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',36),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',37),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',38),
  ('value -> LIST LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',39),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',42),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',43),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',44),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',45),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',48),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',49),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',52),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',53),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',56),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',57),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',60),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',61),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',64),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',65),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',66),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',67),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',68),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',69),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',70),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',71),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',74),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',75),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',76),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',79),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',80),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',81),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',82),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',86),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',87),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',88),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',89),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',90),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',91),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',92),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',93),
  ('tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',94),
  ('tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',95),
  ('tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',96),
  ('tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',97),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',100),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',101),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',102),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',103),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',106),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',109),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',110),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',111),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',114),
  ('tuplaToString -> ID DOT TOSTRING LPAREN RPAREN','tuplaToString',5,'p_tuplaToString','scalaSintactico.py',117),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',120),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',123),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',124),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',125),
  ('funcionesPropias -> INPUT LPAREN RPAREN','funcionesPropias',3,'p_funcionesPropias','scalaSintactico.py',128),
  ('funcionesPropias -> PRINTLN LPAREN string RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',129),
  ('funcionesPropias -> PRINTLN LPAREN booleano RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',130),
  ('funcionesPropias -> PRINTLN LPAREN ID RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',131),
  ('funcionesPropias -> PRINTLN LPAREN expression RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',132),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',137),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',140),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',143),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',146),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',150),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',154),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',158),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',162),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',166),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',170),
  ('while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE','while',7,'p_while','scalaSintactico.py',173),
  ('whileclause -> factor comparacion factor','whileclause',3,'p_whileclause','scalaSintactico.py',176),
  ('whileclause -> ID','whileclause',1,'p_whileclause','scalaSintactico.py',177),
  ('for -> FOR LPAREN RPAREN LBRACE LBRACE RBRACE','for',6,'p_for','scalaSintactico.py',180),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',183),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',184),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',185),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',186),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',187),
  ('factor -> int','factor',1,'p_factor_int','scalaSintactico.py',190),
  ('factor -> double','factor',1,'p_factor_double','scalaSintactico.py',193),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',196),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',197),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',200),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',203),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',206),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL COLON COMMA DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INPUT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LM LPAREN LT MINUS NEW PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN STRING STRING_TYPE SWAP TAIL TIMES TOSTRING TRUE UNIT VAL VAR WHILEcuerpoP : cuerpo\n             | defFuncionescuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstante\n             | funcionesTupla\n             | funcionesList\n             | funcionesArray\n             | for\n             | funcionesPropias\n             | while\n             | funcionesdeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPAREN\n            | LIST LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n                | LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRING LPAREN RPARENtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengthfuncionesList : listIsEmpty\n            | listReversefuncionesPropias : INPUT LPAREN RPAREN\n            | PRINTLN LPAREN string RPAREN\n            | PRINTLN LPAREN booleano RPAREN\n            | PRINTLN LPAREN ID RPAREN\n            | PRINTLN LPAREN expression RPARENarrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHlistReverse : ID DOT REVERSElistIsEmpty : ID DOT ISEMPTYexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorif : IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACEsentencia : if\n                 | if ELSE LBRACE cuerpo RBRACEcomp : factor comparacion factor\n            | comparacionesVarwhile : WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACEwhileclause : comp\n                | ID\n                | booleanofor : FOR LPAREN ID LM ID RPAREN LBRACE  cuerpo  RBRACEcomparacionesVar : ID DOT EQUALS LPAREN ID  RPAREN\n                        | ID DOT EQ LPAREN ID RPARENcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2defFunciones : DEF ID LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE\n                    | DEF ID LPAREN RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE\n                    | DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE\n                    | DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACEfunciones : ID LPAREN RPAREN\n                    | ID LPAREN argumentos RPARENparametros : ID COLON tipo\n                    | ID COLON tipo COMMA parametrosargumentos : int\n                    | double\n                    | booleano\n                    | string\n                    | int COMMA argumentos\n                    | double COMMA argumentos\n                    | booleano COMMA argumentos\n                    | string COMMA argumentosfactor : intfactor : doublebooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'DEF':([0,],[15,]),'VAR':([0,76,173,250,254,258,259,280,281,],[19,19,19,19,19,19,19,19,19,]),'VAL':([0,76,173,250,254,258,259,280,281,],[20,20,20,20,20,20,20,20,20,]),'FOR':([0,76,173,250,254,258,259,280,281,],[29,29,29,29,29,29,29,29,29,]),'INPUT':([0,76,173,250,254,258,259,280,281,],[30,30,30,30,30,30,30,30,30,]),'PRINTLN':([0,76,173,250,254,258,259,280,281,],[31,31,31,31,31,31,31,31,31,]),'WHILE':([0,76,173,250,254,258,259,280,281,],[32,32,32,32,32,32,32,32,32,]),'ID':([0,15,19,20,49,51,52,56,76,131,173,220,221,223,250,254,258,259,280,281,301,315,],[16,41,47,48,81,85,89,94,16,172,16,252,253,94,16,16,16,16,16,16,316,329,]),'IF':([0,76,173,250,254,258,259,280,281,],[34,34,34,34,34,34,34,34,34,]),'INT_NUMBER':([0,39,40,42,44,45,51,52,53,76,78,80,98,99,100,101,130,138,139,140,141,142,143,144,156,161,162,165,173,214,215,216,217,241,250,254,258,259,280,281,292,293,294,295,306,307,308,309,344,345,346,347,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-113,-114,-115,-116,-117,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'DOUBLE_NUMBER':([0,39,40,42,44,45,51,52,53,76,78,80,98,99,100,101,130,138,139,140,141,142,143,144,157,161,162,166,173,214,215,216,217,242,250,254,258,259,280,281,306,307,308,309,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-113,-114,-115,-116,-117,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,21,22,23,24,25,26,27,28,33,35,36,37,38,54,55,57,63,64,65,66,68,69,70,71,72,73,74,75,82,97,104,105,106,107,108,109,112,113,114,115,119,120,121,122,123,124,125,126,127,128,129,132,133,134,135,152,153,186,187,188,189,209,210,211,212,213,240,245,251,296,297,300,314,325,326,327,328,330,335,336,337,338,339,352,353,354,355,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-97,-102,-74,-75,-76,-83,-84,-80,-81,-82,-100,-134,-135,-140,-139,-95,-96,-122,-136,-137,-138,-77,-79,-94,-93,-90,-91,-92,-98,-99,-85,-123,-18,-19,-56,-55,-53,-54,-20,-21,-22,-23,-14,-15,-56,-55,-53,-54,-16,-17,-50,-51,-52,-86,-87,-88,-89,-78,-103,-57,-58,-59,-60,-69,-70,-71,-72,-73,-28,-29,-106,-110,-101,-119,-118,-24,-25,-26,-27,-121,-65,-66,-67,-68,-120,-61,-62,-63,-64,]),'RBRACE':([4,5,6,7,8,9,10,11,12,13,14,17,18,21,22,23,24,25,26,27,28,33,35,36,37,38,54,55,57,63,64,65,66,68,69,70,71,72,73,74,75,82,97,103,104,105,106,107,108,109,112,113,114,115,119,120,121,122,123,124,125,126,127,128,129,132,133,134,135,152,153,186,187,188,189,209,210,211,212,213,219,240,245,251,276,279,282,296,297,298,316,325,326,327,328,329,335,336,337,338,352,353,354,355,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-97,-102,-74,-75,-76,-83,-84,-80,-81,-82,-100,-134,-135,-140,-139,-95,-96,-122,-136,-137,-138,-77,-79,-94,-93,-90,-91,-92,-98,-99,-85,-123,153,-18,-19,-56,-55,-53,-54,-20,-21,-22,-23,-14,-15,-56,-55,-53,-54,-16,-17,-50,-51,-52,-86,-87,-88,-89,-78,-103,-57,-58,-59,-60,-69,-70,-71,-72,-73,251,-28,-29,-106,296,297,300,-110,-101,314,330,-24,-25,-26,-27,339,-65,-66,-67,-68,-61,-62,-63,-64,]),'RETURN':([4,5,6,7,8,9,10,11,12,13,14,17,18,21,22,23,24,25,26,27,28,33,35,36,37,38,54,55,57,63,64,65,66,68,69,70,71,72,73,74,75,82,97,104,105,106,107,108,109,112,113,114,115,119,120,121,122,123,124,125,126,127,128,129,132,133,134,135,152,153,186,187,188,189,209,210,211,212,213,240,245,251,283,296,297,299,325,326,327,328,335,336,337,338,352,353,354,355,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-97,-102,-74,-75,-76,-83,-84,-80,-81,-82,-100,-134,-135,-140,-139,-95,-96,-122,-136,-137,-138,-77,-79,-94,-93,-90,-91,-92,-98,-99,-85,-123,-18,-19,-56,-55,-53,-54,-20,-21,-22,-23,-14,-15,-56,-55,-53,-54,-16,-17,-50,-51,-52,-86,-87,-88,-89,-78,-103,-57,-58,-59,-60,-69,-70,-71,-72,-73,-28,-29,-106,301,-110,-101,315,-24,-25,-26,-27,-65,-66,-67,-68,-61,-62,-63,-64,]),'PLUS':([4,17,33,35,36,37,38,54,55,74,75,86,113,126,],[39,-97,-100,-134,-135,-140,-139,-95,-96,-98,-99,39,39,39,]),'MINUS':([4,17,33,35,36,37,38,54,55,74,75,86,113,126,],[40,-97,-100,-134,-135,-140,-139,-95,-96,-98,-99,40,40,40,]),'LPAREN':([16,29,30,31,32,34,41,67,80,117,118,174,175,268,269,270,271,288,289,290,291,340,341,342,343,],[42,49,50,51,52,53,56,102,130,161,162,220,221,292,293,294,295,306,307,308,309,344,345,346,347,]),'DOT':([16,89,],[43,137,]),'RPAREN':([17,33,35,36,37,38,42,50,54,55,56,58,59,60,61,62,63,64,65,74,75,83,84,85,86,87,88,89,90,92,95,102,148,149,150,151,167,168,169,170,171,172,176,177,178,179,180,181,182,199,200,201,202,203,204,205,206,207,208,246,247,248,249,252,253,255,272,273,274,275,277,278,310,311,312,313,321,322,323,324,348,349,350,351,],[-97,-100,-134,-135,-140,-139,57,82,-95,-96,96,97,-126,-127,-128,-129,-136,-137,-138,-98,-99,132,133,134,135,136,-107,-108,-109,-105,146,152,-130,-131,-132,-133,213,-42,-43,-44,-45,218,-104,222,-124,-53,-54,-55,-56,240,-30,-31,-32,-33,-34,-36,-38,-40,245,-46,-47,-48,-49,277,278,-125,-35,-37,-39,-41,-111,-112,325,326,327,328,335,336,337,338,352,353,354,355,]),'TIMES':([17,33,35,36,37,38,54,55,74,75,],[44,-100,-134,-135,-140,-139,44,44,-98,-99,]),'DIVIDE':([17,33,35,36,37,38,54,55,74,75,],[45,-100,-134,-135,-140,-139,45,45,-98,-99,]),'ELSE':([18,297,],[46,-101,]),'GT':([35,36,37,38,91,93,],[-134,-135,-140,-139,139,139,]),'GE':([35,36,37,38,91,93,],[-134,-135,-140,-139,140,140,]),'LT':([35,36,37,38,91,93,],[-134,-135,-140,-139,141,141,]),'LE':([35,36,37,38,91,93,],[-134,-135,-140,-139,142,142,]),'EQUAL2':([35,36,37,38,91,93,],[-134,-135,-140,-139,143,143,]),'COMMA':([37,38,59,60,61,62,63,64,65,168,169,170,171,178,179,180,181,182,204,205,206,207,],[-140,-139,98,99,100,101,-136,-137,-138,214,215,216,217,223,-53,-54,-55,-56,241,242,243,244,]),'TRUE':([42,51,52,78,80,98,99,100,101,130,155,161,162,164,214,215,216,217,243,306,307,308,309,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'FALSE':([42,51,52,78,80,98,99,100,101,130,155,161,162,164,214,215,216,217,243,306,307,308,309,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'STRING':([42,51,78,80,98,99,100,101,130,154,161,162,163,214,215,216,217,244,306,307,308,309,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'SWAP':([43,],[66,]),'TOSTRING':([43,],[67,]),'PRODUCTITERATOR':([43,],[68,]),'ISEMPTY':([43,],[69,]),'REVERSE':([43,],[70,]),'HEAD':([43,],[71,]),'TAIL':([43,],[72,]),'LENGTH':([43,],[73,]),'LBRACE':([46,136,218,222,226,227,256,257,],[76,173,250,254,258,259,280,281,]),'COLON':([47,48,94,96,146,],[77,79,145,147,183,]),'EQUAL':([47,48,106,107,108,109,121,122,123,124,179,180,181,182,184,185,224,225,228,229,230,231,232,233,234,235,],[78,80,154,155,156,157,163,164,165,166,-53,-54,-55,-56,226,227,256,257,260,261,262,263,264,265,266,267,]),'STRING_TYPE':([77,79,145,147,158,159,183,198,320,],[106,121,182,182,193,197,182,239,334,]),'BOOL':([77,79,145,147,158,159,183,198,319,],[107,122,181,181,192,196,181,238,333,]),'INT':([77,79,145,147,158,159,183,198,317,],[108,123,179,179,190,194,179,236,331,]),'DOUBLE':([77,79,145,147,158,159,183,198,318,],[109,124,180,180,191,195,180,237,332,]),'ARRAY':([77,78,116,284,285,286,287,],[110,117,160,302,303,304,305,]),'LIST':([77,78,264,265,266,267,],[111,118,288,289,290,291,]),'NEW':([78,260,261,262,263,],[116,284,285,286,287,]),'LM':([81,],[131,]),'LBRACK':([110,111,160,302,303,304,305,],[158,159,198,317,318,319,320,]),'EQUALS':([137,],[174,]),'EQ':([137,],[175,]),'UNIT':([147,183,],[184,224,]),'RBRACK':([190,191,192,193,194,195,196,197,236,237,238,239,331,332,333,334,],[228,229,230,231,232,233,234,235,268,269,270,271,340,341,342,343,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpoP':([0,],[1,]),'cuerpo':([0,76,173,250,254,258,259,280,281,],[2,103,219,276,279,282,283,298,299,]),'defFunciones':([0,],[3,]),'expression':([0,51,76,78,80,173,250,254,258,259,280,281,],[4,86,4,113,126,4,4,4,4,4,4,4,]),'sentencia':([0,76,173,250,254,258,259,280,281,],[5,5,5,5,5,5,5,5,5,]),'declararVariable':([0,76,173,250,254,258,259,280,281,],[6,6,6,6,6,6,6,6,6,]),'declararConstante':([0,76,173,250,254,258,259,280,281,],[7,7,7,7,7,7,7,7,7,]),'funcionesTupla':([0,76,173,250,254,258,259,280,281,],[8,8,8,8,8,8,8,8,8,]),'funcionesList':([0,76,173,250,254,258,259,280,281,],[9,9,9,9,9,9,9,9,9,]),'funcionesArray':([0,76,173,250,254,258,259,280,281,],[10,10,10,10,10,10,10,10,10,]),'for':([0,76,173,250,254,258,259,280,281,],[11,11,11,11,11,11,11,11,11,]),'funcionesPropias':([0,76,173,250,254,258,259,280,281,],[12,12,12,12,12,12,12,12,12,]),'while':([0,76,173,250,254,258,259,280,281,],[13,13,13,13,13,13,13,13,13,]),'funciones':([0,76,173,250,254,258,259,280,281,],[14,14,14,14,14,14,14,14,14,]),'term':([0,39,40,51,76,78,80,173,250,254,258,259,280,281,],[17,54,55,17,17,17,17,17,17,17,17,17,17,17,]),'if':([0,76,173,250,254,258,259,280,281,],[18,18,18,18,18,18,18,18,18,]),'tuplaSwap':([0,76,173,250,254,258,259,280,281,],[21,21,21,21,21,21,21,21,21,]),'tuplaToString':([0,76,173,250,254,258,259,280,281,],[22,22,22,22,22,22,22,22,22,]),'tuplaProductIterator':([0,76,173,250,254,258,259,280,281,],[23,23,23,23,23,23,23,23,23,]),'listIsEmpty':([0,76,173,250,254,258,259,280,281,],[24,24,24,24,24,24,24,24,24,]),'listReverse':([0,76,173,250,254,258,259,280,281,],[25,25,25,25,25,25,25,25,25,]),'arrayHead':([0,76,173,250,254,258,259,280,281,],[26,26,26,26,26,26,26,26,26,]),'arrayTail':([0,76,173,250,254,258,259,280,281,],[27,27,27,27,27,27,27,27,27,]),'arrayLength':([0,76,173,250,254,258,259,280,281,],[28,28,28,28,28,28,28,28,28,]),'factor':([0,39,40,44,45,51,52,53,76,78,80,138,144,173,250,254,258,259,280,281,],[33,33,33,74,75,33,91,93,33,33,33,176,177,33,33,33,33,33,33,33,]),'int':([0,39,40,42,44,45,51,52,53,76,78,80,98,99,100,101,130,138,144,156,161,162,165,173,214,215,216,217,241,250,254,258,259,280,281,292,293,294,295,306,307,308,309,344,345,346,347,],[35,35,35,59,35,35,35,35,35,35,35,35,59,59,59,59,168,35,35,188,204,204,211,35,168,168,168,168,204,35,35,35,35,35,35,310,311,312,313,204,204,204,204,348,349,350,351,]),'double':([0,39,40,42,44,45,51,52,53,76,78,80,98,99,100,101,130,138,144,157,161,162,166,173,214,215,216,217,242,250,254,258,259,280,281,306,307,308,309,],[36,36,36,60,36,36,36,36,36,36,36,36,60,60,60,60,169,36,36,189,205,205,212,36,169,169,169,169,205,36,36,36,36,36,36,205,205,205,205,]),'argumentos':([42,98,99,100,101,],[58,148,149,150,151,]),'booleano':([42,51,52,78,80,98,99,100,101,130,155,161,162,164,214,215,216,217,243,306,307,308,309,],[61,84,90,115,128,61,61,61,61,170,187,206,206,210,170,170,170,170,206,206,206,206,206,]),'string':([42,51,78,80,98,99,100,101,130,154,161,162,163,214,215,216,217,244,306,307,308,309,],[62,83,114,127,62,62,62,62,171,186,207,207,209,171,171,171,171,207,207,207,207,207,]),'whileclause':([52,],[87,]),'comp':([52,],[88,]),'comparacionesVar':([52,],[92,]),'parametros':([56,223,],[95,255,]),'tipoValue':([77,],[104,]),'tipo':([77,79,145,147,183,],[105,120,178,185,225,]),'value':([78,],[112,]),'tipoValueCons':([79,],[119,]),'valueCons':([80,],[125,]),'tupla':([80,],[129,]),'comparacion':([91,93,],[138,144,]),'elementosInternos2':([130,214,215,216,217,],[167,246,247,248,249,]),'elementosInternos':([161,162,306,307,308,309,],[199,208,321,322,323,324,]),'elementosInternosInt':([161,162,241,306,307,308,309,],[200,200,272,200,200,200,200,]),'elementosInternosDouble':([161,162,242,306,307,308,309,],[201,201,273,201,201,201,201,]),'elementosInternosBool':([161,162,243,306,307,308,309,],[202,202,274,202,202,202,202,]),'elementosInternosString':([161,162,244,306,307,308,309,],[203,203,275,203,203,203,203,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpoP","S'",1,None,None,None),
  ('cuerpoP -> cuerpo','cuerpoP',1,'p_cuerpoP','scalaSintactico.py',9),
  ('cuerpoP -> defFunciones','cuerpoP',1,'p_cuerpoP','scalaSintactico.py',10),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',14),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',15),
  ('cuerpo -> declararConstante','cuerpo',1,'p_cuerpo','scalaSintactico.py',16),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',17),
  ('cuerpo -> funcionesList','cuerpo',1,'p_cuerpo','scalaSintactico.py',18),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',19),
  ('cuerpo -> for','cuerpo',1,'p_cuerpo','scalaSintactico.py',20),
  ('cuerpo -> funcionesPropias','cuerpo',1,'p_cuerpo','scalaSintactico.py',21),
  ('cuerpo -> while','cuerpo',1,'p_cuerpo','scalaSintactico.py',22),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','scalaSintactico.py',23),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',27),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',28),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',29),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',30),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',33),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',34),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',35),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',36),
  ('value -> string','value',1,'p_value','scalaSintactico.py',39),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',40),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',41),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',42),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',43),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',44),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',45),
  ('value -> LIST LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',46),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',49),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',50),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',51),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',52),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',55),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',56),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',59),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',60),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',63),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',64),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',67),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',68),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',71),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',72),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',73),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',74),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',75),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',76),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',77),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',78),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',81),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',82),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',83),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',86),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',87),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',88),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',89),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',93),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',94),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',95),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',96),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',97),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',98),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',99),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',100),
  ('tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',101),
  ('tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',102),
  ('tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',103),
  ('tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',104),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',107),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',108),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',109),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',110),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',113),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',116),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',117),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',118),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',121),
  ('tuplaToString -> ID DOT TOSTRING LPAREN RPAREN','tuplaToString',5,'p_tuplaToString','scalaSintactico.py',124),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',127),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',131),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',132),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',133),
  ('funcionesList -> listIsEmpty','funcionesList',1,'p_funcionesList','scalaSintactico.py',137),
  ('funcionesList -> listReverse','funcionesList',1,'p_funcionesList','scalaSintactico.py',138),
  ('funcionesPropias -> INPUT LPAREN RPAREN','funcionesPropias',3,'p_funcionesPropias','scalaSintactico.py',142),
  ('funcionesPropias -> PRINTLN LPAREN string RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',143),
  ('funcionesPropias -> PRINTLN LPAREN booleano RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',144),
  ('funcionesPropias -> PRINTLN LPAREN ID RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',145),
  ('funcionesPropias -> PRINTLN LPAREN expression RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',146),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',151),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',154),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',157),
  ('listReverse -> ID DOT REVERSE','listReverse',3,'p_listReverse','scalaSintactico.py',160),
  ('listIsEmpty -> ID DOT ISEMPTY','listIsEmpty',3,'p_listIsEmpty','scalaSintactico.py',163),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',166),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',170),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',174),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',178),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',182),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',186),
  ('if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE','if',9,'p_sentencia_if','scalaSintactico.py',190),
  ('sentencia -> if','sentencia',1,'p_sentencia_else','scalaSintactico.py',194),
  ('sentencia -> if ELSE LBRACE cuerpo RBRACE','sentencia',5,'p_sentencia_else','scalaSintactico.py',195),
  ('comp -> factor comparacion factor','comp',3,'p_comp','scalaSintactico.py',199),
  ('comp -> comparacionesVar','comp',1,'p_comp','scalaSintactico.py',200),
  ('while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE','while',7,'p_while','scalaSintactico.py',203),
  ('whileclause -> comp','whileclause',1,'p_whileclause','scalaSintactico.py',206),
  ('whileclause -> ID','whileclause',1,'p_whileclause','scalaSintactico.py',207),
  ('whileclause -> booleano','whileclause',1,'p_whileclause','scalaSintactico.py',208),
  ('for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE','for',9,'p_for','scalaSintactico.py',212),
  ('comparacionesVar -> ID DOT EQUALS LPAREN ID RPAREN','comparacionesVar',6,'p_comparacionesVar','scalaSintactico.py',216),
  ('comparacionesVar -> ID DOT EQ LPAREN ID RPAREN','comparacionesVar',6,'p_comparacionesVar','scalaSintactico.py',217),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',221),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',222),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',223),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',224),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',225),
  ('defFunciones -> DEF ID LPAREN parametros RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE','defFunciones',11,'p_defFunciones','scalaSintactico.py',229),
  ('defFunciones -> DEF ID LPAREN RPAREN COLON UNIT EQUAL LBRACE cuerpo RBRACE','defFunciones',10,'p_defFunciones','scalaSintactico.py',230),
  ('defFunciones -> DEF ID LPAREN parametros RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE','defFunciones',13,'p_defFunciones','scalaSintactico.py',231),
  ('defFunciones -> DEF ID LPAREN RPAREN COLON tipo EQUAL LBRACE cuerpo RETURN ID RBRACE','defFunciones',12,'p_defFunciones','scalaSintactico.py',232),
  ('funciones -> ID LPAREN RPAREN','funciones',3,'p_funciones','scalaSintactico.py',235),
  ('funciones -> ID LPAREN argumentos RPAREN','funciones',4,'p_funciones','scalaSintactico.py',236),
  ('parametros -> ID COLON tipo','parametros',3,'p_parametros','scalaSintactico.py',239),
  ('parametros -> ID COLON tipo COMMA parametros','parametros',5,'p_parametros','scalaSintactico.py',240),
  ('argumentos -> int','argumentos',1,'p_argumentos','scalaSintactico.py',243),
  ('argumentos -> double','argumentos',1,'p_argumentos','scalaSintactico.py',244),
  ('argumentos -> booleano','argumentos',1,'p_argumentos','scalaSintactico.py',245),
  ('argumentos -> string','argumentos',1,'p_argumentos','scalaSintactico.py',246),
  ('argumentos -> int COMMA argumentos','argumentos',3,'p_argumentos','scalaSintactico.py',247),
  ('argumentos -> double COMMA argumentos','argumentos',3,'p_argumentos','scalaSintactico.py',248),
  ('argumentos -> booleano COMMA argumentos','argumentos',3,'p_argumentos','scalaSintactico.py',249),
  ('argumentos -> string COMMA argumentos','argumentos',3,'p_argumentos','scalaSintactico.py',250),
  ('factor -> int','factor',1,'p_factor_int','scalaSintactico.py',254),
  ('factor -> double','factor',1,'p_factor_double','scalaSintactico.py',257),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',260),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',261),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',264),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',267),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',270),
]

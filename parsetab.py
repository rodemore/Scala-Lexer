
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia \n             | declararVariabledeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano tipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEvalue : NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN\n        tipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubleexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LEfactor : INT_NUMBERfactor : DOUBLE_NUMBERbooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,43,],[6,6,]),'VAR':([0,43,],[8,8,]),'INT_NUMBER':([0,6,11,12,13,14,21,22,23,24,25,27,43,46,64,],[9,9,9,9,9,9,9,-26,-27,-28,-29,9,9,53,53,]),'DOUBLE_NUMBER':([0,6,11,12,13,14,21,22,23,24,25,27,43,47,],[10,10,10,10,10,10,10,-26,-27,-28,-29,10,10,55,]),'$end':([1,2,3,4,5,7,9,10,17,18,19,20,29,30,31,32,33,34,35,36,37,38,40,41,42,50,51,52,53,54,55,57,66,],[0,-1,-2,-3,-21,-24,-30,-31,-19,-20,-22,-23,-4,-5,-13,-12,-10,-11,-6,-7,-8,-9,-34,-32,-33,-15,-16,-17,-36,-18,-35,-25,-14,]),'RBRACE':([2,3,4,5,7,9,10,17,18,19,20,29,30,31,32,33,34,35,36,37,38,40,41,42,49,50,51,52,53,54,55,57,66,],[-1,-2,-3,-21,-24,-30,-31,-19,-20,-22,-23,-4,-5,-13,-12,-10,-11,-6,-7,-8,-9,-34,-32,-33,57,-15,-16,-17,-36,-18,-35,-25,-14,]),'PLUS':([2,5,7,9,10,17,18,19,20,36,],[11,-21,-24,-30,-31,-19,-20,-22,-23,11,]),'MINUS':([2,5,7,9,10,17,18,19,20,36,],[12,-21,-24,-30,-31,-19,-20,-22,-23,12,]),'TIMES':([5,7,9,10,17,18,19,20,],[13,-24,-30,-31,13,13,-22,-23,]),'DIVIDE':([5,7,9,10,17,18,19,20,],[14,-24,-30,-31,14,14,-22,-23,]),'ID':([8,],[16,]),'GT':([9,10,15,],[-30,-31,22,]),'GE':([9,10,15,],[-30,-31,23,]),'LT':([9,10,15,],[-30,-31,24,]),'LE':([9,10,15,],[-30,-31,25,]),'LBRACE':([9,10,28,],[-30,-31,43,]),'COLON':([16,],[26,]),'EQUAL':([16,31,32,33,34,],[27,44,45,46,47,]),'STRING_TYPE':([26,56,],[31,62,]),'BOOL':([26,56,],[32,61,]),'INT':([26,56,],[33,59,]),'DOUBLE':([26,56,],[34,60,]),'NEW':([27,],[39,]),'STRING':([27,44,],[40,40,]),'TRUE':([27,45,],[41,41,]),'FALSE':([27,45,],[42,42,]),'ARRAY':([39,],[48,]),'LBRACK':([48,],[56,]),'RPAREN':([53,65,],[-36,66,]),'RBRACK':([58,59,60,61,62,],[63,-10,-11,-12,-13,]),'LPAREN':([63,],[64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,43,],[1,49,]),'expression':([0,27,43,],[2,36,2,]),'sentencia':([0,43,],[3,3,]),'declararVariable':([0,43,],[4,4,]),'term':([0,11,12,27,43,],[5,17,18,5,5,]),'factor':([0,6,11,12,13,14,21,27,43,],[7,15,7,7,19,20,28,7,7,]),'comparacion':([15,],[21,]),'tipoValue':([26,],[29,]),'tipo':([26,56,],[30,58,]),'value':([27,],[35,]),'string':([27,44,],[37,50,]),'booleano':([27,45,],[38,51,]),'int':([46,64,],[52,65,]),'double':([47,],[54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',15),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',16),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',17),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',18),
  ('value -> string','value',1,'p_value','scalaSintactico.py',21),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',22),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',25),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',26),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',27),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',28),
  ('value -> NEW ARRAY LBRACK tipo RBRACK LPAREN int RPAREN','value',8,'p_newarray','scalaSintactico.py',31),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',35),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',36),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',37),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',38),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',42),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',46),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',50),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',54),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',58),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',62),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',66),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',70),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',71),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',72),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',73),
  ('factor -> INT_NUMBER','factor',1,'p_factor_int','scalaSintactico.py',76),
  ('factor -> DOUBLE_NUMBER','factor',1,'p_factor_double','scalaSintactico.py',79),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',82),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',83),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',86),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',89),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',92),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LM LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstante\n             | funcionesTupla\n             | funcionesArray\n             | fordeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRING LPAREN RPARENtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengtharrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEfor : FOR LPAREN  RPAREN LBRACE  LBRACE  RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : INT_NUMBERfactor : DOUBLE_NUMBERbooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,85,],[10,10,]),'VAR':([0,85,],[12,12,]),'VAL':([0,85,],[14,14,]),'FOR':([0,85,],[21,21,]),'ID':([0,12,14,85,],[13,29,31,13,]),'INT_NUMBER':([0,10,24,25,26,27,37,38,39,40,41,42,44,52,83,85,88,92,96,130,131,132,133,145,169,170,171,172,197,198,199,200,],[22,22,22,22,22,22,22,-83,-84,-85,-86,-87,22,22,103,22,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'DOUBLE_NUMBER':([0,10,24,25,26,27,37,38,39,40,41,42,44,52,83,85,89,92,97,130,131,132,133,146,],[23,23,23,23,23,23,23,-83,-84,-85,-86,-87,23,23,104,23,104,104,104,104,104,104,104,104,]),'$end':([1,2,3,4,5,6,7,8,9,11,15,16,17,18,19,20,22,23,33,34,35,36,45,47,48,49,50,55,56,57,58,59,60,62,63,64,65,68,69,70,72,73,74,75,76,77,78,79,80,81,82,93,103,104,107,108,109,110,125,126,127,128,129,134,135,144,185,186,187,188,205,206,207,208,],[0,-1,-2,-3,-4,-5,-6,-7,-77,-80,-63,-64,-65,-69,-70,-71,-88,-89,-75,-76,-78,-79,-66,-68,-72,-73,-74,-12,-13,-49,-48,-46,-47,-14,-15,-16,-17,-92,-90,-91,-8,-9,-49,-48,-46,-47,-10,-11,-43,-44,-45,-67,-94,-93,-50,-51,-52,-53,-58,-59,-60,-61,-62,-82,-81,-22,-18,-19,-20,-21,-54,-55,-56,-57,]),'RBRACE':([2,3,4,5,6,7,8,9,11,15,16,17,18,19,20,22,23,33,34,35,36,45,47,48,49,50,55,56,57,58,59,60,62,63,64,65,68,69,70,72,73,74,75,76,77,78,79,80,81,82,93,103,104,105,106,107,108,109,110,125,126,127,128,129,134,135,144,185,186,187,188,205,206,207,208,],[-1,-2,-3,-4,-5,-6,-7,-77,-80,-63,-64,-65,-69,-70,-71,-88,-89,-75,-76,-78,-79,-66,-68,-72,-73,-74,-12,-13,-49,-48,-46,-47,-14,-15,-16,-17,-92,-90,-91,-8,-9,-49,-48,-46,-47,-10,-11,-43,-44,-45,-67,-94,-93,134,135,-50,-51,-52,-53,-58,-59,-60,-61,-62,-82,-81,-22,-18,-19,-20,-21,-54,-55,-56,-57,]),'PLUS':([2,9,11,22,23,33,34,35,36,63,79,],[24,-77,-80,-88,-89,-75,-76,-78,-79,24,24,]),'MINUS':([2,9,11,22,23,33,34,35,36,63,79,],[25,-77,-80,-88,-89,-75,-76,-78,-79,25,25,]),'TIMES':([9,11,22,23,33,34,35,36,],[26,-80,-88,-89,26,26,-78,-79,]),'DIVIDE':([9,11,22,23,33,34,35,36,],[27,-80,-88,-89,27,27,-78,-79,]),'DOT':([13,],[30,]),'LPAREN':([21,46,52,67,157,158,159,160,193,194,195,196,],[32,71,83,92,169,170,171,172,197,198,199,200,]),'GT':([22,23,28,],[-88,-89,38,]),'GE':([22,23,28,],[-88,-89,39,]),'LT':([22,23,28,],[-88,-89,40,]),'LE':([22,23,28,],[-88,-89,41,]),'EQUAL2':([22,23,28,],[-88,-89,42,]),'LBRACE':([22,23,53,54,84,],[-88,-89,84,85,105,]),'COLON':([29,31,],[43,51,]),'EQUAL':([29,31,57,58,59,60,74,75,76,77,136,137,138,139,],[44,52,86,87,88,89,94,95,96,97,153,154,155,156,]),'SWAP':([30,],[45,]),'TOSTRING':([30,],[46,]),'PRODUCTITERATOR':([30,],[47,]),'HEAD':([30,],[48,]),'TAIL':([30,],[49,]),'LENGTH':([30,],[50,]),'RPAREN':([32,68,69,70,71,98,99,100,101,102,103,104,116,117,118,119,120,121,122,123,124,149,150,151,152,161,162,163,164,177,178,179,180,201,202,203,204,],[53,-92,-90,-91,93,129,-35,-36,-37,-38,-94,-93,144,-23,-24,-25,-26,-27,-29,-31,-33,-39,-40,-41,-42,-28,-30,-32,-34,185,186,187,188,205,206,207,208,]),'STRING_TYPE':([43,51,90,115,184,],[57,74,114,143,192,]),'BOOL':([43,51,90,115,183,],[58,75,113,142,191,]),'INT':([43,51,90,115,181,],[59,76,111,140,189,]),'DOUBLE':([43,51,90,115,182,],[60,77,112,141,190,]),'ARRAY':([43,44,66,165,166,167,168,],[61,67,91,173,174,175,176,]),'NEW':([44,153,154,155,156,],[66,165,166,167,168,]),'STRING':([44,52,83,86,92,94,130,131,132,133,148,],[68,68,68,68,68,68,68,68,68,68,68,]),'TRUE':([44,52,83,87,92,95,130,131,132,133,147,],[69,69,69,69,69,69,69,69,69,69,69,]),'FALSE':([44,52,83,87,92,95,130,131,132,133,147,],[70,70,70,70,70,70,70,70,70,70,70,]),'LBRACK':([61,91,173,174,175,176,],[90,115,181,182,183,184,]),'COMMA':([68,69,70,99,100,101,102,103,104,121,122,123,124,],[-92,-90,-91,130,131,132,133,-94,-93,145,146,147,148,]),'RBRACK':([111,112,113,114,140,141,142,143,189,190,191,192,],[136,137,138,139,157,158,159,160,193,194,195,196,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,85,],[1,106,]),'expression':([0,44,52,85,],[2,63,79,2,]),'sentencia':([0,85,],[3,3,]),'declararVariable':([0,85,],[4,4,]),'declararConstante':([0,85,],[5,5,]),'funcionesTupla':([0,85,],[6,6,]),'funcionesArray':([0,85,],[7,7,]),'for':([0,85,],[8,8,]),'term':([0,24,25,44,52,85,],[9,33,34,9,9,9,]),'factor':([0,10,24,25,26,27,37,44,52,85,],[11,28,11,11,35,36,54,11,11,11,]),'tuplaSwap':([0,85,],[15,15,]),'tuplaToString':([0,85,],[16,16,]),'tuplaProductIterator':([0,85,],[17,17,]),'arrayHead':([0,85,],[18,18,]),'arrayTail':([0,85,],[19,19,]),'arrayLength':([0,85,],[20,20,]),'comparacion':([28,],[37,]),'tipoValue':([43,],[55,]),'tipo':([43,51,],[56,73,]),'value':([44,],[62,]),'string':([44,52,83,86,92,94,130,131,132,133,148,],[64,80,102,107,124,125,102,102,102,102,124,]),'booleano':([44,52,83,87,92,95,130,131,132,133,147,],[65,81,101,108,123,126,101,101,101,101,123,]),'tipoValueCons':([51,],[72,]),'valueCons':([52,],[78,]),'tupla':([52,],[82,]),'elementosInternos2':([83,130,131,132,133,],[98,149,150,151,152,]),'int':([83,88,92,96,130,131,132,133,145,169,170,171,172,197,198,199,200,],[99,109,121,127,99,99,99,99,121,177,178,179,180,201,202,203,204,]),'double':([83,89,92,97,130,131,132,133,146,],[100,110,122,128,100,100,100,100,122,]),'elementosInternos':([92,],[116,]),'elementosInternosInt':([92,145,],[117,161,]),'elementosInternosDouble':([92,146,],[118,162,]),'elementosInternosBool':([92,147,],[119,163,]),'elementosInternosString':([92,148,],[120,164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',8),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> declararConstante','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('cuerpo -> for','cuerpo',1,'p_cuerpo','scalaSintactico.py',14),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',17),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',18),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',19),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',20),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',23),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',24),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',25),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',26),
  ('value -> string','value',1,'p_value','scalaSintactico.py',29),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',30),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',31),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',32),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',33),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',34),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',35),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',38),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',39),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',40),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',41),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',44),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',45),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',48),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',49),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',52),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',53),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',56),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',57),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',60),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',61),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',62),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',63),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',64),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',65),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',66),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',67),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',70),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',71),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',72),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',75),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',76),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',77),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',78),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',81),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',82),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',83),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',84),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',85),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',86),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',87),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',88),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',91),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',92),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',93),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',94),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',97),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',100),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',101),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',102),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',105),
  ('tuplaToString -> ID DOT TOSTRING LPAREN RPAREN','tuplaToString',5,'p_tuplaToString','scalaSintactico.py',108),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',111),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',114),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',115),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',116),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',119),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',122),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',125),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',128),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',132),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',136),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',140),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',144),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',148),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',152),
  ('for -> FOR LPAREN RPAREN LBRACE LBRACE RBRACE','for',6,'p_for','scalaSintactico.py',155),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',158),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',159),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',160),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',161),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',162),
  ('factor -> INT_NUMBER','factor',1,'p_factor_int','scalaSintactico.py',165),
  ('factor -> DOUBLE_NUMBER','factor',1,'p_factor_double','scalaSintactico.py',168),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',171),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',172),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',175),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',178),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',181),
]

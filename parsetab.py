
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

<<<<<<< HEAD
_lr_signature = 'AND ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INPUT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LM LPAREN LT MINUS MOD NEW OBJECT OR PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstante\n             | funcionesTupla\n             | funcionesArray\n             | for\n             | funcionesPropias\n             | whiledeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPAREN\n            | LIST LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n                | LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRING LPAREN RPARENtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengthfuncionesPropias : INPUT LPAREN RPAREN\n            | PRINTLN LPAREN string RPAREN\n            | PRINTLN LPAREN booleano RPAREN\n            | PRINTLN LPAREN ID RPAREN\n            | PRINTLN LPAREN expression RPARENarrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorsentencia : IF factor comparacion factor LBRACE cuerpo RBRACEcomp : factor comparacion factorwhile : WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACEwhileclause : comp\n                | ID\n                | booleanofor : FOR LPAREN  RPAREN LBRACE  LBRACE  RBRACEcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : intfactor : doublebooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'IF':([0,113,134,],[12,12,12,]),'VAR':([0,113,134,],[14,14,14,]),'VAL':([0,113,134,],[16,16,16,]),'FOR':([0,113,134,],[23,23,23,]),'INPUT':([0,113,134,],[24,24,24,]),'PRINTLN':([0,113,134,],[25,25,25,]),'WHILE':([0,113,134,],[26,26,26,]),'ID':([0,14,16,41,42,113,134,],[15,36,38,67,74,15,15,]),'INT_NUMBER':([0,12,31,32,33,34,41,42,47,48,49,50,51,52,54,62,105,112,113,116,121,122,126,134,165,166,167,168,185,219,220,221,222,227,228,229,230,259,260,261,262,],[29,29,29,29,29,29,29,29,29,-100,-101,-102,-103,-104,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'DOUBLE_NUMBER':([0,12,31,32,33,34,41,42,47,48,49,50,51,52,54,62,105,112,113,117,121,122,127,134,165,166,167,168,186,227,228,229,230,],[30,30,30,30,30,30,30,30,30,-100,-101,-102,-103,-104,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,13,17,18,19,20,21,22,27,28,29,30,43,44,45,46,55,57,58,59,60,64,69,70,71,78,79,80,81,82,83,86,87,88,89,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,123,137,138,139,140,160,161,162,163,164,169,171,184,189,194,243,244,245,246,251,252,253,254,267,268,269,270,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-89,-92,-70,-71,-72,-76,-77,-78,-105,-106,-111,-110,-87,-88,-90,-91,-73,-75,-84,-85,-86,-79,-109,-107,-108,-14,-15,-52,-51,-49,-50,-16,-17,-18,-19,-10,-11,-52,-51,-49,-50,-12,-13,-46,-47,-48,-80,-81,-82,-83,-74,-53,-54,-55,-56,-65,-66,-67,-68,-69,-99,-93,-24,-25,-95,-20,-21,-22,-23,-61,-62,-63,-64,-57,-58,-59,-60,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,13,17,18,19,20,21,22,27,28,29,30,43,44,45,46,55,57,58,59,60,64,69,70,71,78,79,80,81,82,83,86,87,88,89,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,123,133,136,137,138,139,140,160,161,162,163,164,169,170,171,184,189,194,243,244,245,246,251,252,253,254,267,268,269,270,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-89,-92,-70,-71,-72,-76,-77,-78,-105,-106,-111,-110,-87,-88,-90,-91,-73,-75,-84,-85,-86,-79,-109,-107,-108,-14,-15,-52,-51,-49,-50,-16,-17,-18,-19,-10,-11,-52,-51,-49,-50,-12,-13,-46,-47,-48,-80,-81,-82,-83,-74,169,171,-53,-54,-55,-56,-65,-66,-67,-68,-69,-99,194,-93,-24,-25,-95,-20,-21,-22,-23,-61,-62,-63,-64,-57,-58,-59,-60,]),'PLUS':([2,11,13,27,28,29,30,43,44,45,46,68,87,101,],[31,-89,-92,-105,-106,-111,-110,-87,-88,-90,-91,31,31,31,]),'MINUS':([2,11,13,27,28,29,30,43,44,45,46,68,87,101,],[32,-89,-92,-105,-106,-111,-110,-87,-88,-90,-91,32,32,32,]),'RPAREN':([11,13,27,28,29,30,39,40,43,44,45,46,65,66,67,68,69,70,71,72,73,74,75,93,128,129,130,131,132,135,150,151,152,153,154,155,156,157,158,159,190,191,192,193,207,208,209,210,231,232,233,234,239,240,241,242,263,264,265,266,],[-89,-92,-105,-106,-111,-110,63,64,-87,-88,-90,-91,107,108,109,110,-109,-107,-108,111,-96,-97,-98,123,164,-38,-39,-40,-41,-94,184,-26,-27,-28,-29,-30,-32,-34,-36,189,-42,-43,-44,-45,-31,-33,-35,-37,243,244,245,246,251,252,253,254,267,268,269,270,]),'TIMES':([11,13,27,28,29,30,43,44,45,46,],[33,-92,-105,-106,-111,-110,33,33,-90,-91,]),'DIVIDE':([11,13,27,28,29,30,43,44,45,46,],[34,-92,-105,-106,-111,-110,34,34,-90,-91,]),'DOT':([15,],[37,]),'LPAREN':([23,24,25,26,56,62,91,92,203,204,205,206,215,216,217,218,255,256,257,258,],[39,40,41,42,93,105,121,122,219,220,221,222,227,228,229,230,259,260,261,262,]),'GT':([27,28,29,30,35,76,],[-105,-106,-111,-110,48,48,]),'GE':([27,28,29,30,35,76,],[-105,-106,-111,-110,49,49,]),'LT':([27,28,29,30,35,76,],[-105,-106,-111,-110,50,50,]),'LE':([27,28,29,30,35,76,],[-105,-106,-111,-110,51,51,]),'EQUAL2':([27,28,29,30,35,76,],[-105,-106,-111,-110,52,52,]),'LBRACE':([27,28,29,30,63,77,106,111,],[-105,-106,-111,-110,106,113,133,134,]),'COMMA':([29,30,69,70,71,129,130,131,132,155,156,157,158,],[-111,-110,-109,-107,-108,165,166,167,168,185,186,187,188,]),'COLON':([36,38,],[53,61,]),'EQUAL':([36,38,80,81,82,83,96,97,98,99,172,173,174,175,176,177,178,179,],[54,62,114,115,116,117,124,125,126,127,195,196,197,198,199,200,201,202,]),'SWAP':([37,],[55,]),'TOSTRING':([37,],[56,]),'PRODUCTITERATOR':([37,],[57,]),'HEAD':([37,],[58,]),'TAIL':([37,],[59,]),'LENGTH':([37,],[60,]),'STRING':([41,54,62,105,114,121,122,124,165,166,167,168,188,227,228,229,230,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'TRUE':([41,42,54,62,105,115,121,122,125,165,166,167,168,187,227,228,229,230,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'FALSE':([41,42,54,62,105,115,121,122,125,165,166,167,168,187,227,228,229,230,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'STRING_TYPE':([53,61,118,119,149,238,],[80,96,144,148,183,250,]),'BOOL':([53,61,118,119,149,237,],[81,97,143,147,182,249,]),'INT':([53,61,118,119,149,235,],[82,98,141,145,180,247,]),'DOUBLE':([53,61,118,119,149,236,],[83,99,142,146,181,248,]),'ARRAY':([53,54,90,211,212,213,214,],[84,91,120,223,224,225,226,]),'LIST':([53,54,199,200,201,202,],[85,92,215,216,217,218,]),'NEW':([54,195,196,197,198,],[90,211,212,213,214,]),'LBRACK':([84,85,120,223,224,225,226,],[118,119,149,235,236,237,238,]),'RBRACK':([141,142,143,144,145,146,147,148,180,181,182,183,247,248,249,250,],[172,173,174,175,176,177,178,179,203,204,205,206,255,256,257,258,]),}
=======
_lr_signature = 'ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INPUT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LM LPAREN LT MINUS MOD NEW OBJECT PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstante\n             | funcionesTupla\n             | funcionesList\n             | funcionesArray\n             | for\n             | funcionesPropias\n             | comparacionesVar\n             | whiledeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPAREN\n            | LIST LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n                | LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRING LPAREN RPARENtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengthfuncionesList : listIsEmpty\n            | listReversefuncionesPropias : INPUT LPAREN RPAREN\n            | PRINTLN LPAREN string RPAREN\n            | PRINTLN LPAREN booleano RPAREN\n            | PRINTLN LPAREN ID RPAREN\n            | PRINTLN LPAREN expression RPARENarrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHlistReverse : ID DOT REVERSElistIsEmpty : ID DOT ISEMPTYexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorif : IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACEsentencia : if \n                 | if ELSE LBRACE cuerpo RBRACEwhile : WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACEwhileclause : factor comparacion factor\n                | ID\n                | booleanofor : FOR LPAREN ID LM ID RPAREN LBRACE  cuerpo  RBRACEcomparacionesVar : ID DOT EQUALS LPAREN ID  RPAREN\n                        | ID DOT EQ LPAREN ID RPARENcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : intfactor : doublebooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'VAR':([0,53,149,211,213,],[15,15,15,15,15,]),'VAL':([0,53,149,211,213,],[17,17,17,17,17,]),'FOR':([0,53,149,211,213,],[26,26,26,26,26,]),'INPUT':([0,53,149,211,213,],[27,27,27,27,27,]),'PRINTLN':([0,53,149,211,213,],[28,28,28,28,28,]),'ID':([0,15,17,44,46,47,53,98,99,113,149,211,213,],[16,41,43,68,72,79,16,136,137,148,16,16,16,]),'WHILE':([0,53,149,211,213,],[29,29,29,29,29,]),'IF':([0,53,149,211,213,],[31,31,31,31,31,]),'INT_NUMBER':([0,36,37,38,39,46,47,48,53,55,67,112,119,120,121,122,123,124,125,129,134,135,141,149,182,183,184,185,202,211,213,240,241,242,243,250,251,252,253,282,283,284,285,],[34,34,34,34,34,34,34,34,34,34,34,34,34,-109,-110,-111,-112,-113,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'DOUBLE_NUMBER':([0,36,37,38,39,46,47,48,53,55,67,112,119,120,121,122,123,124,125,130,134,135,142,149,182,183,184,185,203,211,213,250,251,252,253,],[35,35,35,35,35,35,35,35,35,35,35,35,35,-109,-110,-111,-112,-113,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,18,19,20,21,22,23,24,25,30,32,33,34,35,49,50,51,52,58,60,61,62,63,64,65,69,74,75,76,83,84,85,86,87,88,91,92,93,94,101,102,103,104,105,106,107,108,109,110,111,114,115,116,117,126,138,152,153,154,155,175,176,177,178,179,180,181,201,206,212,244,245,266,267,268,269,274,275,276,277,290,291,292,293,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-95,-100,-72,-73,-74,-81,-82,-78,-79,-80,-98,-114,-115,-120,-119,-93,-94,-96,-97,-75,-77,-92,-91,-88,-89,-90,-83,-118,-116,-117,-16,-17,-54,-53,-51,-52,-18,-19,-20,-21,-12,-13,-54,-53,-51,-52,-14,-15,-48,-49,-50,-84,-85,-86,-87,-101,-76,-55,-56,-57,-58,-107,-108,-67,-68,-69,-70,-71,-26,-27,-102,-106,-99,-22,-23,-24,-25,-63,-64,-65,-66,-59,-60,-61,-62,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,18,19,20,21,22,23,24,25,30,32,33,34,35,49,50,51,52,58,60,61,62,63,64,65,69,74,75,76,82,83,84,85,86,87,88,91,92,93,94,101,102,103,104,105,106,107,108,109,110,111,114,115,116,117,126,138,152,153,154,155,175,176,177,178,179,180,181,187,201,206,212,230,231,244,245,266,267,268,269,274,275,276,277,290,291,292,293,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-95,-100,-72,-73,-74,-81,-82,-78,-79,-80,-98,-114,-115,-120,-119,-93,-94,-96,-97,-75,-77,-92,-91,-88,-89,-90,-83,-118,-116,-117,126,-16,-17,-54,-53,-51,-52,-18,-19,-20,-21,-12,-13,-54,-53,-51,-52,-14,-15,-48,-49,-50,-84,-85,-86,-87,-101,-76,-55,-56,-57,-58,-107,-108,-67,-68,-69,-70,-71,212,-26,-27,-102,244,245,-106,-99,-22,-23,-24,-25,-63,-64,-65,-66,-59,-60,-61,-62,]),'PLUS':([2,13,30,32,33,34,35,49,50,51,52,73,92,108,],[36,-95,-98,-114,-115,-120,-119,-93,-94,-96,-97,36,36,36,]),'MINUS':([2,13,30,32,33,34,35,49,50,51,52,73,92,108,],[37,-95,-98,-114,-115,-120,-119,-93,-94,-96,-97,37,37,37,]),'RPAREN':([13,30,32,33,34,35,45,49,50,51,52,70,71,72,73,74,75,76,77,79,80,100,136,137,143,144,145,146,147,148,150,151,165,166,167,168,169,170,171,172,173,174,207,208,209,210,226,227,228,229,254,255,256,257,262,263,264,265,286,287,288,289,],[-95,-98,-114,-115,-120,-119,69,-93,-94,-96,-97,114,115,116,117,-118,-116,-117,118,-104,-105,138,175,176,181,-40,-41,-42,-43,186,-103,188,201,-28,-29,-30,-31,-32,-34,-36,-38,206,-44,-45,-46,-47,-33,-35,-37,-39,266,267,268,269,274,275,276,277,290,291,292,293,]),'TIMES':([13,30,32,33,34,35,49,50,51,52,],[38,-98,-114,-115,-120,-119,38,38,-96,-97,]),'DIVIDE':([13,30,32,33,34,35,49,50,51,52,],[39,-98,-114,-115,-120,-119,39,39,-96,-97,]),'ELSE':([14,245,],[40,-99,]),'DOT':([16,],[42,]),'LPAREN':([26,27,28,29,31,56,57,59,67,96,97,222,223,224,225,236,237,238,239,278,279,280,281,],[44,45,46,47,48,98,99,100,112,134,135,240,241,242,243,250,251,252,253,282,283,284,285,]),'GT':([32,33,34,35,78,81,],[-114,-115,-120,-119,120,120,]),'GE':([32,33,34,35,78,81,],[-114,-115,-120,-119,121,121,]),'LT':([32,33,34,35,78,81,],[-114,-115,-120,-119,122,122,]),'LE':([32,33,34,35,78,81,],[-114,-115,-120,-119,123,123,]),'EQUAL2':([32,33,34,35,78,81,],[-114,-115,-120,-119,124,124,]),'COMMA':([34,35,74,75,76,144,145,146,147,170,171,172,173,],[-120,-119,-118,-116,-117,182,183,184,185,202,203,204,205,]),'LBRACE':([40,118,186,188,],[53,149,211,213,]),'COLON':([41,43,],[54,66,]),'EQUAL':([41,43,85,86,87,88,103,104,105,106,189,190,191,192,193,194,195,196,],[55,67,127,128,129,130,139,140,141,142,214,215,216,217,218,219,220,221,]),'EQUALS':([42,],[56,]),'EQ':([42,],[57,]),'SWAP':([42,],[58,]),'TOSTRING':([42,],[59,]),'PRODUCTITERATOR':([42,],[60,]),'ISEMPTY':([42,],[61,]),'REVERSE':([42,],[62,]),'HEAD':([42,],[63,]),'TAIL':([42,],[64,]),'LENGTH':([42,],[65,]),'STRING':([46,55,67,112,127,134,135,139,182,183,184,185,205,250,251,252,253,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'TRUE':([46,47,55,67,112,128,134,135,140,182,183,184,185,204,250,251,252,253,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'FALSE':([46,47,55,67,112,128,134,135,140,182,183,184,185,204,250,251,252,253,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'STRING_TYPE':([54,66,131,132,164,261,],[85,103,159,163,200,273,]),'BOOL':([54,66,131,132,164,260,],[86,104,158,162,199,272,]),'INT':([54,66,131,132,164,258,],[87,105,156,160,197,270,]),'DOUBLE':([54,66,131,132,164,259,],[88,106,157,161,198,271,]),'ARRAY':([54,55,95,232,233,234,235,],[89,96,133,246,247,248,249,]),'LIST':([54,55,218,219,220,221,],[90,97,236,237,238,239,]),'NEW':([55,214,215,216,217,],[95,232,233,234,235,]),'LM':([68,],[113,]),'LBRACK':([89,90,133,246,247,248,249,],[131,132,164,258,259,260,261,]),'RBRACK':([156,157,158,159,160,161,162,163,197,198,199,200,270,271,272,273,],[189,190,191,192,193,194,195,196,222,223,224,225,278,279,280,281,]),}
>>>>>>> a9062fbb85b52a1206ba78091fb234bf859cb07e

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

<<<<<<< HEAD
_lr_goto_items = {'cuerpo':([0,113,134,],[1,136,170,]),'expression':([0,41,54,62,113,134,],[2,68,87,101,2,2,]),'sentencia':([0,113,134,],[3,3,3,]),'declararVariable':([0,113,134,],[4,4,4,]),'declararConstante':([0,113,134,],[5,5,5,]),'funcionesTupla':([0,113,134,],[6,6,6,]),'funcionesArray':([0,113,134,],[7,7,7,]),'for':([0,113,134,],[8,8,8,]),'funcionesPropias':([0,113,134,],[9,9,9,]),'while':([0,113,134,],[10,10,10,]),'term':([0,31,32,41,54,62,113,134,],[11,43,44,11,11,11,11,11,]),'factor':([0,12,31,32,33,34,41,42,47,54,62,112,113,134,],[13,35,13,13,45,46,13,76,77,13,13,135,13,13,]),'tuplaSwap':([0,113,134,],[17,17,17,]),'tuplaToString':([0,113,134,],[18,18,18,]),'tuplaProductIterator':([0,113,134,],[19,19,19,]),'arrayHead':([0,113,134,],[20,20,20,]),'arrayTail':([0,113,134,],[21,21,21,]),'arrayLength':([0,113,134,],[22,22,22,]),'int':([0,12,31,32,33,34,41,42,47,54,62,105,112,113,116,121,122,126,134,165,166,167,168,185,219,220,221,222,227,228,229,230,259,260,261,262,],[27,27,27,27,27,27,27,27,27,27,27,129,27,27,139,155,155,162,27,129,129,129,129,155,231,232,233,234,155,155,155,155,263,264,265,266,]),'double':([0,12,31,32,33,34,41,42,47,54,62,105,112,113,117,121,122,127,134,165,166,167,168,186,227,228,229,230,],[28,28,28,28,28,28,28,28,28,28,28,130,28,28,140,156,156,163,28,130,130,130,130,156,156,156,156,156,]),'comparacion':([35,76,],[47,112,]),'string':([41,54,62,105,114,121,122,124,165,166,167,168,188,227,228,229,230,],[65,88,102,132,137,158,158,160,132,132,132,132,158,158,158,158,158,]),'booleano':([41,42,54,62,105,115,121,122,125,165,166,167,168,187,227,228,229,230,],[66,75,89,103,131,138,157,157,161,131,131,131,131,157,157,157,157,157,]),'whileclause':([42,],[72,]),'comp':([42,],[73,]),'tipoValue':([53,],[78,]),'tipo':([53,61,],[79,95,]),'value':([54,],[86,]),'tipoValueCons':([61,],[94,]),'valueCons':([62,],[100,]),'tupla':([62,],[104,]),'elementosInternos2':([105,165,166,167,168,],[128,190,191,192,193,]),'elementosInternos':([121,122,227,228,229,230,],[150,159,239,240,241,242,]),'elementosInternosInt':([121,122,185,227,228,229,230,],[151,151,207,151,151,151,151,]),'elementosInternosDouble':([121,122,186,227,228,229,230,],[152,152,208,152,152,152,152,]),'elementosInternosBool':([121,122,187,227,228,229,230,],[153,153,209,153,153,153,153,]),'elementosInternosString':([121,122,188,227,228,229,230,],[154,154,210,154,154,154,154,]),}
=======
_lr_goto_items = {'cuerpo':([0,53,149,211,213,],[1,82,187,230,231,]),'expression':([0,46,53,55,67,149,211,213,],[2,73,2,92,108,2,2,2,]),'sentencia':([0,53,149,211,213,],[3,3,3,3,3,]),'declararVariable':([0,53,149,211,213,],[4,4,4,4,4,]),'declararConstante':([0,53,149,211,213,],[5,5,5,5,5,]),'funcionesTupla':([0,53,149,211,213,],[6,6,6,6,6,]),'funcionesList':([0,53,149,211,213,],[7,7,7,7,7,]),'funcionesArray':([0,53,149,211,213,],[8,8,8,8,8,]),'for':([0,53,149,211,213,],[9,9,9,9,9,]),'funcionesPropias':([0,53,149,211,213,],[10,10,10,10,10,]),'comparacionesVar':([0,53,149,211,213,],[11,11,11,11,11,]),'while':([0,53,149,211,213,],[12,12,12,12,12,]),'term':([0,36,37,46,53,55,67,149,211,213,],[13,49,50,13,13,13,13,13,13,13,]),'if':([0,53,149,211,213,],[14,14,14,14,14,]),'tuplaSwap':([0,53,149,211,213,],[18,18,18,18,18,]),'tuplaToString':([0,53,149,211,213,],[19,19,19,19,19,]),'tuplaProductIterator':([0,53,149,211,213,],[20,20,20,20,20,]),'listIsEmpty':([0,53,149,211,213,],[21,21,21,21,21,]),'listReverse':([0,53,149,211,213,],[22,22,22,22,22,]),'arrayHead':([0,53,149,211,213,],[23,23,23,23,23,]),'arrayTail':([0,53,149,211,213,],[24,24,24,24,24,]),'arrayLength':([0,53,149,211,213,],[25,25,25,25,25,]),'factor':([0,36,37,38,39,46,47,48,53,55,67,119,125,149,211,213,],[30,30,30,51,52,30,78,81,30,30,30,150,151,30,30,30,]),'int':([0,36,37,38,39,46,47,48,53,55,67,112,119,125,129,134,135,141,149,182,183,184,185,202,211,213,240,241,242,243,250,251,252,253,282,283,284,285,],[32,32,32,32,32,32,32,32,32,32,32,144,32,32,154,170,170,179,32,144,144,144,144,170,32,32,254,255,256,257,170,170,170,170,286,287,288,289,]),'double':([0,36,37,38,39,46,47,48,53,55,67,112,119,125,130,134,135,142,149,182,183,184,185,203,211,213,250,251,252,253,],[33,33,33,33,33,33,33,33,33,33,33,145,33,33,155,171,171,180,33,145,145,145,145,171,33,33,171,171,171,171,]),'string':([46,55,67,112,127,134,135,139,182,183,184,185,205,250,251,252,253,],[70,93,109,147,152,173,173,177,147,147,147,147,173,173,173,173,173,]),'booleano':([46,47,55,67,112,128,134,135,140,182,183,184,185,204,250,251,252,253,],[71,80,94,110,146,153,172,172,178,146,146,146,146,172,172,172,172,172,]),'whileclause':([47,],[77,]),'tipoValue':([54,],[83,]),'tipo':([54,66,],[84,102,]),'value':([55,],[91,]),'tipoValueCons':([66,],[101,]),'valueCons':([67,],[107,]),'tupla':([67,],[111,]),'comparacion':([78,81,],[119,125,]),'elementosInternos2':([112,182,183,184,185,],[143,207,208,209,210,]),'elementosInternos':([134,135,250,251,252,253,],[165,174,262,263,264,265,]),'elementosInternosInt':([134,135,202,250,251,252,253,],[166,166,226,166,166,166,166,]),'elementosInternosDouble':([134,135,203,250,251,252,253,],[167,167,227,167,167,167,167,]),'elementosInternosBool':([134,135,204,250,251,252,253,],[168,168,228,168,168,168,168,]),'elementosInternosString':([134,135,205,250,251,252,253,],[169,169,229,169,169,169,169,]),}
>>>>>>> a9062fbb85b52a1206ba78091fb234bf859cb07e

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',8),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> declararConstante','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
<<<<<<< HEAD
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('cuerpo -> for','cuerpo',1,'p_cuerpo','scalaSintactico.py',14),
  ('cuerpo -> funcionesPropias','cuerpo',1,'p_cuerpo','scalaSintactico.py',15),
  ('cuerpo -> while','cuerpo',1,'p_cuerpo','scalaSintactico.py',16),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',20),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',21),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',22),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',23),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',26),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',27),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',28),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',29),
  ('value -> string','value',1,'p_value','scalaSintactico.py',32),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',33),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',34),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',35),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',36),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',37),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',38),
  ('value -> LIST LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',39),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',42),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',43),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',44),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',45),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',48),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',49),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',52),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',53),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',56),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',57),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',60),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',61),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',64),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',65),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',66),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',67),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',68),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',69),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',70),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',71),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',74),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',75),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',76),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',79),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',80),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',81),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',82),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',86),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',87),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',88),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',89),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',90),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',91),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',92),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',93),
  ('tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',94),
  ('tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',95),
  ('tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',96),
  ('tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',97),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',100),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',101),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',102),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',103),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',106),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',109),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',110),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',111),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',114),
  ('tuplaToString -> ID DOT TOSTRING LPAREN RPAREN','tuplaToString',5,'p_tuplaToString','scalaSintactico.py',117),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',120),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',123),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',124),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',125),
  ('funcionesPropias -> INPUT LPAREN RPAREN','funcionesPropias',3,'p_funcionesPropias','scalaSintactico.py',128),
  ('funcionesPropias -> PRINTLN LPAREN string RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',129),
  ('funcionesPropias -> PRINTLN LPAREN booleano RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',130),
  ('funcionesPropias -> PRINTLN LPAREN ID RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',131),
  ('funcionesPropias -> PRINTLN LPAREN expression RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',132),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',137),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',140),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',143),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',146),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',150),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',154),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',158),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',162),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',166),
  ('sentencia -> IF factor comparacion factor LBRACE cuerpo RBRACE','sentencia',7,'p_sentencia_if','scalaSintactico.py',170),
  ('comp -> factor comparacion factor','comp',3,'p_comp','scalaSintactico.py',173),
  ('while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE','while',7,'p_while','scalaSintactico.py',181),
  ('whileclause -> comp','whileclause',1,'p_whileclause','scalaSintactico.py',184),
  ('whileclause -> ID','whileclause',1,'p_whileclause','scalaSintactico.py',185),
  ('whileclause -> booleano','whileclause',1,'p_whileclause','scalaSintactico.py',186),
  ('for -> FOR LPAREN RPAREN LBRACE LBRACE RBRACE','for',6,'p_for','scalaSintactico.py',189),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',192),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',193),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',194),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',195),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',196),
  ('factor -> int','factor',1,'p_factor_int','scalaSintactico.py',199),
  ('factor -> double','factor',1,'p_factor_double','scalaSintactico.py',202),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',205),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',206),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',209),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',212),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',215),
=======
  ('cuerpo -> funcionesList','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',14),
  ('cuerpo -> for','cuerpo',1,'p_cuerpo','scalaSintactico.py',15),
  ('cuerpo -> funcionesPropias','cuerpo',1,'p_cuerpo','scalaSintactico.py',16),
  ('cuerpo -> comparacionesVar','cuerpo',1,'p_cuerpo','scalaSintactico.py',17),
  ('cuerpo -> while','cuerpo',1,'p_cuerpo','scalaSintactico.py',18),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',21),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',22),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',23),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',24),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',27),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',28),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',29),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',30),
  ('value -> string','value',1,'p_value','scalaSintactico.py',33),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',34),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',35),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',36),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',37),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',38),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',39),
  ('value -> LIST LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',40),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',43),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',44),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',45),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',46),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',49),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',50),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',53),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',54),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',57),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',58),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',61),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',62),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',65),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',66),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',67),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',68),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',69),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',70),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',71),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',72),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',75),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',76),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',77),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',80),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',81),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',82),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',83),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',87),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',88),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',89),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',90),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',91),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',92),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',93),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',94),
  ('tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',95),
  ('tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',96),
  ('tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',97),
  ('tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',98),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',101),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',102),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',103),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',104),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',107),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',110),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',111),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',112),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',115),
  ('tuplaToString -> ID DOT TOSTRING LPAREN RPAREN','tuplaToString',5,'p_tuplaToString','scalaSintactico.py',118),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',121),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',125),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',126),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',127),
  ('funcionesList -> listIsEmpty','funcionesList',1,'p_funcionesList','scalaSintactico.py',131),
  ('funcionesList -> listReverse','funcionesList',1,'p_funcionesList','scalaSintactico.py',132),
  ('funcionesPropias -> INPUT LPAREN RPAREN','funcionesPropias',3,'p_funcionesPropias','scalaSintactico.py',136),
  ('funcionesPropias -> PRINTLN LPAREN string RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',137),
  ('funcionesPropias -> PRINTLN LPAREN booleano RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',138),
  ('funcionesPropias -> PRINTLN LPAREN ID RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',139),
  ('funcionesPropias -> PRINTLN LPAREN expression RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',140),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',145),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',148),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',151),
  ('listReverse -> ID DOT REVERSE','listReverse',3,'p_listReverse','scalaSintactico.py',154),
  ('listIsEmpty -> ID DOT ISEMPTY','listIsEmpty',3,'p_listIsEmpty','scalaSintactico.py',157),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',160),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',164),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',168),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',172),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',176),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',180),
  ('if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE','if',9,'p_sentencia_if','scalaSintactico.py',184),
  ('sentencia -> if','sentencia',1,'p_sentencia_else','scalaSintactico.py',188),
  ('sentencia -> if ELSE LBRACE cuerpo RBRACE','sentencia',5,'p_sentencia_else','scalaSintactico.py',189),
  ('while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE','while',7,'p_while','scalaSintactico.py',193),
  ('whileclause -> factor comparacion factor','whileclause',3,'p_whileclause','scalaSintactico.py',196),
  ('whileclause -> ID','whileclause',1,'p_whileclause','scalaSintactico.py',197),
  ('whileclause -> booleano','whileclause',1,'p_whileclause','scalaSintactico.py',198),
  ('for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE','for',9,'p_for','scalaSintactico.py',202),
  ('comparacionesVar -> ID DOT EQUALS LPAREN ID RPAREN','comparacionesVar',6,'p_comparacionesVar','scalaSintactico.py',206),
  ('comparacionesVar -> ID DOT EQ LPAREN ID RPAREN','comparacionesVar',6,'p_comparacionesVar','scalaSintactico.py',207),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',211),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',212),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',213),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',214),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',215),
  ('factor -> int','factor',1,'p_factor_int','scalaSintactico.py',218),
  ('factor -> double','factor',1,'p_factor_double','scalaSintactico.py',221),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',224),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',225),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',228),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',231),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',234),
>>>>>>> a9062fbb85b52a1206ba78091fb234bf859cb07e
]

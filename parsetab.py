
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY BOOL CLASS COLON COMMA DECREMENT DEF DIVIDE DOT DOUBLE DOUBLE_NUMBER ELSE EQ EQUAL EQUAL2 EQUALS FALSE FOR GE GT HEAD ID IF INCREMENT INPUT INT INT_NUMBER ISEMPTY LBRACE LBRACK LE LENGTH LIST LM LPAREN LT MINUS MOD NEW OBJECT OR PLUS PRINTLN PRODUCTITERATOR RBRACE RBRACK RETURN REVERSE RPAREN SEMICOLON STRING STRING_TYPE SWAP TAIL THIS TIMES TOSTRING TRUE VAL VAR WHILE unitcuerpo : expression\n             | sentencia\n             | declararVariable\n             | declararConstante\n             | funcionesTupla\n             | funcionesList\n             | funcionesArray\n             | for\n             | funcionesPropias\n             | whiledeclararConstante : VAL ID COLON tipoValueCons\n                        | VAL ID COLON tipo\n                        | VAL ID EQUAL valueCons\n                        | VAL ID EQUAL expressiondeclararVariable : VAR ID COLON tipoValue\n                        | VAR ID COLON tipo\n                        | VAR ID EQUAL value\n                        | VAR ID EQUAL expressionvalue : string\n            | booleano\n            | NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n            | NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n            | ARRAY LPAREN elementosInternos RPAREN\n            | LIST LPAREN elementosInternos RPARENelementosInternos : elementosInternosInt\n            | elementosInternosDouble\n            | elementosInternosBool\n            | elementosInternosStringelementosInternosInt : int\n            | int COMMA elementosInternosIntelementosInternosDouble : double\n            | double COMMA elementosInternosDoubleelementosInternosBool : booleano\n            | booleano COMMA elementosInternosBoolelementosInternosString : string\n            | string COMMA elementosInternosStringelementosInternos2 : int\n            | double\n            | booleano\n            | string\n            | int COMMA elementosInternos2\n            | double COMMA elementosInternos2\n            | booleano COMMA elementosInternos2\n            | string COMMA elementosInternos2valueCons : string\n            | booleano\n            | tuplatipo : INT\n             | DOUBLE\n             | BOOL\n             | STRING_TYPEtipoValue : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL double\n                | ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN\n                | ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN\n                | LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN\n                | LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPARENtipoValueCons : STRING_TYPE EQUAL string\n                | BOOL EQUAL booleano\n                | INT EQUAL int\n                | DOUBLE EQUAL doubletupla : LPAREN elementosInternos2 RPARENfuncionesTupla : tuplaSwap\n                | tuplaToString\n                | tuplaProductIteratortuplaSwap : ID DOT SWAPtuplaToString : ID DOT TOSTRING LPAREN RPARENtuplaProductIterator : ID DOT PRODUCTITERATORfuncionesArray : arrayHead\n            | arrayTail\n            | arrayLengthfuncionesList : listIsEmpty\n            | listReversefuncionesPropias : INPUT LPAREN RPAREN\n            | PRINTLN LPAREN string RPAREN\n            | PRINTLN LPAREN booleano RPAREN\n            | PRINTLN LPAREN ID RPAREN\n            | PRINTLN LPAREN expression RPARENarrayHead : ID DOT HEADarrayTail : ID DOT TAILarrayLength : ID DOT LENGTHlistReverse : ID DOT REVERSElistIsEmpty : ID DOT ISEMPTYexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorif : IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACEsentencia : if\n                 | if ELSE LBRACE cuerpo RBRACEcomp : factor comparacion factor\n            | comparacionesVarwhile : WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACEwhileclause : comp\n                | ID\n                | booleanofor : FOR LPAREN ID LM ID RPAREN LBRACE  cuerpo  RBRACEcomparacionesVar : ID DOT EQUALS LPAREN ID  RPAREN\n                        | ID DOT EQ LPAREN ID RPARENcomparacion : GT\n                    | GE\n                    | LT\n                    | LE\n                    | EQUAL2factor : intfactor : doublebooleano : TRUE\n                | FALSEstring : STRINGdouble : DOUBLE_NUMBERint : INT_NUMBER'
    
_lr_action_items = {'VAR':([0,52,145,209,213,],[14,14,14,14,14,]),'VAL':([0,52,145,209,213,],[16,16,16,16,16,]),'FOR':([0,52,145,209,213,],[25,25,25,25,25,]),'INPUT':([0,52,145,209,213,],[26,26,26,26,26,]),'PRINTLN':([0,52,145,209,213,],[27,27,27,27,27,]),'WHILE':([0,52,145,209,213,],[28,28,28,28,28,]),'IF':([0,52,145,209,213,],[30,30,30,30,30,]),'ID':([0,14,16,43,45,46,52,110,145,184,185,209,213,],[15,40,42,65,69,76,15,144,15,211,212,15,15,]),'INT_NUMBER':([0,35,36,37,38,45,46,47,52,54,64,109,117,118,119,120,121,122,123,127,132,133,137,145,178,179,180,181,200,209,213,242,243,244,245,252,253,254,255,284,285,286,287,],[33,33,33,33,33,33,33,33,33,33,33,33,33,-110,-111,-112,-113,-114,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'DOUBLE_NUMBER':([0,35,36,37,38,45,46,47,52,54,64,109,117,118,119,120,121,122,123,128,132,133,138,145,178,179,180,181,201,209,213,252,253,254,255,],[34,34,34,34,34,34,34,34,34,34,34,34,34,-110,-111,-112,-113,-114,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,17,18,19,20,21,22,23,24,29,31,32,33,34,48,49,50,51,55,57,58,59,60,61,62,66,71,72,73,82,83,84,85,86,87,90,91,92,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,124,134,150,151,152,153,173,174,175,176,177,199,204,210,246,247,268,269,270,271,276,277,278,279,292,293,294,295,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-94,-99,-71,-72,-73,-80,-81,-77,-78,-79,-97,-115,-116,-121,-120,-92,-93,-95,-96,-74,-76,-91,-90,-87,-88,-89,-82,-119,-117,-118,-15,-16,-53,-52,-50,-51,-17,-18,-19,-20,-11,-12,-53,-52,-50,-51,-13,-14,-47,-48,-49,-83,-84,-85,-86,-100,-75,-54,-55,-56,-57,-66,-67,-68,-69,-70,-25,-26,-103,-107,-98,-21,-22,-23,-24,-62,-63,-64,-65,-58,-59,-60,-61,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,17,18,19,20,21,22,23,24,29,31,32,33,34,48,49,50,51,55,57,58,59,60,61,62,66,71,72,73,81,82,83,84,85,86,87,90,91,92,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,124,134,150,151,152,153,173,174,175,176,177,183,199,204,210,230,233,246,247,268,269,270,271,276,277,278,279,292,293,294,295,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-94,-99,-71,-72,-73,-80,-81,-77,-78,-79,-97,-115,-116,-121,-120,-92,-93,-95,-96,-74,-76,-91,-90,-87,-88,-89,-82,-119,-117,-118,124,-15,-16,-53,-52,-50,-51,-17,-18,-19,-20,-11,-12,-53,-52,-50,-51,-13,-14,-47,-48,-49,-83,-84,-85,-86,-100,-75,-54,-55,-56,-57,-66,-67,-68,-69,-70,210,-25,-26,-103,246,247,-107,-98,-21,-22,-23,-24,-62,-63,-64,-65,-58,-59,-60,-61,]),'PLUS':([2,12,29,31,32,33,34,48,49,50,51,70,91,105,],[35,-94,-97,-115,-116,-121,-120,-92,-93,-95,-96,35,35,35,]),'MINUS':([2,12,29,31,32,33,34,48,49,50,51,70,91,105,],[36,-94,-97,-115,-116,-121,-120,-92,-93,-95,-96,36,36,36,]),'RPAREN':([12,29,31,32,33,34,44,48,49,50,51,67,68,69,70,71,72,73,74,75,76,77,79,97,139,140,141,142,143,144,148,149,163,164,165,166,167,168,169,170,171,172,205,206,207,208,211,212,226,227,228,229,231,232,256,257,258,259,264,265,266,267,288,289,290,291,],[-94,-97,-115,-116,-121,-120,66,-92,-93,-95,-96,111,112,113,114,-119,-117,-118,115,-104,-105,-106,-102,134,177,-39,-40,-41,-42,182,-101,186,199,-27,-28,-29,-30,-31,-33,-35,-37,204,-43,-44,-45,-46,231,232,-32,-34,-36,-38,-108,-109,268,269,270,271,276,277,278,279,292,293,294,295,]),'TIMES':([12,29,31,32,33,34,48,49,50,51,],[37,-97,-115,-116,-121,-120,37,37,-95,-96,]),'DIVIDE':([12,29,31,32,33,34,48,49,50,51,],[38,-97,-115,-116,-121,-120,38,38,-95,-96,]),'ELSE':([13,247,],[39,-98,]),'DOT':([15,76,],[41,116,]),'LPAREN':([25,26,27,28,30,56,64,95,96,146,147,222,223,224,225,238,239,240,241,280,281,282,283,],[43,44,45,46,47,97,109,132,133,184,185,242,243,244,245,252,253,254,255,284,285,286,287,]),'GT':([31,32,33,34,78,80,],[-115,-116,-121,-120,118,118,]),'GE':([31,32,33,34,78,80,],[-115,-116,-121,-120,119,119,]),'LT':([31,32,33,34,78,80,],[-115,-116,-121,-120,120,120,]),'LE':([31,32,33,34,78,80,],[-115,-116,-121,-120,121,121,]),'EQUAL2':([31,32,33,34,78,80,],[-115,-116,-121,-120,122,122,]),'COMMA':([33,34,71,72,73,140,141,142,143,168,169,170,171,],[-121,-120,-119,-117,-118,178,179,180,181,200,201,202,203,]),'LBRACE':([39,115,182,186,],[52,145,209,213,]),'COLON':([40,42,],[53,63,]),'EQUAL':([40,42,84,85,86,87,100,101,102,103,187,188,189,190,191,192,193,194,],[54,64,125,126,127,128,135,136,137,138,214,215,216,217,218,219,220,221,]),'SWAP':([41,],[55,]),'TOSTRING':([41,],[56,]),'PRODUCTITERATOR':([41,],[57,]),'ISEMPTY':([41,],[58,]),'REVERSE':([41,],[59,]),'HEAD':([41,],[60,]),'TAIL':([41,],[61,]),'LENGTH':([41,],[62,]),'STRING':([45,54,64,109,125,132,133,135,178,179,180,181,203,252,253,254,255,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'TRUE':([45,46,54,64,109,126,132,133,136,178,179,180,181,202,252,253,254,255,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'FALSE':([45,46,54,64,109,126,132,133,136,178,179,180,181,202,252,253,254,255,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'STRING_TYPE':([53,63,129,130,162,263,],[84,100,157,161,198,275,]),'BOOL':([53,63,129,130,162,262,],[85,101,156,160,197,274,]),'INT':([53,63,129,130,162,260,],[86,102,154,158,195,272,]),'DOUBLE':([53,63,129,130,162,261,],[87,103,155,159,196,273,]),'ARRAY':([53,54,94,234,235,236,237,],[88,95,131,248,249,250,251,]),'LIST':([53,54,218,219,220,221,],[89,96,238,239,240,241,]),'NEW':([54,214,215,216,217,],[94,234,235,236,237,]),'LM':([65,],[110,]),'LBRACK':([88,89,131,248,249,250,251,],[129,130,162,260,261,262,263,]),'EQUALS':([116,],[146,]),'EQ':([116,],[147,]),'RBRACK':([154,155,156,157,158,159,160,161,195,196,197,198,272,273,274,275,],[187,188,189,190,191,192,193,194,222,223,224,225,280,281,282,283,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,52,145,209,213,],[1,81,183,230,233,]),'expression':([0,45,52,54,64,145,209,213,],[2,70,2,91,105,2,2,2,]),'sentencia':([0,52,145,209,213,],[3,3,3,3,3,]),'declararVariable':([0,52,145,209,213,],[4,4,4,4,4,]),'declararConstante':([0,52,145,209,213,],[5,5,5,5,5,]),'funcionesTupla':([0,52,145,209,213,],[6,6,6,6,6,]),'funcionesList':([0,52,145,209,213,],[7,7,7,7,7,]),'funcionesArray':([0,52,145,209,213,],[8,8,8,8,8,]),'for':([0,52,145,209,213,],[9,9,9,9,9,]),'funcionesPropias':([0,52,145,209,213,],[10,10,10,10,10,]),'while':([0,52,145,209,213,],[11,11,11,11,11,]),'term':([0,35,36,45,52,54,64,145,209,213,],[12,48,49,12,12,12,12,12,12,12,]),'if':([0,52,145,209,213,],[13,13,13,13,13,]),'tuplaSwap':([0,52,145,209,213,],[17,17,17,17,17,]),'tuplaToString':([0,52,145,209,213,],[18,18,18,18,18,]),'tuplaProductIterator':([0,52,145,209,213,],[19,19,19,19,19,]),'listIsEmpty':([0,52,145,209,213,],[20,20,20,20,20,]),'listReverse':([0,52,145,209,213,],[21,21,21,21,21,]),'arrayHead':([0,52,145,209,213,],[22,22,22,22,22,]),'arrayTail':([0,52,145,209,213,],[23,23,23,23,23,]),'arrayLength':([0,52,145,209,213,],[24,24,24,24,24,]),'factor':([0,35,36,37,38,45,46,47,52,54,64,117,123,145,209,213,],[29,29,29,50,51,29,78,80,29,29,29,148,149,29,29,29,]),'int':([0,35,36,37,38,45,46,47,52,54,64,109,117,123,127,132,133,137,145,178,179,180,181,200,209,213,242,243,244,245,252,253,254,255,284,285,286,287,],[31,31,31,31,31,31,31,31,31,31,31,140,31,31,152,168,168,175,31,140,140,140,140,168,31,31,256,257,258,259,168,168,168,168,288,289,290,291,]),'double':([0,35,36,37,38,45,46,47,52,54,64,109,117,123,128,132,133,138,145,178,179,180,181,201,209,213,252,253,254,255,],[32,32,32,32,32,32,32,32,32,32,32,141,32,32,153,169,169,176,32,141,141,141,141,169,32,32,169,169,169,169,]),'string':([45,54,64,109,125,132,133,135,178,179,180,181,203,252,253,254,255,],[67,92,106,143,150,171,171,173,143,143,143,143,171,171,171,171,171,]),'booleano':([45,46,54,64,109,126,132,133,136,178,179,180,181,202,252,253,254,255,],[68,77,93,107,142,151,170,170,174,142,142,142,142,170,170,170,170,170,]),'whileclause':([46,],[74,]),'comp':([46,],[75,]),'comparacionesVar':([46,],[79,]),'tipoValue':([53,],[82,]),'tipo':([53,63,],[83,99,]),'value':([54,],[90,]),'tipoValueCons':([63,],[98,]),'valueCons':([64,],[104,]),'tupla':([64,],[108,]),'comparacion':([78,80,],[117,123,]),'elementosInternos2':([109,178,179,180,181,],[139,205,206,207,208,]),'elementosInternos':([132,133,252,253,254,255,],[163,172,264,265,266,267,]),'elementosInternosInt':([132,133,200,252,253,254,255,],[164,164,226,164,164,164,164,]),'elementosInternosDouble':([132,133,201,252,253,254,255,],[165,165,227,165,165,165,165,]),'elementosInternosBool':([132,133,202,252,253,254,255,],[166,166,228,166,166,166,166,]),'elementosInternosString':([132,133,203,252,253,254,255,],[167,167,229,167,167,167,167,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> expression','cuerpo',1,'p_cuerpo','scalaSintactico.py',8),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','scalaSintactico.py',9),
  ('cuerpo -> declararVariable','cuerpo',1,'p_cuerpo','scalaSintactico.py',10),
  ('cuerpo -> declararConstante','cuerpo',1,'p_cuerpo','scalaSintactico.py',11),
  ('cuerpo -> funcionesTupla','cuerpo',1,'p_cuerpo','scalaSintactico.py',12),
  ('cuerpo -> funcionesList','cuerpo',1,'p_cuerpo','scalaSintactico.py',13),
  ('cuerpo -> funcionesArray','cuerpo',1,'p_cuerpo','scalaSintactico.py',14),
  ('cuerpo -> for','cuerpo',1,'p_cuerpo','scalaSintactico.py',15),
  ('cuerpo -> funcionesPropias','cuerpo',1,'p_cuerpo','scalaSintactico.py',16),
  ('cuerpo -> while','cuerpo',1,'p_cuerpo','scalaSintactico.py',17),
  ('declararConstante -> VAL ID COLON tipoValueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',20),
  ('declararConstante -> VAL ID COLON tipo','declararConstante',4,'p_declararConstante','scalaSintactico.py',21),
  ('declararConstante -> VAL ID EQUAL valueCons','declararConstante',4,'p_declararConstante','scalaSintactico.py',22),
  ('declararConstante -> VAL ID EQUAL expression','declararConstante',4,'p_declararConstante','scalaSintactico.py',23),
  ('declararVariable -> VAR ID COLON tipoValue','declararVariable',4,'p_declararVariable','scalaSintactico.py',26),
  ('declararVariable -> VAR ID COLON tipo','declararVariable',4,'p_declararVariable','scalaSintactico.py',27),
  ('declararVariable -> VAR ID EQUAL value','declararVariable',4,'p_declararVariable','scalaSintactico.py',28),
  ('declararVariable -> VAR ID EQUAL expression','declararVariable',4,'p_declararVariable','scalaSintactico.py',29),
  ('value -> string','value',1,'p_value','scalaSintactico.py',32),
  ('value -> booleano','value',1,'p_value','scalaSintactico.py',33),
  ('value -> NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',34),
  ('value -> NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',35),
  ('value -> NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',36),
  ('value -> NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','value',8,'p_value','scalaSintactico.py',37),
  ('value -> ARRAY LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',38),
  ('value -> LIST LPAREN elementosInternos RPAREN','value',4,'p_value','scalaSintactico.py',39),
  ('elementosInternos -> elementosInternosInt','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',42),
  ('elementosInternos -> elementosInternosDouble','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',43),
  ('elementosInternos -> elementosInternosBool','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',44),
  ('elementosInternos -> elementosInternosString','elementosInternos',1,'p_elementosInternos','scalaSintactico.py',45),
  ('elementosInternosInt -> int','elementosInternosInt',1,'p_elementosInternosInt','scalaSintactico.py',48),
  ('elementosInternosInt -> int COMMA elementosInternosInt','elementosInternosInt',3,'p_elementosInternosInt','scalaSintactico.py',49),
  ('elementosInternosDouble -> double','elementosInternosDouble',1,'p_elementosInternosDouble','scalaSintactico.py',52),
  ('elementosInternosDouble -> double COMMA elementosInternosDouble','elementosInternosDouble',3,'p_elementosInternosDouble','scalaSintactico.py',53),
  ('elementosInternosBool -> booleano','elementosInternosBool',1,'p_elementosInternosBool','scalaSintactico.py',56),
  ('elementosInternosBool -> booleano COMMA elementosInternosBool','elementosInternosBool',3,'p_elementosInternosBool','scalaSintactico.py',57),
  ('elementosInternosString -> string','elementosInternosString',1,'p_elementosInternosString','scalaSintactico.py',60),
  ('elementosInternosString -> string COMMA elementosInternosString','elementosInternosString',3,'p_elementosInternosString','scalaSintactico.py',61),
  ('elementosInternos2 -> int','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',64),
  ('elementosInternos2 -> double','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',65),
  ('elementosInternos2 -> booleano','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',66),
  ('elementosInternos2 -> string','elementosInternos2',1,'p_elementosInternos2','scalaSintactico.py',67),
  ('elementosInternos2 -> int COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',68),
  ('elementosInternos2 -> double COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',69),
  ('elementosInternos2 -> booleano COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',70),
  ('elementosInternos2 -> string COMMA elementosInternos2','elementosInternos2',3,'p_elementosInternos2','scalaSintactico.py',71),
  ('valueCons -> string','valueCons',1,'p_valueCons','scalaSintactico.py',74),
  ('valueCons -> booleano','valueCons',1,'p_valueCons','scalaSintactico.py',75),
  ('valueCons -> tupla','valueCons',1,'p_valueCons','scalaSintactico.py',76),
  ('tipo -> INT','tipo',1,'p_tipo','scalaSintactico.py',79),
  ('tipo -> DOUBLE','tipo',1,'p_tipo','scalaSintactico.py',80),
  ('tipo -> BOOL','tipo',1,'p_tipo','scalaSintactico.py',81),
  ('tipo -> STRING_TYPE','tipo',1,'p_tipo','scalaSintactico.py',82),
  ('tipoValue -> STRING_TYPE EQUAL string','tipoValue',3,'p_tipoValue','scalaSintactico.py',86),
  ('tipoValue -> BOOL EQUAL booleano','tipoValue',3,'p_tipoValue','scalaSintactico.py',87),
  ('tipoValue -> INT EQUAL int','tipoValue',3,'p_tipoValue','scalaSintactico.py',88),
  ('tipoValue -> DOUBLE EQUAL double','tipoValue',3,'p_tipoValue','scalaSintactico.py',89),
  ('tipoValue -> ARRAY LBRACK INT RBRACK EQUAL NEW ARRAY LBRACK INT RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',90),
  ('tipoValue -> ARRAY LBRACK DOUBLE RBRACK EQUAL NEW ARRAY LBRACK DOUBLE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',91),
  ('tipoValue -> ARRAY LBRACK BOOL RBRACK EQUAL NEW ARRAY LBRACK BOOL RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',92),
  ('tipoValue -> ARRAY LBRACK STRING_TYPE RBRACK EQUAL NEW ARRAY LBRACK STRING_TYPE RBRACK LPAREN int RPAREN','tipoValue',13,'p_tipoValue','scalaSintactico.py',93),
  ('tipoValue -> LIST LBRACK INT RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',94),
  ('tipoValue -> LIST LBRACK DOUBLE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',95),
  ('tipoValue -> LIST LBRACK BOOL RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',96),
  ('tipoValue -> LIST LBRACK STRING_TYPE RBRACK EQUAL LIST LPAREN elementosInternos RPAREN','tipoValue',9,'p_tipoValue','scalaSintactico.py',97),
  ('tipoValueCons -> STRING_TYPE EQUAL string','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',100),
  ('tipoValueCons -> BOOL EQUAL booleano','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',101),
  ('tipoValueCons -> INT EQUAL int','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',102),
  ('tipoValueCons -> DOUBLE EQUAL double','tipoValueCons',3,'p_tipoValueCons','scalaSintactico.py',103),
  ('tupla -> LPAREN elementosInternos2 RPAREN','tupla',3,'p_tupla','scalaSintactico.py',106),
  ('funcionesTupla -> tuplaSwap','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',109),
  ('funcionesTupla -> tuplaToString','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',110),
  ('funcionesTupla -> tuplaProductIterator','funcionesTupla',1,'p_funcionesTupla','scalaSintactico.py',111),
  ('tuplaSwap -> ID DOT SWAP','tuplaSwap',3,'p_tuplaSwap','scalaSintactico.py',114),
  ('tuplaToString -> ID DOT TOSTRING LPAREN RPAREN','tuplaToString',5,'p_tuplaToString','scalaSintactico.py',117),
  ('tuplaProductIterator -> ID DOT PRODUCTITERATOR','tuplaProductIterator',3,'p_tuplaProductIterator','scalaSintactico.py',120),
  ('funcionesArray -> arrayHead','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',124),
  ('funcionesArray -> arrayTail','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',125),
  ('funcionesArray -> arrayLength','funcionesArray',1,'p_funcionesArray','scalaSintactico.py',126),
  ('funcionesList -> listIsEmpty','funcionesList',1,'p_funcionesList','scalaSintactico.py',130),
  ('funcionesList -> listReverse','funcionesList',1,'p_funcionesList','scalaSintactico.py',131),
  ('funcionesPropias -> INPUT LPAREN RPAREN','funcionesPropias',3,'p_funcionesPropias','scalaSintactico.py',135),
  ('funcionesPropias -> PRINTLN LPAREN string RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',136),
  ('funcionesPropias -> PRINTLN LPAREN booleano RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',137),
  ('funcionesPropias -> PRINTLN LPAREN ID RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',138),
  ('funcionesPropias -> PRINTLN LPAREN expression RPAREN','funcionesPropias',4,'p_funcionesPropias','scalaSintactico.py',139),
  ('arrayHead -> ID DOT HEAD','arrayHead',3,'p_arrayHead','scalaSintactico.py',144),
  ('arrayTail -> ID DOT TAIL','arrayTail',3,'p_arrayTail','scalaSintactico.py',147),
  ('arrayLength -> ID DOT LENGTH','arrayLength',3,'p_arrayLength','scalaSintactico.py',150),
  ('listReverse -> ID DOT REVERSE','listReverse',3,'p_listReverse','scalaSintactico.py',153),
  ('listIsEmpty -> ID DOT ISEMPTY','listIsEmpty',3,'p_listIsEmpty','scalaSintactico.py',156),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','scalaSintactico.py',159),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','scalaSintactico.py',163),
  ('expression -> term','expression',1,'p_expression_term','scalaSintactico.py',167),
  ('term -> term TIMES factor','term',3,'p_term_times','scalaSintactico.py',171),
  ('term -> term DIVIDE factor','term',3,'p_term_div','scalaSintactico.py',175),
  ('term -> factor','term',1,'p_term_factor','scalaSintactico.py',179),
  ('if -> IF LPAREN factor comparacion factor RPAREN LBRACE cuerpo RBRACE','if',9,'p_sentencia_if','scalaSintactico.py',183),
  ('sentencia -> if','sentencia',1,'p_sentencia_else','scalaSintactico.py',187),
  ('sentencia -> if ELSE LBRACE cuerpo RBRACE','sentencia',5,'p_sentencia_else','scalaSintactico.py',188),
  ('comp -> factor comparacion factor','comp',3,'p_comp','scalaSintactico.py',192),
  ('comp -> comparacionesVar','comp',1,'p_comp','scalaSintactico.py',193),
  ('while -> WHILE LPAREN whileclause RPAREN LBRACE cuerpo RBRACE','while',7,'p_while','scalaSintactico.py',201),
  ('whileclause -> comp','whileclause',1,'p_whileclause','scalaSintactico.py',204),
  ('whileclause -> ID','whileclause',1,'p_whileclause','scalaSintactico.py',205),
  ('whileclause -> booleano','whileclause',1,'p_whileclause','scalaSintactico.py',206),
  ('for -> FOR LPAREN ID LM ID RPAREN LBRACE cuerpo RBRACE','for',9,'p_for','scalaSintactico.py',210),
  ('comparacionesVar -> ID DOT EQUALS LPAREN ID RPAREN','comparacionesVar',6,'p_comparacionesVar','scalaSintactico.py',214),
  ('comparacionesVar -> ID DOT EQ LPAREN ID RPAREN','comparacionesVar',6,'p_comparacionesVar','scalaSintactico.py',215),
  ('comparacion -> GT','comparacion',1,'p_comparacion','scalaSintactico.py',219),
  ('comparacion -> GE','comparacion',1,'p_comparacion','scalaSintactico.py',220),
  ('comparacion -> LT','comparacion',1,'p_comparacion','scalaSintactico.py',221),
  ('comparacion -> LE','comparacion',1,'p_comparacion','scalaSintactico.py',222),
  ('comparacion -> EQUAL2','comparacion',1,'p_comparacion','scalaSintactico.py',223),
  ('factor -> int','factor',1,'p_factor_int','scalaSintactico.py',226),
  ('factor -> double','factor',1,'p_factor_double','scalaSintactico.py',229),
  ('booleano -> TRUE','booleano',1,'p_booleano','scalaSintactico.py',232),
  ('booleano -> FALSE','booleano',1,'p_booleano','scalaSintactico.py',233),
  ('string -> STRING','string',1,'p_string','scalaSintactico.py',236),
  ('double -> DOUBLE_NUMBER','double',1,'p_double','scalaSintactico.py',239),
  ('int -> INT_NUMBER','int',1,'p_int','scalaSintactico.py',242),
]
